/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * canvas.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia-gtk.h>

namespace Maia
{
    namespace Gtk
    {
        Glib::RefPtr<Graphic::Surface>
        create_surface (const Glib::RefPtr<Gdk::Drawable>& inpDrawable, unsigned int inWidth, unsigned int inHeight)
        {
            Glib::RefPtr<Graphic::Surface> pSurface = Glib::RefPtr<Graphic::Surface> (0);
            
            cairo_t* ctx = gdk_cairo_create (const_cast<GdkDrawable*> (inpDrawable->gobj ()));
            cairo_surface_t* surface = cairo_get_target (ctx);

            pSurface = Graphic::Surface::create (surface, inWidth, inHeight);

            cairo_destroy (ctx);

            return pSurface;
        }

        Glib::RefPtr<Graphic::Surface>
        create_surface (const ::Gtk::Widget& inWidget)
        {
            Glib::RefPtr<Graphic::Surface> pSurface = Glib::RefPtr<Graphic::Surface> (0);
            Glib::RefPtr<Gdk::Window> pWindow = Glib::RefPtr<Gdk::Window>::cast_const (inWidget.get_window ());
            
            if (pWindow && inWidget.get_allocation ().get_width () > 0 && inWidget.get_allocation ().get_height () > 0)
            {
                pSurface = create_surface (pWindow, inWidget.get_allocation ().get_width (), inWidget.get_allocation ().get_height ());
            }

            return pSurface;
        }
    }
}
