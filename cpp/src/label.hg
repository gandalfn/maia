/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * label.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-glyph.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    class Label : public Item, public ItemPackable, public ItemMovable
    {
        _CLASS_GOBJECT(Label, MaiaLabel, MAIA_LABEL, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)

        protected:
            _CTOR_DEFAULT()

        public:
            static Glib::RefPtr<Label> create (const Glib::ustring& inId, const Glib::ustring& inText)
            {
                MaiaLabel* pLabel = maia_label_new (inId.c_str (), inText.c_str ());

                return Glib::RefPtr<Label> (new Label (pLabel));
            }

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_label_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_label_set_font_description)

            _WRAP_METHOD(Graphic::GlyphAlignment get_alignment () const, maia_label_get_alignment)
            _WRAP_METHOD(void set_alignment (Graphic::GlyphAlignment inAlignment), maia_label_set_alignment)

            _WRAP_METHOD(Graphic::GlyphWrapMode get_wrap_mode () const, maia_label_get_wrap_mode)
            _WRAP_METHOD(void set_wrap_mode (Graphic::GlyphWrapMode inMode), maia_label_set_wrap_mode)

            _WRAP_METHOD(Graphic::GlyphEllipsizeMode get_ellipsize_mode () const, maia_label_get_ellipsize_mode)
            _WRAP_METHOD(void set_ellipsize_mode (Graphic::GlyphEllipsizeMode inMode), maia_label_set_ellipsize_mode)

            _WRAP_METHOD(Glib::RefPtr<Graphic::Color> get_shade_color () const, maia_label_get_shade_color, refreturn)
            _WRAP_METHOD(void set_shade_color (const Glib::RefPtr<Graphic::Color>& inColor), maia_label_set_shade_color)

            _WRAP_METHOD(bool get_translatable () const, maia_label_get_translatable)
            _WRAP_METHOD(void set_translatable (bool inTranslatable = true), maia_label_set_translatable)

            _WRAP_METHOD(bool get_hide_if_empty () const, maia_label_get_hide_if_empty)
            _WRAP_METHOD(void set_hide_if_empty (bool inHideIfEmpty = true), maia_label_set_hide_if_empty)

            _WRAP_METHOD(Glib::ustring get_text () const, maia_label_get_text)
            _WRAP_METHOD(void set_text (const Glib::ustring& inLabel), maia_label_set_text)

            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("alignment", Graphic::GlyphAlignment)
            _WRAP_PROPERTY("wrap-mode", Graphic::GlyphWrapMode)
            _WRAP_PROPERTY("ellipsize-mode", Graphic::GlyphEllipsizeMode)
            _WRAP_PROPERTY("shade-color", Glib::RefPtr<Graphic::Color>)
            _WRAP_PROPERTY("translatable", bool)
            _WRAP_PROPERTY("text", Glib::ustring)
            _WRAP_PROPERTY("hide-if-empty", bool)

            _WRAP_PROPERTY("row", guint)
            _WRAP_PROPERTY("rows", guint)

            _WRAP_PROPERTY("column", guint)
            _WRAP_PROPERTY("columns", guint)

            _WRAP_PROPERTY("xexpand", bool)
            _WRAP_PROPERTY("xfill", bool)
            _WRAP_PROPERTY("xshrink", bool)
            _WRAP_PROPERTY("xalign", double)

            _WRAP_PROPERTY("yexpand", bool)
            _WRAP_PROPERTY("yfill", bool)
            _WRAP_PROPERTY("yshrink", bool)
            _WRAP_PROPERTY("yalign", double)

            _WRAP_PROPERTY("top-padding", double)
            _WRAP_PROPERTY("bottom-padding", double)
            _WRAP_PROPERTY("left-padding", double)
            _WRAP_PROPERTY("right-padding", double)
    };
}
