/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * label.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-glyph.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/item.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    class Label : public Item, public ItemPackable, public ItemMovable, public ItemFocusable
    {
        _CLASS_GOBJECT(Label, MaiaLabel, MAIA_LABEL, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit Label(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<Label>;

            static Label::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inText)
            {
                MaiaLabel* pLabel = maia_label_new (inId.c_str (), inText.c_str ());

                return Label::RefPtr (new Label (pLabel));
            }

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_label_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_label_set_font_description)

            _WRAP_METHOD(Graphic::Glyph::Alignment get_alignment () const, maia_label_get_alignment)
            _WRAP_METHOD(void set_alignment (Graphic::Glyph::Alignment inAlignment), maia_label_set_alignment)

            _WRAP_METHOD(Graphic::Glyph::WrapMode get_wrap_mode () const, maia_label_get_wrap_mode)
            _WRAP_METHOD(void set_wrap_mode (Graphic::Glyph::WrapMode inMode), maia_label_set_wrap_mode)

            _WRAP_METHOD(Graphic::Glyph::EllipsizeMode get_ellipsize_mode () const, maia_label_get_ellipsize_mode)
            _WRAP_METHOD(void set_ellipsize_mode (Graphic::Glyph::EllipsizeMode inMode), maia_label_set_ellipsize_mode)

            _WRAP_METHOD(Graphic::Color::RefPtr get_shade_color () const, maia_label_get_shade_color, refreturn)
            _WRAP_METHOD(void set_shade_color (const Graphic::Color::RefPtr& inColor), maia_label_set_shade_color)

            _WRAP_METHOD(bool get_translatable () const, maia_label_get_translatable)
            _WRAP_METHOD(void set_translatable (bool inTranslatable = true), maia_label_set_translatable)

            _WRAP_METHOD(bool get_hide_if_empty () const, maia_label_get_hide_if_empty)
            _WRAP_METHOD(void set_hide_if_empty (bool inHideIfEmpty = true), maia_label_set_hide_if_empty)

            _WRAP_METHOD(Glib::ustring get_text () const, maia_label_get_text)
            _WRAP_METHOD(void set_text (const Glib::ustring& inLabel), maia_label_set_text)

            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("alignment", Graphic::Glyph::Alignment)
            _WRAP_PROPERTY("wrap-mode", Graphic::Glyph::WrapMode)
            _WRAP_PROPERTY("ellipsize-mode", Graphic::Glyph::EllipsizeMode)
            _WRAP_PROPERTY("shade-color", Graphic::Color::RefPtr)
            _WRAP_PROPERTY("translatable", bool)
            _WRAP_PROPERTY("text", Glib::ustring)
            _WRAP_PROPERTY("hide-if-empty", bool)

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
