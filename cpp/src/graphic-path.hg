/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-path.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/graphic-point.h>
#include <maiamm/graphic-region.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        _WRAP_ENUM(PathDataType, MaiaGraphicPathDataType, NO_GTYPE)

        class Path : public Core::Object
        {
            _CLASS_GOBJECT(Path, MaiaGraphicPath, MAIA_GRAPHIC_PATH, Core::Object, MaiaCoreObject)

            protected:
                _CTOR_DEFAULT()

            public:
                static Glib::RefPtr<Path> create ()
                {
                    MaiaGraphicPath* pPath = maia_graphic_path_new ();
                    return Glib::RefPtr<Path> (new Path (pPath));
                }

                static Glib::RefPtr<Path> create (const Glib::ustring& inData)
                {
                    MaiaGraphicPath* pPath = maia_graphic_path_new_from_data (inData.c_str ());
                    return Glib::RefPtr<Path> (new Path (pPath));
                }

                static Glib::RefPtr<Path> create (const Glib::RefPtr<Region>& inRegion)
                {
                    MaiaGraphicPath* pPath = maia_graphic_path_new_from_region (const_cast<MaiaGraphicRegion*> (inRegion->gobj ()));
                    return Glib::RefPtr<Path> (new Path (pPath));
                }

                _IGNORE(maia_graphic_path_new)
                _IGNORE(maia_graphic_path_new_from_data)
                _IGNORE(maia_graphic_path_new_from_region)

                _WRAP_METHOD(PathDataType get_data_type (), maia_graphic_path_get_data_type)

                _IGNORE(maia_graphic_path_get_points)
                std::vector<Point> get_points () const
                {
                    std::vector<Point> ret;
                    int nb;
                    MaiaGraphicPoint* points = maia_graphic_path_get_points (const_cast<MaiaGraphicPath*> (gobj ()), &nb);

                    if (points)
                    {
                        for (int cpt = 0; cpt < nb; ++cpt)
                        {
                            ret.push_back (Glib::wrap (&points[cpt]));
                        }
                        g_free(points);
                    }

                    return ret;
                }

                _WRAP_METHOD(Glib::RefPtr<Path> copy (), maia_graphic_path_copy)

                _WRAP_METHOD(void parse (const Glib::ustring& inData), maia_graphic_path_parse)
                _WRAP_METHOD(void move_to (double inX, double inY), maia_graphic_path_move_to)
                _WRAP_METHOD(void rel_move_to (double inX, double inY), maia_graphic_path_rel_move_to)
                _WRAP_METHOD(void line_to (double inX, double inY), maia_graphic_path_line_to)
                _WRAP_METHOD(void rel_line_to (double inX, double inY), maia_graphic_path_rel_line_to)
                _WRAP_METHOD(void curve_to (double inX, double inY, double inX1, double inY1, double inX2, double inY2), maia_graphic_path_curve_to)
                _WRAP_METHOD(void rel_curve_to (double inX, double inY, double inX1, double inY1, double inX2, double inY2), maia_graphic_path_rel_curve_to)
                _WRAP_METHOD(void smooth_curve_to (double inX, double inY, double inX2, double inY2), maia_graphic_path_smooth_curve_to)
                _WRAP_METHOD(void rel_smooth_curve_to (double inX, double inY, double inX2, double inY2), maia_graphic_path_rel_smooth_curve_to)
                _WRAP_METHOD(void quadratic_curve_to (double inX, double inY, double inX1, double inY1), maia_graphic_path_quadratic_curve_to)
                _WRAP_METHOD(void rel_quadratic_curve_to (double inX, double inY, double inX1, double inY1), maia_graphic_path_rel_quadratic_curve_to)
                _WRAP_METHOD(void smooth_quadratic_curve_to (double inX, double inY),maia_graphic_path_smooth_quadratic_curve_to)
                _WRAP_METHOD(void rel_smooth_quadratic_curve_to (double inX, double inY), maia_graphic_path_rel_smooth_quadratic_curve_to)
                _WRAP_METHOD(void arc_to (double inRx, double inRy, double inXAxisRotation, bool inLargeArcFlag, bool inSweepFlag, double inX, double inY), maia_graphic_path_arc_to)
                _WRAP_METHOD(void rel_arc_to (double inRx, double inRy, double inXAxisRotation, bool inLargeArcFlag, bool inSweepFlag, double inX, double inY), maia_graphic_path_rel_arc_to)
                _WRAP_METHOD(void rectangle (double inX, double inY, double inWidth, double inHeight, double inRx = 0.0, double inRy = 0.0), maia_graphic_path_rectangle)
                _WRAP_METHOD(void arc (double inXc, double inYc, double inRx, double inRy, double inAngle1, double inAngle2), maia_graphic_path_arc)
                _WRAP_METHOD(void close (), maia_graphic_path_close)


                _WRAP_PROPERTY ("data-type", PathDataType)
        };

    }
}
