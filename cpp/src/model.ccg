/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * model.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    static void
    value_changed_callback (GObject*, guint inRow, void* inpData)
    {
        if (inpData)
        {
            Model::SlotValueChanged* pSlot = (Model::SlotValueChanged*)inpData;

            (*pSlot) (inRow);
        }
    }

    static void
    value_changed_destroy_notify_handler (void* inpData, GClosure*)
    {
        Model::SlotValueChanged* pSlot = (Model::SlotValueChanged*)inpData;
        delete pSlot;
    }

    sigc::connection
    Model::connect_value_changed (const Glib::ustring& inColumnName, SlotValueChanged inSlot)
    {
        SlotValueChanged* pSlot = new SlotValueChanged (inSlot);
        const Glib::ustring notify_signal_name = "value-changed::" + inColumnName;

        g_signal_connect_data (gobj(), notify_signal_name.c_str(), (GCallback)(&value_changed_callback),
                               pSlot,  &value_changed_destroy_notify_handler, G_CONNECT_AFTER);

        return sigc::connection(*pSlot);
    }
}
