/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * combo.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/view.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/item.h>
#include <maiamm/core-event.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)
_PINCLUDE(maiamm/private/core-eventargs_p.h)

namespace Maia
{
    /**
     * \includedoc MaiaComboChangedEventArgs.doc
     */
    class ComboChangedEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(ComboChangedEventArgs, MaiaComboChangedEventArgs, MAIA_COMBO_CHANGED_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            _WRAP_METHOD(int get_active_row () const, maia_combo_changed_event_args_get_active_row)

            _WRAP_PROPERTY("active-row", int)
    };

    class Combo : public Item, public ItemPackable, public ItemMovable, public ItemFocusable
    {
        _CLASS_GOBJECT(Combo, MaiaCombo, MAIA_COMBO, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit Combo(const Glib::ustring& inId);

        public:
            static Glib::RefPtr<Combo> create (const Glib::ustring& inId)
            {
                MaiaCombo* pCombo = maia_combo_new (inId.c_str ());

                return Glib::RefPtr<Combo> (new Combo (pCombo));
            }

            _WRAP_METHOD(Glib::RefPtr<View> get_view () const, maia_combo_get_view, refreturn)

            _WRAP_METHOD(gint get_active_row () const, maia_combo_get_active_row)
            _WRAP_METHOD(void set_active_row (int inRow), maia_combo_set_active_row)

            _WRAP_METHOD(Glib::RefPtr<Model> get_model () const, maia_combo_get_model, refreturn)
            _WRAP_METHOD(void set_model (const Glib::RefPtr<Model>& inModel), maia_combo_set_model)

            _WRAP_METHOD(Glib::RefPtr<Core::Event> changed () const, maia_combo_get_changed, refreturn)

            _WRAP_PROPERTY("view", Glib::RefPtr<View>)
            _WRAP_PROPERTY("active-row", gint)
            _WRAP_PROPERTY("model", Glib::RefPtr<Model>)

            _IGNORE_PROPERTY("changed")

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
