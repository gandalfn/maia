/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-listener.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-event.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        static void* _on_destroy_notify (gpointer inpData)
        {
            EventListenerFunctorBase* pFunctor = (EventListenerFunctorBase*)inpData;
            delete pFunctor;

            return 0;
        }
        
        static void _on_callback (MaiaCoreEventArgs* inpArgs, gpointer inpData)
        {
            EventListenerFunctorBase* pFunctor = (EventListenerFunctorBase*)inpData;
            Glib::RefPtr<EventArgs> pArgs = Glib::wrap(inpArgs, true);

            (*pFunctor)(pArgs);
        }
        
        Glib::RefPtr<EventListener>
        EventListener::create (Event* inpEvent, EventListenerFunctorBase* inpFunctor)
        {
            MaiaCoreEventListener* pListener = maia_core_event_listener_new_object (const_cast<MaiaCoreEvent*>(inpEvent->gobj ()), _on_callback, inpFunctor);
            Glib::RefPtr<EventListener> pCppListener = Glib::RefPtr<EventListener> (new EventListener (pListener));
            pCppListener->add_destroy_notify_callback (inpFunctor, _on_destroy_notify);

            return pCppListener;
        }
    }
}
