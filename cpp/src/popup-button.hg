/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * popup-button.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/toggle-button.h>
#include <maiamm/window.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/toggle-button_p.h)

namespace Maia
{
    class PopupButton : public ToggleButton
    {
        _CLASS_GOBJECT(PopupButton, MaiaPopupButton, MAIA_POPUP_BUTTON, ToggleButton, MaiaToggleButton)

        protected:
            _CTOR_DEFAULT()

            explicit PopupButton(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<PopupButton>;

            static PopupButton::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inLabel)
            {
                MaiaPopupButton* pButton = maia_popup_button_new (inId.c_str(), inLabel.c_str ());
                return PopupButton::RefPtr (new PopupButton (pButton));
            }

            _WRAP_METHOD(double get_popup_border () const, maia_popup_button_get_popup_border)
            _WRAP_METHOD(void set_popup_border (double inBorder), maia_popup_button_set_popup_border)

            _WRAP_METHOD(double get_shadow_width () const, maia_popup_button_get_shadow_width)
            _WRAP_METHOD(void set_shadow_width (double inWidth), maia_popup_button_set_shadow_width)

            _WRAP_METHOD(WindowBorder get_shadow_border () const, maia_popup_button_get_shadow_border)
            _WRAP_METHOD(void set_shadow_border (WindowBorder inBorder), maia_popup_button_set_shadow_border)

            _WRAP_METHOD(Graphic::Color::RefPtr get_shadow_color () const, maia_popup_button_get_shadow_color, refreturn)
            _WRAP_METHOD(void set_shadow_color (const Graphic::Color::RefPtr& inColor), maia_popup_button_set_shadow_color)

            _WRAP_METHOD(double get_round_corner () const, maia_popup_button_get_round_corner)
            _WRAP_METHOD(void set_round_corner (double inWidth), maia_popup_button_set_round_corner)

            _WRAP_METHOD(bool get_close_button () const, maia_popup_button_get_close_button)
            _WRAP_METHOD(void set_close_button (bool inClose = true), maia_popup_button_set_close_button)

            _WRAP_METHOD(Item::RefPtr get_content () const, maia_popup_button_get_content, refreturn)
            _WRAP_METHOD(void set_content (const Item::RefPtr& inItem), maia_popup_button_set_content)


            _WRAP_PROPERTY("popup-border", double)
            _WRAP_PROPERTY("shadow-width", double)
            _WRAP_PROPERTY("shadow-border", WindowBorder)
            _WRAP_PROPERTY("shadow-color", Graphic::Color::RefPtr)
            _WRAP_PROPERTY("round-corner", double)
            _WRAP_PROPERTY("close-button", bool)

            _WRAP_PROPERTY("content", Item::RefPtr)

            _IGNORE_PROPERTY("tag")
    };
}
