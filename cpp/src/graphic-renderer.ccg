/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-renderer.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    namespace Graphic
    {
        void
        RendererLooper::render_slot_callback (unsigned int inNumFrame)
        {
            m_Func (inNumFrame, m_pData);
        }

        void
        RendererLooper::prepare_vfunc (MaiaGraphicRendererRenderFunc inFunc, gpointer inpData)
        {
            m_Func = inFunc;
            m_pData = inpData;

            prepare (sigc::mem_fun (this, &RendererLooper::render_slot_callback));
        }

        void
        RendererLooper::finish_vfunc ()
        {
            finish ();
        }

        void
        Renderer::_on_initialize (MaiaCoreNotification* inpNotification, gpointer inpData)
        {
            Renderer* pRenderer = static_cast<Renderer*> (inpData);

            if (pRenderer)
            {
                pRenderer->on_initialize ();
            }
        }

        void
        Renderer::_on_new_frame (MaiaCoreNotification* inpNotification, gpointer inpData)
        {
            Renderer* pRenderer = static_cast<Renderer*> (inpData);

            if (pRenderer)
            {
                MaiaGraphicRendererNewFrameNotification* notification = (MaiaGraphicRendererNewFrameNotification*)inpNotification;
                unsigned int num_frame = maia_graphic_renderer_new_frame_notification_get_num_frame (notification);
                pRenderer->on_new_frame (num_frame);
            }
        }

        Renderer::Renderer (const Size& inSize) :
            Renderer (RendererObject::create (inSize))
        {

        }

        Renderer::Renderer (const Glib::RefPtr<RendererObject>& inpRenderer) :
            m_pRenderer (inpRenderer)
        {
            maia_core_notification_add_observer (MAIA_CORE_NOTIFICATION (maia_graphic_renderer_get_initialize (m_pRenderer->gobj ())), _on_initialize, this, 0);
            maia_core_notification_add_observer (MAIA_CORE_NOTIFICATION (maia_graphic_renderer_get_new_frame (m_pRenderer->gobj ())), _on_new_frame, this, 0);
        }

        Renderer::~Renderer ()
        {
            maia_core_notification_remove_observer (MAIA_CORE_NOTIFICATION (maia_graphic_renderer_get_initialize (m_pRenderer->gobj ())), _on_initialize, this);
            maia_core_notification_remove_observer (MAIA_CORE_NOTIFICATION (maia_graphic_renderer_get_new_frame (m_pRenderer->gobj ())), _on_new_frame, this);

            m_pRenderer.reset ();
        }

        void
        Renderer::on_initialize ()
        {
        }

        void
        Renderer::on_new_frame (unsigned int inNumFrame)
        {
        }

        void
        Renderer::initialize ()
        {
            m_pRenderer->initialize ();
        }

        void
        Renderer::render (unsigned int inFrameNum)
        {
            m_pRenderer->render (inFrameNum);
        }

        Size
        Renderer::get_size () const
        {
            Size size;
            m_pRenderer->get_size (size);
            return size;
        }

        void
        Renderer::set_size (const Size& inSize)
        {
            m_pRenderer->set_size (inSize);
        }

        Glib::RefPtr<RendererInitializeNotification>
        Renderer::initialize_notification () const
        {
            return m_pRenderer->initialize_notification ();
        }

        Glib::RefPtr<RendererNewFrameNotification>
        Renderer::new_frame_notification () const
        {
            return m_pRenderer->new_frame_notification ();
        }
    }
}
