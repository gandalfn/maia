/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * chart.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/graphic-path.h>
#include <maiamm/graphic-range.h>
#include <maiamm/graphic-glyph.h>
#include <maiamm/item.h>
#include <maiamm/model.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    class Chart : public Item
    {
        _CLASS_GOBJECT(Chart, MaiaChart, MAIA_CHART, Item, MaiaItem)

        protected:
            _CTOR_DEFAULT()

            explicit Chart(const Glib::ustring& inId);

        public:
            _WRAP_ENUM(class Direction, MaiaChartDirection, s#CHART_DIRECTION_##, NO_GTYPE)
            using RefPtr = Glib::RefPtr<Chart>;

            static Chart::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inTitle = "")
            {
                MaiaChart* pChart = maia_chart_new (inId.c_str(), inTitle.c_str ());
                return Chart::RefPtr (new Chart (pChart));
            }
            static Chart::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inXColumn, const Glib::ustring& inYColumn, const Graphic::Range& inRange, Graphic::LineType inLineType, double inLineWidth, const Glib::ustring& inTitle)
            {
                MaiaChart* pChart = maia_chart_new (inId.c_str(), inTitle.c_str ());
                Chart::RefPtr pCppChart = Chart::RefPtr (new Chart (pChart));
                pCppChart->set_x_axis (inXColumn);
                pCppChart->set_y_axis (inYColumn);
                pCppChart->set_range (inRange);
                pCppChart->set_line_type (inLineType);
                pCppChart->set_line_width (inLineWidth);
                return pCppChart;
            }

            _WRAP_METHOD(Glib::ustring get_title () const, maia_chart_get_title)
            _WRAP_METHOD(void set_title (const Glib::ustring& inTitle), maia_chart_set_title)

            _WRAP_METHOD(Graphic::Glyph::Alignment get_alignment () const, maia_chart_get_alignment)
            _WRAP_METHOD(void set_alignment (Graphic::Glyph::Alignment inAlignment), maia_chart_set_alignment)

            _WRAP_METHOD(Model::RefPtr get_model () const, maia_chart_get_model, refreturn)
            _WRAP_METHOD(void set_model (const Model::RefPtr& inModel), maia_chart_set_model)

            _WRAP_METHOD(Glib::ustring get_x_axis () const, maia_chart_get_x_axis)
            _WRAP_METHOD(void set_x_axis (const Glib::ustring& inColumnName), maia_chart_set_x_axis)

            _WRAP_METHOD(Glib::ustring get_y_axis () const, maia_chart_get_y_axis)
            _WRAP_METHOD(void set_y_axis (const Glib::ustring& inColumnName), maia_chart_set_y_axis)

            _WRAP_METHOD(void get_range (Graphic::Range& outRange) const, maia_chart_get_range)
            _WRAP_METHOD(void set_range (const Graphic::Range& inRange), maia_chart_set_range)

            _WRAP_METHOD(Chart::Direction get_direction () const, maia_chart_get_direction)
            _WRAP_METHOD(void set_direction (Chart::Direction inDirection), maia_chart_set_direction)

            _WRAP_METHOD(bool get_smoothing () const, maia_chart_get_smoothing)
            _WRAP_METHOD(void set_smoothing (bool inSmoothing = true), maia_chart_set_smoothing)

            _WRAP_METHOD(Graphic::Path::RefPtr get_path () const, maia_chart_get_path, refreturn)
            _WRAP_METHOD(Graphic::Path::RefPtr get_reverse_path () const, maia_chart_get_reverse_path, refreturn)

            _IGNORE(maia_chart_get_first_point)
            _WRAP_METHOD_DOCS_ONLY(maia_chart_get_first_point)
            Graphic::Point get_first_point () const
            {
                Graphic::Point ret;
                maia_chart_get_first_point(const_cast<MaiaChart*> (gobj ()), ret.gobj ());
                return ret;
            }
            _IGNORE(maia_chart_get_last_point)
            _WRAP_METHOD_DOCS_ONLY(maia_chart_get_last_point)
            Graphic::Point get_last_point () const
            {
                Graphic::Point ret;
                maia_chart_get_last_point(const_cast<MaiaChart*> (gobj ()), ret.gobj ());
                return ret;
            }

            _WRAP_METHOD(static void range_from_model(const Model::RefPtr& inpModel, const Glib::ustring& inXColumn, const Glib::ustring& inYColumn, Graphic::Range& outRange), maia_chart_range_from_model)

            _IGNORE(maia_chart_changed)
            _WRAP_SIGNAL(void changed (), "changed", no_default_handler)

            _WRAP_PROPERTY("title", Glib::ustring)
            _WRAP_PROPERTY("alignment", Graphic::Glyph::Alignment)
            _WRAP_PROPERTY("model", Model::RefPtr)
            _WRAP_PROPERTY("x-axis", Glib::ustring)
            _WRAP_PROPERTY("y-axis", Glib::ustring)
            _WRAP_PROPERTY("range", Graphic::Range)
            _WRAP_PROPERTY("direction", Chart::Direction)
            _WRAP_PROPERTY("smoothing", bool)
            _WRAP_PROPERTY("path", Graphic::Path::RefPtr)
            _WRAP_PROPERTY("reverse-path", Graphic::Path::RefPtr)
            _WRAP_PROPERTY("first-point", Graphic::Point)
            _WRAP_PROPERTY("last-point", Graphic::Point)
    };
}
