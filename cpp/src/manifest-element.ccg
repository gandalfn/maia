/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * manifest-element.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/manifest-theme.h>

namespace Maia
{
    namespace Manifest
    {
        static MaiaManifestElement*
        register_create_func_callback (const gchar* inId, void* inpData)
        {
            Element::SlotCreateFunc* pSlot = (Element::SlotCreateFunc*)inpData;
            if (pSlot)
            {
                Glib::RefPtr<Element> pElement = (*pSlot) (inId);
                if (pElement)
                {
                    return (MaiaManifestElement*)g_object_ref (pElement->gobj ());
                }
            }

            return 0;
        }

        static void
        register_create_func_destroy (void* inpData)
        {
            Element::SlotCreateFunc* pSlot = (Element::SlotCreateFunc*)inpData;
            delete pSlot;
        }

        void
        Element::register_create_func (const Glib::ustring& inTag, Element::SlotCreateFunc inFunc)
        {
            Element::SlotCreateFunc* pSlot = new Element::SlotCreateFunc (inFunc);
            maia_manifest_element_register_create_func (inTag.c_str (), register_create_func_callback, pSlot, register_create_func_destroy);
        }

        Glib::RefPtr<Element>
        Element::duplicate (const Glib::ustring& inId)
        {
            GError* gerror = 0;
            Glib::RefPtr<Element> retvalue = Glib::wrap(maia_manifest_element_duplicate(gobj(), inId.c_str(), nullptr, nullptr, &(gerror)));
            if(gerror)
                ::Glib::Error::throw_exception(gerror);

            return retvalue;
        }

        const gchar*
        Element_Class::get_tag_vfunc_callback (MaiaManifestElement* self)
        {
            Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*> (Glib::ObjectBase::_get_current_wrapper((GObject*)self));

            if(obj_base && obj_base->is_derived_())
            {
                CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
                if (obj)
                {
#ifdef GLIBMM_EXCEPTIONS_ENABLED
                    try
                    {
#endif
                        obj->m_Tag = obj->get_tag_vfunc ();
                        return obj->m_Tag.c_str ();
#ifdef GLIBMM_EXCEPTIONS_ENABLED
                    }
                    catch(...)
                    {
                        Glib::exception_handlers_invoke();
                    }
#endif
                }
            }

            BaseClassType *const base = static_cast<BaseClassType*> (g_type_interface_peek_parent (g_type_interface_peek (G_OBJECT_GET_CLASS (self), CppObjectType::get_type ())));

            // Call the original underlying C function:
            if(base && base->get_tag)
            {
                const gchar* result = (*base->get_tag)(self);
                return result;
            }

            typedef const gchar* RType;
            return RType();
        }

        const gchar*
        Element_Class::get_characters_vfunc_callback (MaiaManifestElement* self)
        {
            Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*> (Glib::ObjectBase::_get_current_wrapper ((GObject*)self));

            if(obj_base && obj_base->is_derived_ ())
            {
                CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
                if (obj)
                {
#ifdef GLIBMM_EXCEPTIONS_ENABLED
                    try
                    {
#endif
                        obj->m_Characters = obj->get_characters_vfunc();
                        return obj->m_Characters.c_str ();
#ifdef GLIBMM_EXCEPTIONS_ENABLED
                    }
                    catch(...)
                    {
                        Glib::exception_handlers_invoke();
                    }
#endif
                }
            }

            BaseClassType *const base = static_cast<BaseClassType*>(
            g_type_interface_peek_parent (g_type_interface_peek (G_OBJECT_GET_CLASS(self), CppObjectType::get_type())));

            if(base && base->get_characters)
            {
                const gchar* result = (*base->get_characters)(self);
                return result;
            }

            typedef const gchar* RType;
            return RType();
        }
    }
}
