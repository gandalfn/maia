/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-bus.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-event-listener.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        class Event;

        _GMMPROC_EXTRA_NAMESPACE(Core)

        class EventBus : public Object
        {
            _CLASS_GOBJECT(EventBus, MaiaCoreEventBus, MAIA_CORE_EVENT_BUS, Object, MaiaCoreObject)

            public:
                typedef sigc::slot<void, bool, Glib::ustring> SlotLinkBusCallback;

                _WRAP_METHOD(void subscribe (const Glib::RefPtr<EventListener>& inpListener), maia_core_event_bus_subscribe)
                _WRAP_METHOD(void publish (const Glib::RefPtr<Event>& inpEvent, const Glib::RefPtr<EventArgs>& inpArgs), maia_core_event_bus_publish_event)
                _WRAP_METHOD(void publish (const Glib::ustring& inName, void* inpOwner, const Glib::RefPtr<EventArgs>& inpArgs), maia_core_event_bus_publish)
                void publish (const Glib::ustring& inName, const Glib::RefPtr<EventArgs>& inpArgs)
                {
                    publish (inName, 0, inpArgs);
                }

                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, Glib::RefPtr<EventListener>>::type
                subscribe (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListener> pListener = EventListener::create (inName, inpOwner, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, Glib::RefPtr<EventListener>>::type
                subscribe (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListener> pListener = EventListener::create (inName, inpOwner, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                Glib::RefPtr<EventListener>
                subscribe (const Glib::ustring& inName, void* inpOwner, const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListener> pListener = EventListener::create (inName, inpOwner, inSlot);
                    subscribe (pListener);
                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, Glib::RefPtr<EventListener>>::type
                subscribe (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListener> pListener = EventListener::create (inName, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, Glib::RefPtr<EventListener>>::type
                subscribe (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListener> pListener = EventListener::create (inName, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                Glib::RefPtr<EventListener>
                subscribe (const Glib::ustring& inName, const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListener> pListener = EventListener::create (inName, inSlot);
                    subscribe (pListener);
                    return pListener;
                }

                void link_bus (const Glib::ustring& inUri, SlotLinkBusCallback inFunc);
                void unlink_bus (const Glib::ustring& inUri);

                _WRAP_METHOD(static Glib::RefPtr<EventBus> get_default (), maia_core_event_bus_get_default, refreturn)
                _WRAP_METHOD(static void set_default (const Glib::RefPtr<EventBus>& inBus), maia_core_event_bus_set_default)

                _WRAP_METHOD(Glib::ustring get_address () const, maia_core_event_bus_get_address)

                _IGNORE(maia_core_event_bus_publish_with_reply, maia_core_event_bus_publish_event_with_reply,
                        maia_core_event_bus_object_publish_with_reply, maia_core_event_bus_object_publish_event_with_reply,
                        maia_core_event_bus_advertise, maia_core_event_bus_destroy, maia_core_event_bus_link_bus,
                        maia_core_event_bus_object_link_bus, maia_core_event_bus_unlink_bus)

                _WRAP_PROPERTY("address", Glib::ustring)
        };
    }
}
