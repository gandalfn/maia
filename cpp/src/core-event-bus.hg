/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-bus.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-event-listener.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        class Event;

        _GMMPROC_EXTRA_NAMESPACE(Core)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
        class EventReplyFunctorBase : public Glib::Object
        {
            public:

                virtual void operator() (const EventArgs::RefPtr& inArgs) = 0;
                EventReplyFunctorBase* cpp_obj () { return this; }

            protected:
                EventReplyFunctorBase () :
                    Glib::ObjectBase ("Maia::Core::EventReplyFunctorBase")
                {
                    g_object_set_data (G_OBJECT (gobj ()), "EventReplyCpp", this);
                }
        };

        template <class T_obj>
        class EventReplyObject : public EventReplyFunctorBase
        {
            typedef void (T_obj::*Handler) (const EventArgs::RefPtr& inpArgs);

            public:
                virtual void operator() (const EventArgs::RefPtr& inArgs)
                {
                    (m_pObj->*m_Callback) (inArgs);
                }

                EventReplyObject (T_obj* pObj, Handler pFunc) :
                    EventReplyFunctorBase (),
                    m_pObj (pObj),
                    m_Callback (pFunc)
                {
                }


            private:
                T_obj*  m_pObj;
                Handler m_Callback;

                friend Event;
        };

        template <class T_obj>
        class EventReplyGObject : public EventReplyFunctorBase
        {
            typedef void (T_obj::*Handler) (const EventArgs::RefPtr& inpArgs);

            private:
                static void* _on_destroy_notify (gpointer inpData)
                {
                    EventReplyGObject* pSelf = (EventReplyGObject*)inpData;

                    pSelf->unreference ();

                    return 0;
                }

            public:
                virtual void operator() (const EventArgs::RefPtr& inArgs)
                {
                    (m_pObj->*m_Callback) (inArgs);
                }

                EventReplyGObject (T_obj* pObj, Handler pFunc) :
                    EventReplyFunctorBase (),
                    m_pObj (pObj),
                    m_Callback (pFunc)
                {
                    static_cast<Glib::Object*> (pObj)->add_destroy_notify_callback (this, _on_destroy_notify);
                }


            private:
                T_obj*  m_pObj;
                Handler m_Callback;

                friend Event;
        };

        class EventReplySigcFunctor : public EventReplyFunctorBase
        {
            typedef sigc::slot<void, EventArgs::RefPtr> Handler;

            private:
                static void* _on_destroy_notify (gpointer inpData)
                {
                    EventReplySigcFunctor* pSelf = (EventReplySigcFunctor*)inpData;

                    pSelf->unreference ();

                    return 0;
                }

            public:
                ~EventReplySigcFunctor ()
                {
                    delete m_pCallback; m_pCallback = 0;
                }

                virtual void operator() (const EventArgs::RefPtr& inArgs)
                {
                    (*m_pCallback) (inArgs);
                }

                EventReplySigcFunctor (const Handler& inSlot) :
                    EventReplyFunctorBase (),
                    m_pCallback (new Handler (inSlot))
                {
                    m_pCallback->add_destroy_notify_callback (this, &_on_destroy_notify);
                }


            private:
                Handler* m_pCallback;

                friend Event;
        };
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


        class EventBus : public Object
        {
            _CLASS_GOBJECT(EventBus, MaiaCoreEventBus, MAIA_CORE_EVENT_BUS, Object, MaiaCoreObject)

            _IGNORE(maia_core_event_bus_publish_event, maia_core_event_bus_publish,
                    maia_core_event_bus_publish_with_reply, maia_core_event_bus_publish_event_with_reply,
                    maia_core_event_bus_object_publish_with_reply, maia_core_event_bus_object_publish_event_with_reply,
                    maia_core_event_bus_advertise, maia_core_event_bus_destroy, maia_core_event_bus_link_bus,
                    maia_core_event_bus_object_link_bus, maia_core_event_bus_unlink_bus)

            public:
                using RefPtr = Glib::RefPtr<EventBus>;
                using SlotLinkBusCallback = sigc::slot<void, bool, Glib::ustring>;
                using SlotReplyCallback = sigc::slot<void, EventArgs::RefPtr>;

                void publish (const Glib::ustring& inName, void* inOwner, const EventArgs::RefPtr& inpArgs)
                {
                    maia_core_event_bus_publish (gobj (), inName.c_str (), inOwner, const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()));
                }

                void publish (const Glib::ustring& inName, int inOwner, const EventArgs::RefPtr& inpArgs)
                {
                    maia_core_event_bus_publish (gobj (), inName.c_str (), GINT_TO_POINTER (inOwner), const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()));
                }

                void publish (const Glib::ustring& inName, const EventArgs::RefPtr& inpArgs)
                {
                    maia_core_event_bus_publish (gobj (), inName.c_str (), 0, const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()));
                }

                void publish (const Glib::ustring& inName)
                {
                    maia_core_event_bus_publish (gobj (), inName.c_str (), 0, 0);
                }

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, void>::type
                publish_with_reply (const Glib::ustring& inName, const EventArgs::RefPtr& inpArgs, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventReplyObject<T_obj>* pHandler = new EventReplyObject<T_obj> (pObj, pFunc);
                    maia_core_event_bus_object_publish_with_reply (gobj (), inName.c_str (), 0, const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()), &EventBus::_on_publish_reply_callback, (gpointer)pHandler->gobj ());
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, void>::type
                publish_with_reply (const Glib::ustring& inName, const EventArgs::RefPtr& inpArgs, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventReplyGObject<T_obj>* pHandler = new EventReplyGObject<T_obj> (pObj, pFunc);
                    maia_core_event_bus_object_publish_with_reply (gobj (), inName.c_str (), 0, const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()), &EventBus::_on_publish_reply_callback, (gpointer)pHandler->gobj ());
                }
#else
                template <typename T_obj>
                void publish_with_reply (const Glib::ustring& inName, const EventArgs::RefPtr& inpArgs, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
#endif

                void publish_with_reply (const Glib::ustring& inName, const EventArgs::RefPtr& inpArgs, SlotReplyCallback inSlot)
                {
                    EventReplySigcFunctor* pHandler = new EventReplySigcFunctor (inSlot);
                    maia_core_event_bus_object_publish_with_reply (gobj (), inName.c_str (), 0, const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()), &EventBus::_on_publish_reply_callback, (gpointer)pHandler->gobj ());
                }

                _WRAP_METHOD(void subscribe (const EventListener::RefPtr& inpListener), maia_core_event_bus_subscribe)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, inpOwner, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, inpOwner, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }
#else
                template <typename T_obj>
                EventListener::RefPtr subscribe (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
#endif

                EventListener::RefPtr
                subscribe (const Glib::ustring& inName, void* inpOwner, const sigc::slot<void, EventArgs::RefPtr>& inSlot)
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, inpOwner, inSlot);
                    subscribe (pListener);
                    return pListener;
                }

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (const Glib::ustring& inName, int inOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, GINT_TO_POINTER (inOwner), pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (const Glib::ustring& inName, int inOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, GINT_TO_POINTER (inOwner), pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }
#else
                template <typename T_obj>
                EventListener::RefPtr subscribe (const Glib::ustring& inName, int inOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
#endif

                EventListener::RefPtr
                subscribe (const Glib::ustring& inName, int inOwner, const sigc::slot<void, EventArgs::RefPtr>& inSlot)
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, GINT_TO_POINTER (inOwner), inSlot);
                    subscribe (pListener);
                    return pListener;
                }

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, pObj, pFunc);
                    subscribe (pListener);
                    return pListener;
                }
#else
                template <typename T_obj>
                EventListener::RefPtr subscribe (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
#endif

                EventListener::RefPtr
                subscribe (const Glib::ustring& inName, const sigc::slot<void, EventArgs::RefPtr>& inSlot)
                {
                    EventListener::RefPtr pListener = EventListener::create (inName, inSlot);
                    subscribe (pListener);
                    return pListener;
                }

                void link_bus (const Glib::ustring& inUri, SlotLinkBusCallback inFunc);
                void unlink_bus (const Glib::ustring& inUri);

                _WRAP_METHOD(static EventBus::RefPtr get_default (), maia_core_event_bus_get_default, refreturn)
                _WRAP_METHOD(static void set_default (const EventBus::RefPtr& inBus), maia_core_event_bus_set_default)

                _WRAP_METHOD(Glib::ustring get_address () const, maia_core_event_bus_get_address)

                _WRAP_PROPERTY("address", Glib::ustring)

            private:
                static void _on_publish_reply_callback (MaiaCoreEventArgs* inpArgs, gpointer inpData);
        };
    }
}
