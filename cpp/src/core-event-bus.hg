/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-bus.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-event-listener.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        class Event;
        
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class EventBus : public Object
        {
            _CLASS_GOBJECT(EventBus, MaiaCoreEventBus, MAIA_CORE_EVENT_BUS, EventBus, MaiaCoreEventBus)

            public:
                static Glib::RefPtr<EventBus>
                create (const Glib::ustring& inName)
                {
                    MaiaCoreEventBus* pEventBus = maia_core_event_bus_new (inName.c_str ());
                    return Glib::RefPtr<EventBus> (new EventBus (pEventBus));
                }

                _WRAP_METHOD(void subscribe (const Glib::RefPtr<EventListener>& inpListener), maia_core_event_bus_subscribe)
                _WRAP_METHOD(void publish (const Glib::RefPtr<Event>& inpEvent, const Glib::RefPtr<EventArgs>& inpArgs), maia_core_event_bus_publish_event)
                _WRAP_METHOD(void publish (const Glib::ustring& inName, void* inpOwner, const Glib::RefPtr<EventArgs>& inpArgs), maia_core_event_bus_publish)

#m4 _CONVERSION(`MaiaCoreEventBus*',`Glib::RefPtr<EventBus>',`Glib::wrap($3, true)')
                _WRAP_METHOD(static Glib::RefPtr<EventBus> get_default (), maia_core_event_bus_get_default)
#m4 _CONVERSION(`MaiaCoreEventBus*',`Glib::RefPtr<EventBus>',`Glib::wrap($3)')
                _WRAP_METHOD(void set_default (const Glib::RefPtr<EventBus>& inBus), maia_core_event_bus_set_default)

        };
    }
}
