/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-glyph.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/graphic-point.h>
#include <maiamm/graphic-size.h>
#include <maiamm/graphic-rectangle.h>
#include <maiamm/graphic-context.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        typedef Glib::RefPtr<class GlyphLine> GlyphLineRefPtr;

        class GlyphLine final : public Core::Object
        {
            _CLASS_GOBJECT(GlyphLine, MaiaGraphicGlyphLine, MAIA_GRAPHIC_GLYPH_LINE, Core::Object, MaiaCoreObject)

            protected:
                _WRAP_VFUNC(void get_size (Size& outSize), get_size)

            public:
                _WRAP_METHOD(void get_size (Size& outSize) const, maia_graphic_glyph_line_get_size)
        };

        typedef Glib::RefPtr<class Glyph> GlyphRefPtr;

        class Glyph final : public Core::Object
        {
            _CLASS_GOBJECT(Glyph, MaiaGraphicGlyph, MAIA_GRAPHIC_GLYPH, Core::Object, MaiaCoreObject)

            protected:
                _CTOR_DEFAULT()

#m4 _CONVERSION(`MaiaGraphicContext*', `const Glib::RefPtr<Graphic::Context>&', `Glib::wrap($3, true)')
                _WRAP_VFUNC(void get_size (Size& outSize), get_size)
                _WRAP_VFUNC(void update (const ContextRefPtr& inContext), update)
                _WRAP_VFUNC(void get_cursor_position (int inIndex, Rectangle& outRectangle), get_cursor_position)
#m4 _CONVERSION(`MaiaGraphicContext*', `const Glib::RefPtr<Graphic::Context>&', `Glib::wrap($3)')

            public:
                _WRAP_ENUM(class Alignment, MaiaGraphicGlyphAlignment, s#GRAPHIC_GLYPH_ALIGNMENT_##,  NO_GTYPE)
                _WRAP_ENUM(class WrapMode, MaiaGraphicGlyphWrapMode, s#GRAPHIC_GLYPH_WRAP_MODE_##,  NO_GTYPE)
                _WRAP_ENUM(class EllipsizeMode, MaiaGraphicGlyphEllipsizeMode, s#GRAPHIC_GLYPH_ELLIPSIZE_MODE_##,  NO_GTYPE)

                static GlyphRefPtr create (const Glib::ustring& inFontDesc)
                {
                    MaiaGraphicGlyph* pGlyph = maia_graphic_glyph_new (inFontDesc.c_str ());
                    return GlyphRefPtr (new Glyph (pGlyph));
                }

                _WRAP_METHOD(void get_size (Size& outSize) const, maia_graphic_glyph_get_size)
                _WRAP_METHOD(void set_size (const Size& outSize) const, maia_graphic_glyph_set_size)
                _WRAP_METHOD(Glib::ustring get_font_description () const, maia_graphic_glyph_get_font_description)
                _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_graphic_glyph_set_font_description)
                _WRAP_METHOD(bool get_use_markup () const, maia_graphic_glyph_get_use_markup)
                _WRAP_METHOD(void set_use_markup (bool inUseMarkup = true), maia_graphic_glyph_set_use_markup)
                _WRAP_METHOD(Glyph::Alignment get_alignment () const, maia_graphic_glyph_get_alignment)
                _WRAP_METHOD(void set_alignment (Glyph::Alignment inAlignment), maia_graphic_glyph_set_alignment)
                _WRAP_METHOD(Glyph::WrapMode get_wrap () const, maia_graphic_glyph_get_wrap)
                _WRAP_METHOD(void set_wrap (Glyph::WrapMode inMode), maia_graphic_glyph_set_wrap)
                _WRAP_METHOD(Glyph::EllipsizeMode get_ellipsize () const, maia_graphic_glyph_get_ellipsize)
                _WRAP_METHOD(void set_ellipsize (Glyph::EllipsizeMode inMode), maia_graphic_glyph_set_ellipsize)
                _WRAP_METHOD(Glib::ustring get_text () const, maia_graphic_glyph_get_text)
                _WRAP_METHOD(void set_text (const Glib::ustring& inText), maia_graphic_glyph_set_text)
                _WRAP_METHOD(void get_origin (Point& outPoint) const, maia_graphic_glyph_get_origin)
                _WRAP_METHOD(void set_origin (const Point& inPoint), maia_graphic_glyph_set_origin)
                _WRAP_METHOD(int get_line_count () const, maia_graphic_glyph_get_line_count)
                _WRAP_METHOD(void get_line_position (int inIndex, bool inTrailing, int& outLine), maia_graphic_glyph_get_line_position)
                _WRAP_METHOD(void get_index_from_position (const Graphic::Point& inPosition, int& outIndex, int& trailing), maia_graphic_glyph_get_index_from_position)

                _WRAP_METHOD(void update (const ContextRefPtr& inpContext), maia_graphic_glyph_update)
                _WRAP_METHOD(void get_cursor_position (int inIndex, Rectangle& outRectangle), maia_graphic_glyph_get_cursor_position)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                _WRAP_PROPERTY("size", Size)
                _WRAP_PROPERTY("font-description", Glib::ustring)
                _WRAP_PROPERTY("use_markup", bool)
                _WRAP_PROPERTY("alignment", Glyph::Alignment)
                _WRAP_PROPERTY("wrap", Glyph::WrapMode)
                _WRAP_PROPERTY("ellipsize", Glyph::EllipsizeMode)
                _WRAP_PROPERTY("text", Glib::ustring)
                _WRAP_PROPERTY("origin", Point)
                _WRAP_PROPERTY("line-count", int)
#endif
        };
    }
}
