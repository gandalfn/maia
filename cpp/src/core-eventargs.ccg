/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-args.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    namespace Core
    {
        void EventArgs_Class::set_serialize_vfunc_callback(MaiaCoreEventArgs* self, GVariant* inData)
        {
            Glib::ObjectBase* obj_base = static_cast<Glib::ObjectBase*>(Glib::ObjectBase::_get_current_wrapper((GObject*)self));

            if (!obj_base)
            {
                obj_base = Glib::wrap_auto ((GObject*)self, false);
            }

            if (obj_base && obj_base->is_derived_())
            {
                CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
                if (obj)
                {
                    try
                    {
                        obj->unserialize_vfunc(Glib::wrap(inData, true));
                    }
                    catch(...)
                    {
                    }

                    return;
                }
            }

            BaseClassType *const base = static_cast<BaseClassType*> (g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)));

            if(base && base->set_serialize)
            {
                try
                {
                    (*base->set_serialize)(self, inData);
                }
                catch (...)
                {
                }
            }
        }

        EventArgs::EventArgs (const Glib::ustring& inSignature, Glib::WrapNewFunction inWrapFunc) :
            Glib::ObjectBase(0),
            Glib::Object(Glib::ConstructParams(eventargs_class_.init())),
            m_Signature (inSignature),
            m_pSerialize (nullptr)
        {
            /**
             * WARNING!!!! TODO
             * This implementation imply a first instance of derived event args was created before received it
             * in bus. It works if all class are in same process, but not if event come from another
             * machine or process
             */
            const gpointer idx = g_type_get_qdata(G_OBJECT_TYPE(gobj ()), Glib::quark_);
            if (!idx)
            {
                Glib::wrap_register (G_OBJECT_TYPE(gobj ()), inWrapFunc);
            }
        }

        EventArgs::SerializeClosure::SerializeClosure (const GVariantType* inpType) :
            m_ContainerType (EContainerType::UNKNOWN),
            m_pType (g_variant_type_copy (inpType)),
            m_pCurrentType (nullptr)
        {
            if (g_variant_type_is_tuple (m_pType))
            {
                m_ContainerType = EContainerType::TUPLE;
                m_pCurrentType = g_variant_type_first (m_pType);
            }
            else if (g_variant_type_is_basic (m_pType))
            {
                m_ContainerType = EContainerType::BASIC;
                m_pCurrentType = m_pType;
            }
        }

        EventArgs::SerializeClosure::~SerializeClosure ()
        {
            if (m_pType)
            {
                g_variant_type_free (m_pType);
                m_pType = nullptr;
            }

            m_pCurrentType = nullptr;

            for (auto& pChild : m_Childs)
            {
                delete pChild;
            }
        }

        Glib::VariantBase
        EventArgs::SerializeClosure::get ()
        {
            if (m_ContainerType == EContainerType::TUPLE && !m_Childs.empty ())
            {
                GVariant* childs[m_Childs.size ()];

                for (int cpt = 0; cpt < (int)m_Childs.size (); ++cpt)
                {
                    childs[cpt] = m_Childs[cpt]->m_Variant.gobj ();
                }

                m_Variant = Glib::VariantBase (g_variant_new_tuple (childs, m_Childs.size ()), true);
            }

            return m_Variant;
        }

        void
        EventArgs::SerializeClosure::set (const Glib::VariantBase& inVal)
        {
            if (m_ContainerType == EContainerType::BASIC)
            {
                if (g_variant_type_equal (m_pCurrentType, g_variant_get_type (const_cast<GVariant*>(inVal.gobj ()))))
                {
                    m_Variant = inVal;
                }
            }
            else if (m_ContainerType == EContainerType::TUPLE)
            {
                SerializeClosure* pChild = new SerializeClosure (m_pCurrentType);
                pChild->set (inVal);
                m_Childs.push_back (pChild);
                m_pCurrentType = g_variant_type_next (m_pCurrentType);
            }
        }

        EventArgs::UnserializeClosure::UnserializeClosure (const Glib::VariantBase& inVariant) :
            m_ContainerType (EContainerType::UNKNOWN),
            m_Variant (inVariant),
            m_Index (0)
        {
            if (m_Variant.get_type ().is_tuple ())
            {
                m_ContainerType = EContainerType::TUPLE;
                Glib::VariantContainerBase container = Glib::VariantContainerBase::cast_dynamic<Glib::VariantContainerBase> (m_Variant);
                for (int cpt = 0; cpt < (int)container.get_n_children (); ++cpt)
                {
                    UnserializeClosure* pChild = new UnserializeClosure (container.get_child (cpt));
                    m_Childs.push_back (pChild);
                }
            }
            else if (m_Variant.get_type ().is_basic ())
            {
                m_ContainerType = EContainerType::BASIC;
            }
        }

        EventArgs::UnserializeClosure::~UnserializeClosure ()
        {
            for (auto& pChild : m_Childs)
            {
                delete pChild;
            }
        }

        Glib::VariantBase
        EventArgs::UnserializeClosure::get ()
        {
            Glib::VariantBase ret;
            if (m_ContainerType == EContainerType::TUPLE)
            {
                if (m_Index < (int)m_Childs.size ())
                {
                    ret = m_Childs[m_Index]->get ();
                    ++m_Index;
                }
            }
            else if (m_ContainerType == EContainerType::BASIC)
            {
                ret = m_Variant;
            }

            return ret;
        }
    }
}
