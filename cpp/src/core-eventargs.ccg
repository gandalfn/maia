/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-args.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    namespace Core
    {
        void EventArgs_Class::set_serialize_vfunc_callback(MaiaCoreEventArgs* self, GVariant* inData)
        {
            Glib::ObjectBase* obj_base = static_cast<Glib::ObjectBase*>(Glib::ObjectBase::_get_current_wrapper((GObject*)self));

            if (!obj_base)
            {
                obj_base = Glib::wrap_auto ((GObject*)self, false);
            }

            if (obj_base && obj_base->is_derived_())
            {
                CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
                if (obj)
                {
                    try
                    {
                        obj->set_serialize_vfunc(Glib::wrap(inData, true));
                        return;
                    }
                    catch(...)
                    {
                        Glib::exception_handlers_invoke();
                    }
                }
            }

            BaseClassType *const base = static_cast<BaseClassType*> (g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)));

            if(base && base->set_serialize)
            {
                (*base->set_serialize)(self, inData);
            }
        }

        EventArgs::EventArgs (Glib::WrapNewFunction inWrapFunc) :
            Glib::ObjectBase(0),
            Glib::Object(Glib::ConstructParams(eventargs_class_.init()))
        {
            /**
             * WARNING!!!! TODO
             * This implementation imply a first instance of derived event args was created before received it
             * in bus. It works if all class are in same process, but not if event come from another
             * machine or process
             */
            const gpointer idx = g_type_get_qdata(G_OBJECT_TYPE(gobj ()), Glib::quark_);
            if (!idx)
            {
                Glib::wrap_register (G_OBJECT_TYPE(gobj ()), inWrapFunc);
            }
        }

        Glib::VariantBase
        EventArgs::serialize (const Glib::ustring& inSignature, ...)
        {
            va_list var_args;

            va_start (var_args, inSignature);
            Glib::VariantBase variant (g_variant_new_va (inSignature.c_str (), 0, &var_args), true);
            va_end (var_args);

            return variant;
        }

        void
        EventArgs::unserialize (const Glib::VariantBase& inData, const Glib::ustring& inSignature, ...)
        {
            va_list var_args;

            va_start (var_args, inSignature);
            g_variant_get_va (const_cast<GVariant*> (inData.gobj ()), inSignature.c_str (), 0, &var_args);
            va_end (var_args);
        }
    }
}
