/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * window.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/input-device.h>
#include <maiamm/item.h>
#include <maiamm/item-focusable.h>
#include <maiamm/core-event.h>
#include <maiamm/core-eventargs.h>
#include <maiamm/graphic-rectangle.h>
#include <maiamm/graphic-surface.h>
#include <maiamm/graphic-color.h>
#include <maiamm/group.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)
_PINCLUDE(maiamm/private/core-eventargs_p.h)

namespace Maia
{
    class Popup;

    _WRAP_ENUM(WindowBorder, MaiaWindowBorder, NO_GTYPE)
    _WRAP_ENUM(WindowPositionPolicy, MaiaWindowPositionPolicy, NO_GTYPE)

    class GeometryEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(GeometryEventArgs, MaiaGeometryEventArgs, MAIA_GEOMETRY_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            using RefPtr = Glib::RefPtr<GeometryEventArgs>;

            static GeometryEventArgs::RefPtr create (double inX, double inY, double inWidth, double inHeight)
            {
                MaiaGeometryEventArgs* pArgs = maia_geometry_event_args_new (inX, inY, inWidth, inHeight);
                return GeometryEventArgs::RefPtr (new GeometryEventArgs (pArgs));
            }

            _WRAP_METHOD(void get_area (Graphic::Rectangle& outArea), maia_geometry_event_args_get_area)

            _WRAP_PROPERTY("area", Graphic::Rectangle)

        protected:
            _CTOR_DEFAULT()
    };

    class MouseEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(MouseEventArgs, MaiaMouseEventArgs, MAIA_MOUSE_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            enum class Flags
            {
                BUTTON_PRESS    = 1 << 0,
                BUTTON_RELEASE  = 1 << 1,
                MOTION          = 1 << 2
            };

            using RefPtr = Glib::RefPtr<MouseEventArgs>;

            static MouseEventArgs::RefPtr create (uint8_t inFlags, uint8_t inButton, double inX, double inY)
            {
                MaiaMouseEventArgs* pArgs = maia_mouse_event_args_new (inFlags, inButton, inX, inY);
                return MouseEventArgs::RefPtr (new MouseEventArgs (pArgs));
            }

            _WRAP_METHOD(uint8_t get_button () const, maia_mouse_event_args_get_button)
            _WRAP_METHOD(uint8_t get_flags () const, maia_mouse_event_args_get_flags)
            _WRAP_METHOD(void get_position (Graphic::Point& outPosition) const, maia_mouse_event_args_get_position)

            _WRAP_PROPERTY("button", uint8_t)
            _WRAP_PROPERTY("flags", uint8_t)
            _WRAP_PROPERTY("position", Graphic::Point)

        protected:
            _CTOR_DEFAULT()
    };

    class Window : public Group
    {
        _CLASS_GOBJECT(Window, MaiaWindow, MAIA_WINDOW, Group, MaiaGroup)

        _IGNORE(maia_window_on_set_pointer_cursor, maia_window_on_move_pointer, maia_window_on_grab_focus,
                maia_window_on_grab_pointer, maia_window_on_ungrab_pointer, maia_window_on_grab_keyboard,
                maia_window_on_ungrab_keyboard, maia_window_on_scroll_to, maia_window_on_damage_event,
                maia_window_on_geometry_event, maia_window_on_mouse_event, maia_window_on_visibility_event,
                maia_window_on_destroy_event, maia_window_on_delete_event, maia_window_on_keyboard_event,
                maia_window_get_input_devices, maia_window_set_input_devices)

        public:
            _WRAP_ENUM(class Type, MaiaWindowType, s#WINDOW_TYPE_##, NO_GTYPE)
            using RefPtr = Glib::RefPtr<Window>;

            static Window::RefPtr create (const Glib::ustring& inId, unsigned int inWidth, unsigned int inHeight)
            {
                MaiaWindow* pWindow = maia_window_new (inId.c_str(), inWidth, inHeight);
                return Window::RefPtr (new Window (pWindow));
            }

            _WRAP_METHOD(void swap_buffer (), maia_window_swap_buffer)
            _WRAP_METHOD(void flush (), maia_window_flush)

            _WRAP_METHOD(ItemFocusable::RefPtr get_focus_item () const, maia_window_get_focus_item, refreturn)
            _WRAP_METHOD(void set_focus_item (const ItemFocusable::RefPtr& inItem), maia_window_set_focus_item)

            _WRAP_METHOD(Item::RefPtr get_grab_pointer_item () const, maia_window_get_grab_pointer_item, refreturn)
            _WRAP_METHOD(void set_grab_pointer_item (const Item::RefPtr& inItem), maia_window_set_grab_pointer_item)

            _WRAP_METHOD(Item::RefPtr get_grab_keyboard_item () const, maia_window_get_grab_keyboard_item, refreturn)
            _WRAP_METHOD(void set_grab_keyboard_item (const Item::RefPtr& inItem), maia_window_set_grab_keyboard_item)

            _WRAP_METHOD(Graphic::Surface::RefPtr get_surface () const, maia_window_get_surface, refreturn)

            _WRAP_METHOD(double get_border () const, maia_window_get_border)
            _WRAP_METHOD(void set_border (double inBorder), maia_window_set_border)

            _WRAP_METHOD(double get_shadow_width () const, maia_window_get_shadow_width)
            _WRAP_METHOD(void set_shadow_width (double inWidth), maia_window_set_shadow_width)

            _WRAP_METHOD(WindowBorder get_shadow_border () const, maia_window_get_shadow_border)
            _WRAP_METHOD(void set_shadow_border (WindowBorder inBorder), maia_window_set_shadow_border)

            _WRAP_METHOD(Graphic::Color::RefPtr get_shadow_color () const, maia_window_get_shadow_color, refreturn)
            _WRAP_METHOD(void set_shadow_color (const Graphic::Color::RefPtr& inColor), maia_window_set_shadow_color)

            _WRAP_METHOD(double get_round_corner () const, maia_window_get_round_corner)
            _WRAP_METHOD(void set_round_corner (double inWidth), maia_window_set_round_corner)

            _WRAP_METHOD(bool get_close_button () const, maia_window_get_close_button)
            _WRAP_METHOD(void set_close_button (bool inClose = true), maia_window_set_close_button)

            _WRAP_METHOD(bool get_decorated () const, maia_window_get_decorated)
            _WRAP_METHOD(void set_decorated (bool inDecorated = true), maia_window_set_decorated)

            _WRAP_METHOD(uint8_t get_depth () const, maia_window_get_depth)
            _WRAP_METHOD(void set_depth (uint8_t inDepth), maia_window_set_depth)

            _WRAP_METHOD(Window::RefPtr get_transient_for () const, maia_window_get_transient_for, refreturn)
            _WRAP_METHOD(void set_transient_for (const Window::RefPtr& inTransientFor), maia_window_set_transient_for)

            _WRAP_METHOD(Graphic::Transform::RefPtr get_device_transform () const, maia_window_get_device_transform, refreturn)
            _WRAP_METHOD(void set_device_transform (const Graphic::Transform::RefPtr& inTransform), maia_window_set_device_transform)

            _WRAP_METHOD(Window::Type get_window_type () const, maia_window_get_window_type)
            _WRAP_METHOD(void set_window_type (Window::Type inType), maia_window_set_window_type)

            _WRAP_METHOD(WindowPositionPolicy get_position_policy () const, maia_window_get_position_policy)
            _WRAP_METHOD(void set_position_policy (WindowPositionPolicy inPolicy), maia_window_set_position_policy)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_METHOD(Glib::RefPtr<Popup> get_popup () const, maia_window_get_popup, refreturn)
#else
            Popup::RefPtr get_popup () const;
#endif

            _WRAP_METHOD(uint32_t get_foreign () const, maia_window_get_foreign)

            _WRAP_METHOD(void grab_key (Modifier inModifier, Key inKey) const, maia_window_grab_key)
            _WRAP_METHOD(void ungrab_key (Modifier inModifier, Key inKey) const, maia_window_ungrab_key)

            std::vector<InputDevice::RefPtr> input_devices () const;
            void set_input_devices (const std::vector<InputDevice::RefPtr>& inDevices);

            _WRAP_METHOD(Core::Event::RefPtr damage_event () const, maia_window_get_damage_event, refreturn)
            _WRAP_METHOD(Core::Event::RefPtr geometry_event () const, maia_window_get_geometry_event, refreturn)
            _WRAP_METHOD(Core::Event::RefPtr visibility_event () const, maia_window_get_visibility_event, refreturn)
            _WRAP_METHOD(Core::Event::RefPtr destroy_event () const, maia_window_get_destroy_event, refreturn)
            _WRAP_METHOD(Core::Event::RefPtr delete_event () const, maia_window_get_delete_event, refreturn)
            _WRAP_METHOD(Core::Event::RefPtr mouse_event () const, maia_window_get_mouse_event, refreturn)
            _WRAP_METHOD(Core::Event::RefPtr keyboard_event () const, maia_window_get_keyboard_event, refreturn)

            _WRAP_PROPERTY("surface", Graphic::Surface::RefPtr)
            _WRAP_PROPERTY("border", double)
            _WRAP_PROPERTY("shadow-width", double)
            _WRAP_PROPERTY("shadow-border", WindowBorder)
            _WRAP_PROPERTY("shadow-color", Graphic::Color::RefPtr)
            _WRAP_PROPERTY("round-corner", double)
            _WRAP_PROPERTY("close-button", bool)
            _WRAP_PROPERTY("decorated", bool)
            _WRAP_PROPERTY("depth", uint8_t)
            _WRAP_PROPERTY("device-transform", Graphic::Transform::RefPtr)
            _WRAP_PROPERTY("transient-for", Window::RefPtr)
            _WRAP_PROPERTY("popup", Popup::RefPtr)
            _WRAP_PROPERTY("foreign", uint32_t)
            _WRAP_PROPERTY("focus-item", Item::RefPtr)
            _WRAP_PROPERTY("grab-pointer-item", Item::RefPtr)
            _WRAP_PROPERTY("grab-keyboard-item", Item::RefPtr)
            _WRAP_PROPERTY("window-type", Window::Type)
            _WRAP_PROPERTY("position-policy", WindowPositionPolicy)

            _IGNORE_PROPERTY("damage-event")
            _IGNORE_PROPERTY("geometry-event")
            _IGNORE_PROPERTY("visibility-event")
            _IGNORE_PROPERTY("destroy-event")
            _IGNORE_PROPERTY("delete-event")
            _IGNORE_PROPERTY("mouse-event")
            _IGNORE_PROPERTY("keyboard-event")
            _IGNORE_PROPERTY("close-button-scale")
            _IGNORE_PROPERTY("input-devices")

        protected:
            _CTOR_DEFAULT()

            explicit Window(const Glib::ustring& inId);

            _WRAP_VFUNC(Graphic::Surface::RefPtr get_surface (), get_surface, refreturn_ctype)

#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaCoreEvent*', `const Event::RefPtr&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaCoreEventArgs*', `const Glib::RefPtr<EventArgs>&', `Glib::wrap($3, true)')
            _WRAP_VFUNC(void on_damage_event(const Core::EventArgs::RefPtr& inArgs), on_damage_event)
            _WRAP_VFUNC(void on_delete_event(const Core::EventArgs::RefPtr& inArgs), on_delete_event)
            _WRAP_VFUNC(void on_destroy_event(const Core::EventArgs::RefPtr& inArgs), on_destroy_event)
            _WRAP_VFUNC(void on_geometry_event(const Core::EventArgs::RefPtr& inArgs), on_geometry_event)
            _WRAP_VFUNC(void on_visibility_event(const Core::EventArgs::RefPtr& inArgs), on_visibility_event)
            _WRAP_VFUNC(void on_mouse_event(const Core::EventArgs::RefPtr& inArgs), on_mouse_event)
            _WRAP_VFUNC(void on_keyboard_event(const Core::EventArgs::RefPtr& inArgs), on_keyboard_event)

            _WRAP_VFUNC(void on_set_pointer_cursor(Cursor inCursor), on_set_pointer_cursor)
            _WRAP_VFUNC(void on_move_pointer(const Graphic::Point& inPosition), on_move_pointer)
            _WRAP_VFUNC(void on_scroll_to(const Item::RefPtr& inItem), on_scroll_to)
            _WRAP_VFUNC(void on_grab_focus(const Item::RefPtr& inItem), on_grab_focus)
            _WRAP_VFUNC(bool on_grab_pointer(const Item::RefPtr& inItem), on_grab_pointer)
            _WRAP_VFUNC(void on_ungrab_pointer(const Item::RefPtr& inItem), on_ungrab_pointer)
            _WRAP_VFUNC(bool on_grab_keyboard(const Item::RefPtr& inItem), on_grab_keyboard)
            _WRAP_VFUNC(void on_ungrab_keyboard(const Item::RefPtr& inItem), on_ungrab_keyboard)

            _WRAP_METHOD(void set_damage_event (const Core::Event::RefPtr& inEvent), maia_window_set_damage_event)
            _WRAP_METHOD(void set_geometry_event (const Core::Event::RefPtr& inEvent), maia_window_set_geometry_event)
            _WRAP_METHOD(void set_visibility_event (const Core::Event::RefPtr& inEvent), maia_window_set_visibility_event)
            _WRAP_METHOD(void set_destroy_event (const Core::Event::RefPtr& inEvent), maia_window_set_destroy_event)
            _WRAP_METHOD(void set_delete_event (const Core::Event::RefPtr& inEvent), maia_window_set_delete_event)
            _WRAP_METHOD(void set_mouse_event (const Core::Event::RefPtr& inEvent), maia_window_set_mouse_event)
            _WRAP_METHOD(void set_keyboard_event (const Core::Event::RefPtr& inEvent), maia_window_set_keyboard_event)
#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaCoreEvent*', `const Event::RefPtr&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaCoreEventArgs*', `const Glib::RefPtr<EventArgs>&', `Glib::wrap($3)')
    };
}
