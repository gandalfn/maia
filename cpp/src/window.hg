/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * window.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/item.h>
#include <maiamm/core-event.h>
#include <maiamm/core-eventargs.h>
#include <maiamm/graphic-surface.h>
#include <maiamm/graphic-color.h>
#include <maiamm/group.h>
#include <maiamm/popup.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    class Window : public Group
    {
        _CLASS_GOBJECT(Window, MaiaWindow, MAIA_WINDOW, Group, MaiaGroup)

        _IGNORE(maia_window_on_set_pointer_cursor, maia_window_on_move_pointer, maia_window_on_grab_focus,
                maia_window_on_grab_pointer, maia_window_on_ungrab_pointer, maia_window_on_grab_keyboard,
                maia_window_on_ungrab_keyboard, maia_window_on_scroll_to, maia_window_on_damage_event,
                maia_window_on_geometry_event, maia_window_on_mouse_event, maia_window_on_visibility_event,
                maia_window_on_destroy_event, maia_window_on_delete_event, maia_window_on_keyboard_event)

        protected:
            _CTOR_DEFAULT()

#m4 _CONVERSION(`MaiaItem*', `const Glib::RefPtr<Item>&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaCoreEventArgs*', `const Glib::RefPtr<EventArgs>&', `Glib::wrap($3, true)')
            _WRAP_VFUNC(Glib::RefPtr<Graphic::Surface> get_surface (), get_surface, refreturn_ctype)

            _WRAP_VFUNC(void on_damage_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_damage_event)
            _WRAP_VFUNC(void on_delete_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_delete_event)
            _WRAP_VFUNC(void on_destroy_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_destroy_event)
            _WRAP_VFUNC(void on_geometry_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_geometry_event)
            _WRAP_VFUNC(void on_visibility_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_visibility_event)
            _WRAP_VFUNC(void on_mouse_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_mouse_event)
            _WRAP_VFUNC(void on_keyboard_event(const Glib::RefPtr<Core::EventArgs>& inArgs), on_keyboard_event)

            _WRAP_VFUNC(void on_set_pointer_cursor(Cursor inCursor), on_set_pointer_cursor)
            _WRAP_VFUNC(void on_move_pointer(const Graphic::Point& inPosition), on_move_pointer)
            _WRAP_VFUNC(void on_scroll_to(const Glib::RefPtr<Item>& inItem), on_scroll_to)
            _WRAP_VFUNC(void on_grab_focus(const Glib::RefPtr<Item>& inItem), on_grab_focus)
            _WRAP_VFUNC(bool on_grab_pointer(const Glib::RefPtr<Item>& inItem), on_grab_pointer)
            _WRAP_VFUNC(void on_ungrab_pointer(const Glib::RefPtr<Item>& inItem), on_ungrab_pointer)
            _WRAP_VFUNC(bool on_grab_keyboard(const Glib::RefPtr<Item>& inItem), on_grab_keyboard)
            _WRAP_VFUNC(void on_ungrab_keyboard(const Glib::RefPtr<Item>& inItem), on_ungrab_keyboard)

            _WRAP_METHOD(void set_damage_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_damage_event)
            _WRAP_METHOD(void set_geometry_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_geometry_event)
            _WRAP_METHOD(void set_visibility_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_visibility_event)
            _WRAP_METHOD(void set_destroy_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_destroy_event)
            _WRAP_METHOD(void set_delete_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_delete_event)
            _WRAP_METHOD(void set_mouse_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_mouse_event)
            _WRAP_METHOD(void set_keyboard_event (const Glib::RefPtr<Core::Event>& inEvent), maia_window_set_keyboard_event)
#m4 _CONVERSION(`MaiaItem*', `const Glib::RefPtr<Item>&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaCoreEventArgs*', `const Glib::RefPtr<EventArgs>&', `Glib::wrap($3)')

        public:
            static Glib::RefPtr<Window> create (const Glib::ustring& inId, unsigned int inWidth, unsigned int inHeight)
            {
                MaiaWindow* pWindow = maia_window_new (inId.c_str(), inWidth, inHeight);
                return Glib::RefPtr<Window> (new Window (pWindow));
            }

            _WRAP_METHOD(void swap_buffer (), maia_window_swap_buffer)
            _WRAP_METHOD(void flush (), maia_window_flush)

            _WRAP_METHOD(Glib::RefPtr<Item> get_focus_item () const, maia_window_get_focus_item, refreturn)
            _WRAP_METHOD(void set_focus_item (const Glib::RefPtr<Item>& inItem), maia_window_set_focus_item)

            _WRAP_METHOD(Glib::RefPtr<Item> get_grab_pointer_item () const, maia_window_get_grab_pointer_item, refreturn)
            _WRAP_METHOD(void set_grab_pointer_item (const Glib::RefPtr<Item>& inItem), maia_window_set_grab_pointer_item)

            _WRAP_METHOD(Glib::RefPtr<Item> get_grab_keyboard_item () const, maia_window_get_grab_keyboard_item, refreturn)
            _WRAP_METHOD(void set_grab_keyboard_item (const Glib::RefPtr<Item>& inItem), maia_window_set_grab_keyboard_item)

            _WRAP_METHOD(Glib::RefPtr<Graphic::Surface> get_surface () const, maia_window_get_surface, refreturn)

            _WRAP_METHOD(double get_border () const, maia_window_get_border)
            _WRAP_METHOD(void set_border (double inBorder), maia_window_set_border)

            _WRAP_METHOD(double get_shadow_width () const, maia_window_get_shadow_width)
            _WRAP_METHOD(void set_shadow_width (double inWidth), maia_window_set_shadow_width)

            _WRAP_METHOD(WindowBorder get_shadow_border () const, maia_window_get_shadow_border)
            _WRAP_METHOD(void set_shadow_border (WindowBorder inBorder), maia_window_set_shadow_border)

            _WRAP_METHOD(Glib::RefPtr<Graphic::Color> get_shadow_color () const, maia_window_get_shadow_color, refreturn)
            _WRAP_METHOD(void set_shadow_color (const Glib::RefPtr<Graphic::Color>& inColor), maia_window_set_shadow_color)

            _WRAP_METHOD(double get_round_corner () const, maia_window_get_round_corner)
            _WRAP_METHOD(void set_round_corner (double inWidth), maia_window_set_round_corner)

            _WRAP_METHOD(bool get_close_button () const, maia_window_get_close_button)
            _WRAP_METHOD(void set_close_button (bool inClose = true), maia_window_set_close_button)

            _WRAP_METHOD(guint8 get_depth () const, maia_window_get_depth)
            _WRAP_METHOD(void set_depth (guint8 inDepth), maia_window_set_depth)

            _WRAP_METHOD(Glib::RefPtr<Graphic::Transform> get_device_transform () const, maia_window_get_device_transform, refreturn)
            _WRAP_METHOD(void set_device_transform (const Glib::RefPtr<Graphic::Transform>& inTransform), maia_window_set_device_transform)

            _WRAP_METHOD(Glib::RefPtr<Popup> get_popup () const, maia_window_get_popup, refreturn)

            _WRAP_METHOD(guint32 get_foreign () const, maia_window_get_foreign)

            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_damage_event () const, maia_window_get_damage_event, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_geometry_event () const, maia_window_get_geometry_event, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_visibility_event () const, maia_window_get_visibility_event, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_destroy_event () const, maia_window_get_destroy_event, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_delete_event () const, maia_window_get_delete_event, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_mouse_event () const, maia_window_get_mouse_event, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> get_keyboard_event () const, maia_window_get_keyboard_event, refreturn)

            _WRAP_PROPERTY("surface", Glib::RefPtr<Graphic::Surface>)
            _WRAP_PROPERTY("border", double)
            _WRAP_PROPERTY("shadow-width", double)
            _WRAP_PROPERTY("shadow-border", WindowBorder)
            _WRAP_PROPERTY("shadow-color", Glib::RefPtr<Graphic::Color>)
            _WRAP_PROPERTY("round-corner", double)
            _WRAP_PROPERTY("close-button", bool)
            _WRAP_PROPERTY("depth", guint8)
            _WRAP_PROPERTY("device-transform", Glib::RefPtr<Graphic::Transform>)
            _WRAP_PROPERTY("popup", Glib::RefPtr<Popup>)
            _WRAP_PROPERTY("foreign", guint32)
            _WRAP_PROPERTY("focus-item", Glib::RefPtr<Item>)
            _WRAP_PROPERTY("grab-pointer-item", Glib::RefPtr<Item>)
            _WRAP_PROPERTY("grab-keyboard-item", Glib::RefPtr<Item>)
            _WRAP_PROPERTY("damage-event", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("geometry-event", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("visibility-event", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("destroy-event", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("delete-event", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("mouse-event", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("keyboard-event", Glib::RefPtr<Core::Event>)

        private:
            _WRAP_PROPERTY("close-button-scale", double)
    };
}
