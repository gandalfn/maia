/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * model.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/manifest-style.h>
#include <maiamm/manifest-element.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    class ModelColumn;

    class Model : public Core::Object, public Manifest::Element
    {
        _CLASS_GOBJECT(Model, MaiaModel, MAIA_MODEL, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Manifest::Element)

        protected:
            _CTOR_DEFAULT()

        public:
            _WRAP_METHOD(Glib::ustring get_name () const, maia_model_get_name)

            inline Glib::RefPtr<ModelColumn> operator[] (const Glib::ustring& inColumnName) const
            {
                return get (inColumnName);
            }

            _WRAP_METHOD(guint get_nb_rows () const, maia_model_get_nb_rows)

            _WRAP_SIGNAL(void value_changed (guint inRow), "value-changed", no_default_handler)
            _WRAP_SIGNAL(void row_added (guint inRow), "row-added")
            _WRAP_SIGNAL(void row_changed (guint inRow), "row-changed")
            _WRAP_SIGNAL(void row_deleted (guint inRow), "row-deleted", no_default_handler)
            _WRAP_SIGNAL(void rows_reordered (gpointer inNewOrder, int inLength), "rows-reordered", no_default_handler)

            _WRAP_PROPERTY("nb-rows", guint)

            _WRAP_PROPERTY("name", Glib::ustring)

            _WRAP_PROPERTY("tag", Glib::ustring)
            _WRAP_PROPERTY("characters", Glib::ustring)
            _WRAP_PROPERTY("manifest-path", Glib::ustring)
            _WRAP_PROPERTY("manifest-styles", Core::Set<Manifest::Style>)

        private:
            _WRAP_METHOD(Glib::RefPtr<ModelColumn> get (const Glib::ustring& inColumnName) const, maia_model_get)
    };

    class ModelColumn : public Core::Object, public Manifest::Element
    {
        _CLASS_GOBJECT(ModelColumn, MaiaModelColumn, MAIA_MODEL, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Manifest::Element)

        protected:
            _CTOR_DEFAULT()

        public:
            _WRAP_METHOD(Glib::ustring get_name () const, maia_model_column_get_name)
            _WRAP_METHOD(Glib::RefPtr<Model> get_model () const, maia_model_column_get_model)
            _WRAP_METHOD(int get_column () const, maia_model_column_get_column)
            _WRAP_METHOD(void set_column (int inColumn) const, maia_model_column_set_column)

            _IGNORE(maia_model_column_get)
            template<typename T>
            inline void get_value(unsigned int inRow, const Glib::Value<T>& inValue) const
            {
                maia_model_column_get (gobj (), inRow, inValue.gobj ());
            }
    };
}
