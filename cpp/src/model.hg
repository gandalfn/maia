/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * model.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/manifest-theme.h>
#include <maiamm/manifest-element.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    class ModelIterator;
    class ModelRow;
    class ModelRows;
    class ModelColumn;

    class Model : public Core::Object, public Manifest::Element
    {
        _CLASS_GOBJECT(Model, MaiaModel, MAIA_MODEL, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Manifest::Element)

        _IGNORE(maia_model_append_values, maia_model_append_valuesv, maia_model_set_values, maia_model_set_valuesv,
                maia_model_insert_valuesv, maia_model_insert_values maia_model_construct_model, maia_model_new_filter,
                maia_model_construct_model_filter, maia_model_construct_model_with_columns)

        protected:
            _CTOR_DEFAULT()

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            Model (const Glib::ustring& inId, const std::vector<Glib::RefPtr<ModelColumn>>& inColumns);
#else
            Model (const Glib::ustring& inId, const std::vector<Model::Column::RefPtr>& inColumns);
#endif

        public:
            using RefPtr = Glib::RefPtr<Model>;
            using iterator = ModelIterator;
            using Row = ModelRow;
            using Rows = ModelRows;
            using Column = ModelColumn;
            using SlotValueChanged = sigc::slot<void, unsigned int>;
            using SlotFilterFunc = sigc::slot<bool, Model::RefPtr, iterator>;

            static Model::RefPtr create (const Glib::ustring& inId);
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            static Model::RefPtr create (const Glib::ustring& inId, const std::vector<Glib::RefPtr<Model::Column>>& inColumns);
#else
            static Model::RefPtr create (const Glib::ustring& inId, const std::vector<Model::Column::RefPtr>& inColumns);
#endif
            static Model::RefPtr create (const Glib::ustring& inId, const Model::RefPtr& inpModel, SlotFilterFunc inFunc);
            static Model::RefPtr create_foreign (const Glib::ustring& inId, ...);
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            static Model::RefPtr create_foreign (const Glib::ustring& inId, const std::vector<Glib::RefPtr<Model::Column>>& inColumns, ...);
#else
            static Model::RefPtr create_foreign (const Glib::ustring& inId, const std::vector<Model::Column::RefPtr>& inColumns, ...);
#endif

            _WRAP_METHOD(void refilter (), maia_model_refilter)

            _WRAP_METHOD(Glib::ustring get_name () const, maia_model_get_name)

            Model::Rows rows () const;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_METHOD(Glib::RefPtr<Model::Column> get (const Glib::ustring& inColumnName) const, maia_model_get, refreturn)
#else
            Model::Column::RefPtr get (const Glib::ustring& inColumnName) const;
#endif
            _WRAP_METHOD(unsigned int get_nb_rows () const, maia_model_get_nb_rows)

            _IGNORE (maia_model_append_row)
            Model::iterator append_row ();

            template<typename T, typename... Args>
            inline Model::iterator append_values (const T& inValue, Args... inArgs);

            template<typename T, typename... Args>
            inline Model::iterator insert_values (const Model::iterator& inIter, const T& inValue, Args... inArgs);

            _IGNORE (maia_model_remove_row)
            void remove_row (const Model::iterator& inIter);

            Model::iterator get_iter (unsigned int inRow);

            inline void clear ();

            _WRAP_SIGNAL(void value_changed (unsigned int inRow), "value-changed", no_default_handler)
            _WRAP_SIGNAL(void row_added (unsigned int inRow), "row-added")
            _WRAP_SIGNAL(void row_changed (unsigned int inRow), "row-changed")
            _WRAP_SIGNAL(void row_deleted (unsigned int inRow), "row-deleted", no_default_handler)
            _WRAP_SIGNAL(void rows_reordered (gpointer inNewOrder, int inLength), "rows-reordered", no_default_handler)

            sigc::connection connect_value_changed (const Glib::ustring& inColumnName, SlotValueChanged inSlot);

            _WRAP_PROPERTY("nb-rows", unsigned int)

            _WRAP_PROPERTY("name", Glib::ustring)

            _IGNORE_PROPERTY("tag")
            _IGNORE_PROPERTY("style")
            _IGNORE_PROPERTY("characters")
            _IGNORE_PROPERTY("manifest-path")
            _IGNORE_PROPERTY("manifest-theme")

        private:
            Model* cpp_obj () { return this; }
            SlotFilterFunc* m_pFilterFunc;

            static gboolean filter_func_callback (MaiaModel* inpModel, unsigned int inRow, void* inpData);
            static void filter_func_destroy_notify_handler (void* inpData);
    };

    class ModelColumn : public Core::Object, public Manifest::Element
    {
        _CLASS_GOBJECT(ModelColumn, MaiaModelColumn, MAIA_MODEL_COLUMN, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Manifest::Element)

        protected:
            _CTOR_DEFAULT()

        public:
            using RefPtr = Glib::RefPtr<Model::Column>;

            static Model::Column::RefPtr create (const Glib::ustring& inName)
            {
                return Model::Column::RefPtr (new ModelColumn (maia_model_column_new (inName.c_str())));
            }

            template <typename T>
            static Model::Column::RefPtr create (const Glib::ustring& inName)
            {
                GType type = Glib::Value<T>::value_type ();

                return Model::Column::RefPtr (new ModelColumn (maia_model_column_new_with_type (inName.c_str(), type)));
            }

            static Model::Column::RefPtr create (const Glib::ustring& inName, int inColumn)
            {
                return Model::Column::RefPtr (new ModelColumn (maia_model_column_new_with_column (inName.c_str(), inColumn)));
            }

            _WRAP_METHOD(Glib::ustring get_name () const, maia_model_column_get_name)
            _WRAP_METHOD(Model::RefPtr get_model () const, maia_model_column_get_model, refreturn)
            _WRAP_METHOD(int get_column () const, maia_model_column_get_column)
            _WRAP_METHOD(void set_column (int inColumn) const, maia_model_column_set_column)
            _WRAP_METHOD(Glib::ustring get_column_type () const, maia_model_column_get_column_type)
            _WRAP_METHOD(void set_column_type (const Glib::ustring& inValue), maia_model_column_set_column_type)

            _IGNORE(maia_model_column_get)
            _IGNORE(maia_model_column_set)

            _WRAP_PROPERTY("name", Glib::ustring)
            _WRAP_PROPERTY("model", Model::RefPtr)
            _WRAP_PROPERTY("column", int)
            _WRAP_PROPERTY("column-type", Glib::ustring)

            _IGNORE_PROPERTY("tag")
            _IGNORE_PROPERTY("style")
            _IGNORE_PROPERTY("characters")
            _IGNORE_PROPERTY("manifest-path")
            _IGNORE_PROPERTY("manifest-theme")
    };

    class ModelIterator
    {
        public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            ModelIterator (Model* inpModel, unsigned int inRow);
            ModelIterator ();
            virtual ~ModelIterator ();
#endif
            Model::iterator& operator++ ();
            const Model::iterator operator++ (int inCount);
            bool operator== (const Model::iterator& rhs);
            bool operator!= (const Model::iterator& rhs);
            inline const ModelRow& operator* () const;
            inline const ModelRow* operator-> () const;
            bool end () const;
            inline operator bool () const
            {
                return !end ();
            }


        protected:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            Model*       m_pModel;
            unsigned int m_Row;
            int          m_CurrentColumn;
            int          m_Size;
            int*         m_Columns;
            GValue*      m_Values;

            template<typename T>
            void append_values (const T& inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                append ();
            }

            void append_values (const char* inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value ((Glib::ustring)inValue);
                    m_CurrentColumn = -1;
                }

                append ();
            }

            void append_values (const Glib::ustring& inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                append ();
            }

            template<typename... Args>
            void append_values (const Glib::ustring& inColumnName, Args... inArgs)
            {
                int column = -1;
                MaiaModelColumn* pColumn = maia_model_get (m_pModel->gobj (), inColumnName.c_str ());
                if (pColumn)
                {
                    column = maia_model_column_get_column (pColumn);
                }

                if (m_CurrentColumn == -1 && column != -1)
                {
                    m_CurrentColumn = column;
                    grow ();
                }
                else if (m_CurrentColumn != -1)
                {
                    set_value (inColumnName);
                    m_CurrentColumn = -1;
                }
                else
                {
                    m_CurrentColumn = -1;
                }

                append_values (inArgs...);
            }

            template<typename... Args>
            void append_values (const char* inColumnName, Args... inArgs)
            {
                int column = -1;
                MaiaModelColumn* pColumn = maia_model_get (m_pModel->gobj (), inColumnName);
                if (pColumn)
                {
                    column = maia_model_column_get_column (pColumn);
                }

                if (m_CurrentColumn == -1 && column != -1)
                {
                    m_CurrentColumn = column;
                    grow ();
                }
                else if (m_CurrentColumn != -1)
                {
                    set_value ((Glib::ustring)inColumnName);
                    m_CurrentColumn = -1;
                }
                else
                {
                    m_CurrentColumn = -1;
                }

                append_values (inArgs...);
            }

            template<typename T, typename... Args>
            void append_values (const T& inValue, Args... inArgs)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                append_values (inArgs...);
            }

            template<typename T>
            void insert_values (const T& inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                insert ();
            }

            void insert_values (const char* inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value ((Glib::ustring)inValue);
                    m_CurrentColumn = -1;
                }

                insert ();
            }

            void insert_values (const Glib::ustring& inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                insert ();
            }

            template<typename... Args>
            void insert_values (const Glib::ustring& inColumnName, Args... inArgs)
            {
                int column = -1;
                MaiaModelColumn* pColumn = maia_model_get (m_pModel->gobj (), inColumnName.c_str ());
                if (pColumn)
                {
                    column = maia_model_column_get_column (pColumn);
                }

                if (m_CurrentColumn == -1 && column != -1)
                {
                    m_CurrentColumn = column;
                    grow ();
                }
                else if (m_CurrentColumn != -1)
                {
                    set_value (inColumnName);
                    m_CurrentColumn = -1;
                }
                else
                {
                    m_CurrentColumn = -1;
                }

                insert_values (inArgs...);
            }

            template<typename... Args>
            void insert_values (const char* inColumnName, Args... inArgs)
            {
                int column = -1;
                MaiaModelColumn* pColumn = maia_model_get (m_pModel->gobj (), inColumnName);
                if (pColumn)
                {
                    column = maia_model_column_get_column (pColumn);
                }

                if (m_CurrentColumn == -1 && column != -1)
                {
                    m_CurrentColumn = column;
                    grow ();
                }
                else if (m_CurrentColumn != -1)
                {
                    set_value ((Glib::ustring)inColumnName);
                    m_CurrentColumn = -1;
                }
                else
                {
                    m_CurrentColumn = -1;
                }

                insert_values (inArgs...);
            }

            template<typename T, typename... Args>
            void insert_values (const T& inValue, Args... inArgs)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                insert_values (inArgs...);
            }

            void clear ()
            {
                if (m_Size > 0)
                {
                    m_Size = 0;
                    g_free (m_Columns); m_Columns = 0;
                    g_free (m_Values); m_Values = 0;
                }
                m_CurrentColumn = -1;
            }

            void grow ()
            {
                m_Size++;
                if (m_Size == 1)
                {
                    m_Columns = g_new (int, m_Size);
                    m_Values = g_new (GValue, m_Size);
                    m_Values[m_Size - 1] = G_VALUE_INIT;
                }
                else
                {
                    m_Columns = g_renew (int, m_Columns, m_Size);
                    m_Values = g_renew (GValue, m_Values, m_Size);
                    m_Values[m_Size - 1] = G_VALUE_INIT;
                }
            }

            void append ()
            {
                if (m_Size > 0)
                {
                    unsigned int row;
                    if (maia_model_append_valuesv (m_pModel->gobj (), &row, m_Columns, m_Size, m_Values, m_Size))
                    {
                        m_Row = row;
                    }
                    clear ();
                }
            }

            void insert ()
            {
                if (m_Size > 0)
                {
                    unsigned int row;
                    if (maia_model_insert_valuesv (m_pModel->gobj (), m_Row, &row, m_Columns, m_Size, m_Values, m_Size))
                    {
                        m_Row = row;
                    }
                    clear ();
                }
            }

            void update ()
            {
                if (m_Size > 0)
                {
                    maia_model_set_valuesv (m_pModel->gobj (), m_Row, m_Columns, m_Size, m_Values, m_Size);
                    clear ();
                }
            }

            template<typename T>
            void set_value (const T& m_Value)
            {
                if (m_CurrentColumn != -1)
                {
                    Glib::Value<T> value;
                    value.init (Glib::Value<T>::value_type ());
                    value.set(m_Value);

                    g_value_init (&m_Values[m_Size - 1], G_VALUE_TYPE (value.gobj ()));
                    g_value_copy (value.gobj(), &m_Values[m_Size - 1]);
                    m_Columns[m_Size - 1] = m_CurrentColumn;
                }
            }
#endif

        private:
            friend Model;
    };

    class ModelRowProxy
    {
        public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            inline ModelRowProxy (MaiaModelColumn* inpColumn, unsigned int inRow) :
                m_pColumn (inpColumn),
                m_Row (inRow)
            {
            }
#endif
            template <typename T>
            inline ModelRowProxy& operator=(const T& inVal);

            template <typename T>
            inline operator T() const;

        private:
            MaiaModelColumn* m_pColumn;
            int              m_Row;

            // no copy assignment
            ModelRowProxy& operator=(const ModelRowProxy&) { return *this; }
    };

    class ModelRow : public ModelIterator
    {
        public:
            unsigned int num () const
            {
                return m_Row;
            }

            ModelRowProxy operator[] (const Glib::ustring& inColumnName) const
            {
                return ModelRowProxy (maia_model_get (m_pModel->gobj (), inColumnName.c_str ()), m_Row);
            }

            ModelRowProxy operator[] (const char* inColumnName) const
            {
                return ModelRowProxy (maia_model_get (m_pModel->gobj (), inColumnName), m_Row);
            }

            template<typename T>
            void set_values (const T& inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                update ();
            }

            void set_values (const char* inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value ((Glib::ustring)inValue);
                    m_CurrentColumn = -1;
                }

                update ();
            }

            void set_values (const Glib::ustring& inValue)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                update ();
            }

            template<typename... Args>
            void set_values (const Glib::ustring& inColumnName, Args... inArgs)
            {
                int column = -1;
                MaiaModelColumn* pColumn = maia_model_get (m_pModel->gobj (), inColumnName.c_str ());
                if (pColumn)
                {
                    column = maia_model_column_get_column (pColumn);
                }

                if (m_CurrentColumn == -1 && column != -1)
                {
                    m_CurrentColumn = column;
                    grow ();
                }
                else if (m_CurrentColumn != -1)
                {
                    set_value (inColumnName);
                    m_CurrentColumn = -1;
                }
                else
                {
                    m_CurrentColumn = -1;
                }

                set_values (inArgs...);
            }

            template<typename... Args>
            void set_values (const char* inColumnName, Args... inArgs)
            {
                int column = -1;
                MaiaModelColumn* pColumn = maia_model_get (m_pModel->gobj (), inColumnName);
                if (pColumn)
                {
                    column = maia_model_column_get_column (pColumn);
                }

                if (m_CurrentColumn == -1 && column != -1)
                {
                    m_CurrentColumn = column;
                    grow ();
                }
                else if (m_CurrentColumn != -1)
                {
                    set_value ((Glib::ustring)inColumnName);
                    m_CurrentColumn = -1;
                }
                else
                {
                    m_CurrentColumn = -1;
                }

                set_values (inArgs...);
            }

            template<typename T, typename... Args>
            void set_values (const T& inValue, Args... inArgs)
            {
                if (m_CurrentColumn != -1)
                {
                    set_value (inValue);
                    m_CurrentColumn = -1;
                }

                set_values (inArgs...);
            }
    };


    class ModelRows
    {
        public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            ModelRows (Model* inpModel);
#endif

            Model::iterator begin () const;
            Model::iterator end () const;

            inline unsigned int size () const
            {
                return m_pModel->get_nb_rows ();
            }

        private:
            Model* m_pModel;
    };

#ifndef DOXYGEN_SHOULD_SKIP_THIS
    template<typename T, typename... Args>
    inline Model::iterator Model::append_values (const T& inValue, Args... inArgs)
    {
        Model::iterator iter(this, get_nb_rows ());

        iter.append_values (inValue, inArgs...);

        return iter;
    }

    template<typename T, typename... Args>
    inline Model::iterator Model::insert_values (const Model::iterator& inIter, const T& inValue, Args... inArgs)
    {
        Maia::Model::iterator iter = inIter;

        iter.insert_values (inValue, inArgs...);

        return iter;
    }


    inline void Model::clear ()
    {
        while (rows ().size () != 0)
        {
            remove_row (rows ().begin ());
        }
    }

    inline const Model::Row& ModelIterator::operator* () const
    {
        return static_cast<const Model::Row&> (*this);
    }

    inline const Model::Row* ModelIterator::operator-> () const
    {
        return static_cast<const Model::Row*> (this);
    }

    template <typename T>
    inline ModelRowProxy& ModelRowProxy::operator= (const T& inVal)
    {
        Glib::Value<T> value;
        value.init(Glib::Value<T>::value_type());

        value.set(inVal);
        maia_model_column_set (m_pColumn, m_Row, value.gobj ());

        return *this;
    }

    template <typename T>
    inline ModelRowProxy::operator T () const
    {
        Glib::Value<T> value;
        value.init(Glib::Value<T>::value_type());

        maia_model_column_get (m_pColumn, m_Row, value.gobj ());

        return value.get ();
    }
#endif
}
