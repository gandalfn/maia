/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-bus.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-event.h>

namespace Maia
{
    namespace Core
    {
        static void
        on_link_bus_callback (gboolean inLinked, const char* inMessage, void* inpData)
        {
            if (inpData)
            {
                EventBus::SlotLinkBusCallback* pSlot = (EventBus::SlotLinkBusCallback*)inpData;

                bool linked = inLinked;
                Glib::ustring message (inMessage ? inMessage : "");
                (*pSlot) (linked, message);
                delete pSlot; pSlot = 0;
            }
        }

        void
        EventBus::_on_publish_reply_callback (MaiaCoreEventArgs* inpArgs, gpointer inpData)
        {
            EventReplyFunctorBase* pFunctor = (EventReplyFunctorBase*)g_object_get_data (G_OBJECT (inpData), "EventReplyCpp");
            Glib::RefPtr<EventArgs> pArgs = Glib::wrap(inpArgs, true);

            (*pFunctor)(pArgs);

            delete pFunctor;
        }

        void
        EventBus::link_bus (const Glib::ustring& inUri, SlotLinkBusCallback inFunc)
        {
            SlotLinkBusCallback* pSlot = new SlotLinkBusCallback (inFunc);
            maia_core_event_bus_link_bus (const_cast<MaiaCoreEventBus*> (gobj ()), inUri.c_str (), on_link_bus_callback, (gpointer)pSlot);
        }

        void
        EventBus::unlink_bus (const Glib::ustring& inUri)
        {
            maia_core_event_bus_unlink_bus (const_cast<MaiaCoreEventBus*> (gobj ()), inUri.c_str ());
        }
    }
}
