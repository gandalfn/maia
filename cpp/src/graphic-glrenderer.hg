/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-glrenderer.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-renderer.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(maiamm/private/graphic-renderer_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
        class GLRendererObject : public RendererObject
        {
            _CLASS_GOBJECT(GLRendererObject, MaiaGraphicGLRenderer, MAIA_GRAPHIC_GL_RENDERER, RendererObject, MaiaGraphicRenderer)

            protected:
                _CTOR_DEFAULT()

                GLRendererObject (const Size& inSize, const std::vector<uint32_t>& inAttributes);

            public:
                static Glib::RefPtr<GLRendererObject> create (const Size& inSize, const std::vector<uint32_t>& inAttributes)
                {
                    return Glib::RefPtr<GLRendererObject> (new GLRendererObject (inSize, inAttributes));
                }
        };
#endif

        class GLRenderer : public Renderer
        {
            public:
                _WRAP_ENUM(class Attribute : uint32_t, MaiaGraphicGLRendererAttribute, s#GRAPHIC_GL_RENDERER_ATTRIBUTE_##,  NO_GTYPE)

                virtual ~GLRenderer ();

                static Glib::RefPtr<GLRenderer> create (const Size& inSize, const std::vector<uint32_t>& inAttributes)
                {
                    return Glib::RefPtr<GLRenderer> (new GLRenderer (inSize, inAttributes));
                }

            protected:
                GLRenderer (const Size& inSize, const std::vector<uint32_t>& inAttributes);
        };
    }
}
