/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * progress-bar.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/adjustment.h>
#include <maiamm/item-packable.h>
#include <maiamm/item.h>
#include <maiamm/view.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    class ProgressBar : public Item, public ItemPackable
    {
        _CLASS_GOBJECT(ProgressBar, MaiaProgressBar, MAIA_PROGRESS_BAR, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)

        protected:
            _CTOR_DEFAULT()

            explicit ProgressBar(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<ProgressBar>;

            static ProgressBar::RefPtr create (const Glib::ustring& inId)
            {
                MaiaProgressBar* pProgressBar = maia_progress_bar_new (inId.c_str ());

                return ProgressBar::RefPtr (new ProgressBar (pProgressBar));
            }

            _WRAP_METHOD(Adjustment::RefPtr get_adjustment () const, maia_progress_bar_get_adjustment, refreturn)
            _WRAP_METHOD(void set_adjustment (const Adjustment::RefPtr& inAdjustment), maia_progress_bar_set_adjustment)

            _IGNORE(maia_progress_bar_get_slider_area)
            _WRAP_METHOD_DOCS_ONLY(maia_progress_bar_get_slider_area)
            Graphic::Rectangle get_slider_area () const
            {
                Graphic::Rectangle ret;
                maia_progress_bar_get_slider_area(const_cast<MaiaProgressBar*> (gobj ()), ret.gobj ());
                return ret;
            }

            _WRAP_METHOD(double get_round_border () const, maia_progress_bar_get_round_border)
            _WRAP_METHOD(void set_round_border (double inBorder), maia_progress_bar_set_round_border)

            _WRAP_METHOD(Orientation get_orientation () const, maia_progress_bar_get_orientation)
            _WRAP_METHOD(void set_orientation (Orientation inOrientation), maia_progress_bar_set_orientation)

            _WRAP_PROPERTY("adjustment", Adjustment::RefPtr)
            _WRAP_PROPERTY("slider-area", Graphic::Rectangle)
            _WRAP_PROPERTY("round-border", double)
            _WRAP_PROPERTY("orientation", Orientation)

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
