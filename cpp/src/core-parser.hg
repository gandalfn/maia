/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-parser.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-map.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        _WRAP_GERROR(ParseError, MaiaCoreParseError, MAIA_CORE_PARSE_ERROR, NO_GTYPE)

        class ParserIterator;

        class Parser : public Object
        {
            _CLASS_GOBJECT(Parser, MaiaCoreParser, MAIA_CORE_PARSER, Object, MaiaCoreObject)

            public:
                _WRAP_ENUM(class Token, MaiaCoreParserToken, s#CORE_PARSER_TOKEN_##, s#EOF#END_OF_FILE#, NO_GTYPE)

                typedef ParserIterator iterator;

                _WRAP_METHOD(Glib::ustring get_element () const, maia_core_parser_get_element)
                _WRAP_METHOD(Glib::ustring get_attribute () const, maia_core_parser_get_attribute)
                _WRAP_METHOD(Core::Map<Glib::ustring, Glib::ustring> get_attributes () const, maia_core_parser_get_attributes)
                _WRAP_METHOD(Glib::ustring get_val () const, maia_core_parser_get_val)
                _WRAP_METHOD(Glib::ustring get_characters () const, maia_core_parser_get_characters)
                _WRAP_METHOD(int get_line () const, maia_core_parser_get_line)
                _WRAP_METHOD(int get_column () const, maia_core_parser_get_column)

                _IGNORE (maia_core_parser_get_attributes)
                std::map<Glib::ustring, Glib::ustring> get_attributes ();

                _WRAP_METHOD(Parser::iterator begin (), maia_core_parser_iterator)
                _WRAP_METHOD(Parser::iterator end (), maia_core_parser_iterator_end)

                _WRAP_PROPERTY ("element", Glib::ustring)
                _WRAP_PROPERTY ("characters", Glib::ustring)
                _WRAP_PROPERTY ("attribute", Glib::ustring)
                _WRAP_PROPERTY ("val", Glib::ustring)
                _WRAP_PROPERTY ("line", int)
                _WRAP_PROPERTY ("column", int)

            protected:
                _WRAP_METHOD(void next_char (), maia_core_parser_next_char)
                _WRAP_METHOD(void next_unichar (gunichar inChar), maia_core_parser_next_unichar)
                _WRAP_METHOD(void skip_space (), maia_core_parser_skip_space)

                _WRAP_VFUNC(Parser::Token next_token (), next_token, errthrow)
                _WRAP_METHOD(Parser::Token next_token (), maia_core_parser_next_token, errthrow)

            private:
                _WRAP_PROPERTY ("attributes", void*)
        };

        class ParserIterator
        {
            _CLASS_BOXEDTYPE(ParserIterator, MaiaCoreParserIterator, NONE, (MaiaCoreParserIterator*)maia_core_parser_iterator_ref, maia_core_parser_iterator_unref)

            public:
                inline ParserIterator& operator++()
                {
                    next ();
                    return *this;
                }

                inline const ParserIterator operator++(int inCount)
                {
                    for (int cpt = 0; cpt < inCount && next (); ++cpt);
                    return *this;
                }

                inline Parser::Token operator*()
                {
                    return get ();
                }

                _IGNORE(maia_core_parser_iterator_compare)

                inline bool operator== (const ParserIterator& rhs)
                {
                    return maia_core_parser_iterator_compare (gobj (), const_cast<MaiaCoreParserIterator*> (rhs.gobj ()));
                }

                inline bool operator!= (const ParserIterator& rhs)
                {
                    return !maia_core_parser_iterator_compare (gobj (), const_cast<MaiaCoreParserIterator*> (rhs.gobj ()));
                }

                _WRAP_METHOD(bool next (), maia_core_parser_iterator_next, errthrow)
                _WRAP_METHOD(bool is_end () const, maia_core_parser_iterator_is_end)
                _WRAP_METHOD(Parser::Token get () const, maia_core_parser_iterator_get)
        };
    }
}
