/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * ellipse-shape.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/shape.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/shape_p.h)

namespace Maia
{
    class EllipseShape : public Shape
    {
        _CLASS_GOBJECT(EllipseShape, MaiaEllipseShape, MAIA_ELLIPSE_SHAPE, Shape, MaiaShape)

        protected:
            _CTOR_DEFAULT()

            explicit EllipseShape(const Glib::ustring& inId);

            bool begin_clicked () const;
            void set_begin_clicked (bool inClicked);

            bool end_clicked () const;
            void set_end_clicked (bool inClicked);

        public:
            static Glib::RefPtr<EllipseShape> create (const Glib::ustring& inId)
            {
                MaiaEllipseShape* pLine = maia_ellipse_shape_new (inId.c_str ());
                return Glib::RefPtr<EllipseShape> (new EllipseShape (pLine));
            }

            _WRAP_METHOD(void get_begin (Graphic::Point& outPoint) const, maia_ellipse_shape_get_begin)
            _WRAP_METHOD(void set_begin (const Graphic::Point& inPoint), maia_ellipse_shape_set_begin)

            _WRAP_METHOD(void get_end (Graphic::Point& outPoint) const, maia_ellipse_shape_get_end)
            _WRAP_METHOD(void set_end (const Graphic::Point& inPoint), maia_ellipse_shape_set_end)

            _WRAP_METHOD(double get_radius () const, maia_ellipse_shape_get_radius)
            _WRAP_METHOD(void set_radius (double inRadius), maia_ellipse_shape_set_radius)

            _WRAP_PROPERTY("begin", Graphic::Point)
            _WRAP_PROPERTY("end", Graphic::Point)
            _WRAP_PROPERTY("radius", double)

            _WRAP_PROPERTY("tag", Glib::ustring)
    };
}
