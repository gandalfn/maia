/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-renderer.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-notification.h>
#include <maiamm/graphic-surface.h>
#include <maiamm/graphic-size.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)
_PINCLUDE(maiamm/private/core-notification_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        class RendererInitializeNotification : public Core::Notification
        {
            _CLASS_GOBJECT(RendererInitializeNotification, MaiaGraphicRendererInitializeNotification, MAIA_GRAPHIC_RENDERER_INITIALIZE_NOTIFICATION, Core::Notification, MaiaCoreNotification)

            _IGNORE(maia_graphic_renderer_initialize_notification_post)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<RendererInitializeNotification>;

                _WRAP_METHOD(void get_size (Size& outSize) const, maia_graphic_renderer_initialize_notification_get_size)
                _WRAP_METHOD(void set_size (const Size& outSize) const, maia_graphic_renderer_initialize_notification_set_size)

                _WRAP_PROPERTY("size", Size)
        };

        class RendererNewFrameNotification : public Core::Notification
        {
            _CLASS_GOBJECT(RendererNewFrameNotification, MaiaGraphicRendererNewFrameNotification, MAIA_GRAPHIC_RENDERER_NEW_FRAME_NOTIFICATION, Core::Notification, MaiaCoreNotification)

            _IGNORE(maia_graphic_renderer_new_frame_notification_post)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<class RendererNewFrameNotification>;

                _WRAP_METHOD(unsigned int get_num_frame () const, maia_graphic_renderer_new_frame_notification_get_num_frame)
                _WRAP_METHOD(void set_num_frame (unsigned int inNumFrame) const, maia_graphic_renderer_new_frame_notification_set_num_frame)

                _WRAP_PROPERTY("num-frame", unsigned int)
        };

        class RendererLooper : public Core::Object
        {
            _CLASS_GOBJECT(RendererLooper, MaiaGraphicRendererLooper, MAIA_GRAPHIC_RENDERER_LOOPER, Core::Object, MaiaCoreObject)
            _IGNORE (maia_graphic_renderer_looper_prepare, maia_graphic_renderer_looper_finish)

            public:
                using RefPtr = Glib::RefPtr<RendererLooper>;
                using RenderSlot = sigc::slot<void, unsigned int>;

            protected:
                _CTOR_DEFAULT()

                virtual void prepare (const RenderSlot& /*inSlot*/) {}
                virtual void finish () {}

            private:
                _WRAP_VFUNC(void prepare (MaiaGraphicRendererRenderFunc inFunc, gpointer inpData), prepare, custom_vfunc)
                _WRAP_VFUNC(void finish (), finish, custom_vfunc)

                void render_slot_callback (unsigned int inNumFrame);

                MaiaGraphicRendererRenderFunc m_Func;
                gpointer                      m_pData;
        };

        class RendererTimelineLooper : public RendererLooper
        {
            _CLASS_GOBJECT(RendererTimelineLooper, MaiaGraphicRendererTimelineLooper, MAIA_GRAPHIC_RENDERER_TIMELINE_LOOPER, RendererLooper, MaiaGraphicRendererLooper)

            protected:
                _CTOR_DEFAULT

            public:
                using RefPtr = Glib::RefPtr<RendererTimelineLooper>;

                static RendererTimelineLooper::RefPtr create (int inFps, int inNbFrames)
                {
                    RendererTimelineLooper* pLooper = new RendererTimelineLooper (maia_graphic_renderer_timeline_looper_new (inFps, inNbFrames));
                    return RendererTimelineLooper::RefPtr (pLooper);
                }
        };

#ifndef DOXYGEN_SHOULD_SKIP_THIS
        class RendererObject : public Core::Object
        {
            _CLASS_GOBJECT(RendererObject, MaiaGraphicRenderer, MAIA_GRAPHIC_RENDERER, Core::Object, MaiaCoreObject)

            protected:
                _CTOR_DEFAULT()

                _WRAP_CTOR(RendererObject(const Size& size), maia_graphic_renderer_new)

            public:
                static Glib::RefPtr<RendererObject> create (const Size& inSize)
                {
                    return Glib::RefPtr<RendererObject> (new RendererObject (inSize));
                }

                _WRAP_METHOD(Surface::RefPtr get_surface () const, maia_graphic_renderer_get_surface, refreturn)
                _WRAP_METHOD(void get_size (Size& outSize) const, maia_graphic_renderer_get_size)
                _WRAP_METHOD(void set_size (const Size& inSize), maia_graphic_renderer_set_size)

                _WRAP_METHOD(RendererInitializeNotification::RefPtr initialize_notification () const, maia_graphic_renderer_get_initialize, refreturn)
                _WRAP_METHOD(RendererNewFrameNotification::RefPtr new_frame_notification () const, maia_graphic_renderer_get_new_frame, refreturn)

                _WRAP_METHOD(void initialize (), maia_graphic_renderer_start)
                _WRAP_METHOD(void render (unsigned int inFrameNum), maia_graphic_renderer_render)

                _WRAP_PROPERTY("surface", Surface::RefPtr)
                _WRAP_PROPERTY("size", Size)
                _WRAP_PROPERTY("initialize", RendererInitializeNotification::RefPtr)
                _WRAP_PROPERTY("new-frame", RendererNewFrameNotification::RefPtr)
        };
#endif

        class Renderer : public Core::Object
        {
            public:
                using RefPtr = Glib::RefPtr<Renderer>;

                virtual ~Renderer();

                void initialize ();
                void render (unsigned int inFrameNum);

                Size get_size () const;
                void set_size (const Size& inSize);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                Glib::RefPtr<RendererObject> get_renderer () const
                {
                    return m_pRenderer;
                }
#endif
                RendererInitializeNotification::RefPtr initialize_notification () const;
                RendererNewFrameNotification::RefPtr new_frame_notification () const;

                static Renderer::RefPtr create (const Maia::Graphic::Size& inSize)
                {
                    return Renderer::RefPtr (new Renderer (inSize));
                }

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                static Renderer::RefPtr create (const Glib::RefPtr<RendererObject>& inpRenderer)
                {
                    return Renderer::RefPtr (new Renderer (inpRenderer));
                }
#endif

            protected:
                explicit Renderer (const Maia::Graphic::Size& inSize);
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                explicit Renderer (const Glib::RefPtr<RendererObject>& inpRenderer);
#endif

                virtual void on_initialize ();
                virtual void on_new_frame (unsigned int inFrameNum);

            private:
                Glib::RefPtr<RendererObject> m_pRenderer;

                static void _on_initialize (MaiaCoreNotification* inpNotification, gpointer inpData);
                static void _on_new_frame (MaiaCoreNotification* inpNotification, gpointer inpData);
                static void _on_new_frame_func (unsigned int inNumFrame, gpointer inpData);
        };
    }
}
