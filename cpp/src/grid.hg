/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * grid.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/group.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    class Grid : public Group, public ItemPackable, public ItemMovable
    {
        _CLASS_GOBJECT(Grid, MaiaGrid, MAIA_GRID, Group, MaiaGroup)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)

        protected:
            _CTOR_DEFAULT()

            explicit Grid(const Glib::ustring& inId);

        public:
            _WRAP_ENUM(class Layout, MaiaGridLayout, s#GRID_LAYOUT_##, NO_GTYPE)

            static Glib::RefPtr<Grid> create (const Glib::ustring& inId)
            {
                MaiaGrid* pGrid = maia_grid_new (inId.c_str ());

                return Glib::RefPtr<Grid> (new Grid (pGrid));
            }

            _WRAP_METHOD(Grid::Layout get_layout () const, maia_grid_get_layout)
            _WRAP_METHOD(void set_layout (Grid::Layout inLayout), maia_grid_set_layout)

            _WRAP_METHOD(double get_row_spacing () const, maia_grid_get_row_spacing)
            _WRAP_METHOD(void set_row_spacing (double inSpacing) const, maia_grid_set_row_spacing)

            _WRAP_METHOD(double get_column_spacing () const, maia_grid_get_column_spacing)
            _WRAP_METHOD(void set_column_spacing (double inSpacing) const, maia_grid_set_column_spacing)

            _WRAP_METHOD(double get_border_line_width () const, maia_grid_get_border_line_width)
            _WRAP_METHOD(void set_border_line_width (double inLineWidth) const, maia_grid_set_border_line_width)

            _WRAP_METHOD(double get_grid_line_width () const, maia_grid_get_grid_line_width)
            _WRAP_METHOD(void set_grid_line_width (double inLineWidth) const, maia_grid_set_grid_line_width)

            _WRAP_PROPERTY("layout", Grid::Layout)
            _WRAP_PROPERTY("row-spacing", double)
            _WRAP_PROPERTY("column-spacing", double)
            _WRAP_PROPERTY("border-line-width", double)
            _WRAP_PROPERTY("grid-line-width", double)

            _WRAP_PROPERTY("row", guint)
            _WRAP_PROPERTY("rows", guint)

            _WRAP_PROPERTY("column", guint)
            _WRAP_PROPERTY("columns", guint)

            _WRAP_PROPERTY("xexpand", bool)
            _WRAP_PROPERTY("xfill", bool)
            _WRAP_PROPERTY("xshrink", bool)
            _WRAP_PROPERTY("xlimp", bool)
            _WRAP_PROPERTY("xalign", double)

            _WRAP_PROPERTY("yexpand", bool)
            _WRAP_PROPERTY("yfill", bool)
            _WRAP_PROPERTY("yshrink", bool)
            _WRAP_PROPERTY("ylimp", bool)
            _WRAP_PROPERTY("yalign", double)

            _WRAP_PROPERTY("top-padding", double)
            _WRAP_PROPERTY("bottom-padding", double)
            _WRAP_PROPERTY("left-padding", double)
            _WRAP_PROPERTY("right-padding", double)

            _WRAP_PROPERTY("backcell-pattern", Glib::RefPtr<Graphic::Pattern>)
    };
}
