/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-collection.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-iterator.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        template<typename T>
        class Collection
        {
            public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
            typedef Collection<T> CppObjectType;
            typedef MaiaCoreCollection BaseObjectType;

            static GType get_type() G_GNUC_CONST
            {
                return maia_core_collection_get_type();
            }
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

            public:
                Collection() :
                    gobject_ (0)
                {}

                explicit Collection(MaiaCoreCollection* gobject, bool make_a_copy = true) :
                    gobject_ ((make_a_copy && gobject) ? (MaiaCoreCollection*)maia_core_collection_ref(gobject) : gobject)
                {}

                Collection(const Collection<T>& other) :
                    gobject_ ((other.gobject_) ? (MaiaCoreCollection*)maia_core_collection_ref(other.gobject_) : 0)
                {}

                Collection<T>& operator=(const Collection<T>& other)
                {
                    Collection<T> temp (other);
                    swap(temp);
                    return *this;
                }

                virtual ~Collection<T>()
                {
                    if(gobject_)
                        maia_core_collection_unref(gobject_);
                }

                void swap(Collection<T>& other)
                {
                    MaiaCoreCollection *const temp = gobject_;
                    gobject_ = other.gobject_;
                    other.gobject_ = temp;
                }

                MaiaCoreCollection* gobj()
                {
                    return gobject_;
                }

                const MaiaCoreCollection* gobj() const
                {
                    return gobject_;
                }

                MaiaCoreCollection* gobj_copy() const
                {
                    return (MaiaCoreCollection*)maia_core_collection_ref(gobject_);
                }

                int length () const
                {
                    return maia_core_collection_get_length (gobject_);
                }

                bool contains (const T& inValue)
                {
                    return maia_core_collection_contains (gobject_, (gconstpointer)inValue);
                }

                Iterator<T> insert (const T& inValue)
                {
                    maia_core_collection_insert (gobject_, (gconstpointer)inValue);
                }

                void remove (const T& inValue)
                {
                    maia_core_collection_remove (gobject_, (gconstpointer)inValue);
                }

                void clear ()
                {
                    maia_core_collection_clear (gobject_);
                }

                Iterator<T> begin ()
                {
                    return Iterator<T> (maia_core_collection_iterator (gobject_), false);
                }

                void erase (const Iterator<T>& inIter)
                {
                    maia_core_collection_erase (gobject_, inIter->gobj ());
                }

            protected:
                MaiaCoreCollection* gobject_;
       };

        /** @relates Maia::Core::Collection
         * @param lhs The left-hand side
         * @param rhs The right-hand side
         */
        template<typename T>
        inline void swap(Collection<T>& lhs, Collection<T>& rhs)
        {
            lhs.swap(rhs);
        }
    }
}

namespace Glib
{
#ifndef DOXYGEN_SHOULD_SKIP_THIS
    template<typename T>
    Maia::Core::Collection<T> wrap(MaiaCoreCollection* object, bool take_copy)
    {
        return Maia::Core::Collection<T> (object, take_copy);
    }

    template <typename T>
    class Value<Maia::Core::Collection<T> > : public Glib::Value_Boxed<Maia::Core::Collection<T> >
    {};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */
}
