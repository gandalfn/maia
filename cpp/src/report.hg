/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * report.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <giomm.h>
#include <maiamm/core-object.h>
#include <maiamm/core-array.h>
#include <maiamm/document.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    class Report : public Core::Object
    {
        _CLASS_GOBJECT(Report, MaiaReport, MAIA_REPORT, Core::Object, MaiaCoreObject)

        protected:
            _CTOR_DEFAULT()

        public:
            typedef sigc::slot<void, Glib::RefPtr<Report>, Glib::RefPtr<Gio::AsyncResult> > SlotSaveFinished;

            static Glib::RefPtr<Report> create (const Glib::ustring& inFilename, double inDpi = 96)
            {
                return Glib::RefPtr<Report> (new Report (maia_report_new (inFilename.c_str(), inDpi)));
            }
            _IGNORE(maia_report_new, maia_report_save, maia_report_save_finish)

            _WRAP_METHOD(void add_document (const Glib::RefPtr<Document>& inpDocument) const, maia_report_add_document)
            _WRAP_METHOD(void remove_document (const Glib::RefPtr<Document>& inpDocument) const, maia_report_remove_document)

            _WRAP_METHOD(Glib::ustring get_filename () const, maia_report_get_filename)
            _WRAP_METHOD(double get_resolution () const, maia_report_get_resolution)
            _WRAP_METHOD(Core::Array<Document> get_documents () const, maia_report_get_documents)

            void save ();
            void save (SlotSaveFinished inFunc);
            void save (SlotSaveFinished inFunc, const Glib::RefPtr<Gio::Cancellable>& inCancellable);
            
            void save_finish (const Glib::RefPtr<Gio::AsyncResult>& inResult);

            _WRAP_PROPERTY("filename", Glib::ustring)
            _WRAP_PROPERTY("resolution", double)
            _WRAP_PROPERTY("documents", Core::Array<Document>)
    };
}
