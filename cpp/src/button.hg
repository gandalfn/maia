/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * button.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-size.h>
#include <maiamm/graphic-glyph.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/core-event.h>
#include <maiamm/grid.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    /**
     * \includedoc MaiaButton.doc
     */
    class Button : public Item, public ItemPackable, public ItemMovable, public ItemFocusable
    {
        _CLASS_GOBJECT(Button, MaiaButton, MAIA_BUTTON, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit Button(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<class Button>;

            _WRAP_ENUM(class Relief, MaiaButtonRelief, s#BUTTON_RELIEF_##, NO_GTYPE)

            static Button::RefPtr create (const Glib::ustring& inId)
            {
                MaiaButton* pButton = maia_button_new (inId.c_str (), 0);

                return Button::RefPtr (new Button (pButton));
            }

            static Button::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inLabel)
            {
                MaiaButton* pButton = maia_button_new (inId.c_str (), inLabel.c_str ());

                return Button::RefPtr (new Button (pButton));
            }

            _WRAP_METHOD(bool get_sensitive () const, maia_button_get_sensitive)
            _WRAP_METHOD(void set_sensitive (bool inSensitive = true), maia_button_set_sensitive)

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_button_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_button_set_font_description)

            _WRAP_METHOD(Graphic::Glyph::Alignment get_alignment () const, maia_button_get_alignment)
            _WRAP_METHOD(void set_alignment (Graphic::Glyph::Alignment inAlignment), maia_button_set_alignment)

            _IGNORE(maia_button_get_icon_size)
            _WRAP_METHOD_DOCS_ONLY(maia_button_get_icon_size)
            Graphic::Size get_icon_size () const
            {
                Graphic::Size ret;
                maia_button_get_icon_size(const_cast<MaiaButton*> (gobj ()), ret.gobj ());
                return ret;
            }
            _WRAP_METHOD(void set_icon_size (const Graphic::Size& inSize), maia_button_set_icon_size)

            _WRAP_METHOD(Glib::ustring get_label () const, maia_button_get_label)
            _WRAP_METHOD(void set_label (const Glib::ustring& inLabel), maia_button_set_label)

            _WRAP_METHOD(double get_border () const, maia_button_get_border)
            _WRAP_METHOD(void set_border (double inBorder), maia_button_set_border)

            _WRAP_METHOD(Button::Relief get_relief () const, maia_button_get_relief)
            _WRAP_METHOD(void set_relief (Button::Relief inRelief), maia_button_set_relief)

            _WRAP_METHOD(double get_spacing () const, maia_button_get_spacing)
            _WRAP_METHOD(void set_spacing (double inSpacing), maia_button_set_spacing)

            _WRAP_METHOD(Graphic::Color::RefPtr get_shade_color () const, maia_button_get_shade_color, refreturn)
            _WRAP_METHOD(void set_shade_color (const Graphic::Color::RefPtr& inColor), maia_button_set_shade_color)

            _WRAP_METHOD(Glib::ustring get_icon_filename () const, maia_button_get_icon_filename)
            _WRAP_METHOD(void set_icon_filename (const Glib::ustring& inFilename), maia_button_set_icon_filename)

            _WRAP_METHOD(Core::Event::RefPtr clicked () const, maia_button_get_clicked, refreturn)

            _WRAP_PROPERTY("sensitive", bool)
            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("alignment", Graphic::Glyph::Alignment)
            _WRAP_PROPERTY("label", Glib::ustring)
            _WRAP_PROPERTY("border", double)
            _WRAP_PROPERTY("relief", Button::Relief)
            _WRAP_PROPERTY("spacing", double)
            _WRAP_PROPERTY("shade-color", Graphic::Color::RefPtr)
            _WRAP_PROPERTY("icon-filename", Glib::ustring)
            _WRAP_PROPERTY("icon-size", Graphic::Size)

            _IGNORE_PROPERTY("clicked")

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")
            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")
            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")
            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")
            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")
            _IGNORE_PROPERTY("backcell-pattern")
    };
}
