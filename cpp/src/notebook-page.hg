/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * notebook-page.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-glyph.h>
#include <maiamm/graphic-pattern.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/toggle.h>
#include <maiamm/group.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    class NotebookPage : public Group, public ItemPackable
    {
        _CLASS_GOBJECT(NotebookPage, MaiaNotebookPage, MAIA_NOTEBOOK_PAGE, Group, MaiaGroup)
        _IMPLEMENTS_INTERFACE(ItemPackable)

        protected:
            _CTOR_DEFAULT()

            explicit NotebookPage(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<NotebookPage>;

            static NotebookPage::RefPtr create (const Glib::ustring& inId)
            {
                MaiaNotebookPage* pPage = maia_notebook_page_new (inId.c_str ());

                return NotebookPage::RefPtr (new NotebookPage (pPage));
            }

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_notebook_page_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_notebook_page_set_font_description)

            _WRAP_METHOD(Graphic::Glyph::Alignment get_alignment () const, maia_notebook_page_get_alignment)
            _WRAP_METHOD(void set_alignment (Graphic::Glyph::Alignment inAlignment), maia_notebook_page_set_alignment)

            _WRAP_METHOD(Glib::ustring get_label () const, maia_notebook_page_get_label)
            _WRAP_METHOD(void set_label (const Glib::ustring& inLabel), maia_notebook_page_set_label)

            _WRAP_METHOD(Toggle::RefPtr get_toggle () const, maia_notebook_page_get_toggle, refreturn)
            _WRAP_METHOD(void set_toggle (const Toggle::RefPtr& inLabel), maia_notebook_page_set_toggle)

            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("alignment", Graphic::Glyph::Alignment)
            _WRAP_PROPERTY("label", Glib::ustring)
            _WRAP_PROPERTY("toggle", Toggle::RefPtr)

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
