/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * togglebutton.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-pattern.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/group.h>
#include <maiamm/core-event.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)
_PINCLUDE(maiamm/private/core-eventargs_p.h)

namespace Maia
{
    class ToggleToggledEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(ToggleToggledEventArgs, MaiaToggleToggledEventArgs, MAIA_TOGGLE_TOGGLED_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            _WRAP_METHOD(bool get_active () const, maia_toggle_toggled_event_args_get_active)
            _WRAP_METHOD(Glib::ustring get_button_name () const, maia_toggle_toggled_event_args_get_button_name)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_PROPERTY("active", bool)
            _WRAP_PROPERTY("button-name", Glib::ustring)
#endif
    };

    class ToggleGroup;

    class Toggle : public Group, public ItemPackable, public ItemMovable
    {
        _CLASS_GOBJECT(Toggle, MaiaToggle, MAIA_TOGGLE, Group, MaiaGroup)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)

        protected:
            _CTOR_DEFAULT()

            explicit Toggle(const Glib::ustring& inId);

            _WRAP_VFUNC(Glib::ustring get_main_data (), get_main_data)

            _WRAP_METHOD(Glib::ustring get_main_data () const, maia_toggle_get_main_data)

            _WRAP_METHOD(Glib::RefPtr<Item> get_main_content () const, maia_toggle_get_main_content, refreturn)

            _WRAP_VFUNC(bool get_active (), get_active)
            _WRAP_VFUNC(void set_active (bool inActive), set_active)

        public:
            _WRAP_METHOD(Glib::RefPtr<ToggleGroup> get_toggle_group () const, maia_toggle_get_toggle_group, refreturn)
            _WRAP_METHOD(void set_toggle_group (const Glib::RefPtr<ToggleGroup>& inToggleGroup), maia_toggle_set_toggle_group)

            _WRAP_METHOD(double get_border () const, maia_toggle_get_border)
            _WRAP_METHOD(void set_border (double inBorder), maia_toggle_set_border)

            _WRAP_METHOD(Graphic::ColorRefPtr get_shade_color () const, maia_toggle_get_shade_color, refreturn)
            _WRAP_METHOD(void set_shade_color (const Graphic::ColorRefPtr& inColor), maia_toggle_set_shade_color)

            _WRAP_METHOD(bool get_sensitive () const, maia_toggle_get_sensitive)
            _WRAP_METHOD(void set_sensitive (bool inSensitive = true), maia_toggle_set_sensitive)

            _WRAP_METHOD(Glib::ustring get_group () const, maia_toggle_get_group)
            _WRAP_METHOD(void set_group (const Glib::ustring& inGroup), maia_toggle_set_group)

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_toggle_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_toggle_set_font_description)

            _WRAP_METHOD(Glib::ustring get_label () const, maia_toggle_get_label)
            _WRAP_METHOD(void set_label (const Glib::ustring& inLabel), maia_toggle_set_label)

            _WRAP_METHOD(bool get_active () const, maia_toggle_get_active)
            _WRAP_METHOD(void set_active (bool inActive = true), maia_toggle_set_active)

            _WRAP_METHOD(bool get_hide_if_inactive () const, maia_toggle_get_hide_if_inactive)
            _WRAP_METHOD(void set_hide_if_inactive (bool inHideIfEmpty = true), maia_toggle_set_hide_if_inactive)

            _WRAP_METHOD(Glib::RefPtr<Core::Event> toggled () const, maia_toggle_get_toggled, refreturn)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_PROPERTY("sensitive", bool)
            _WRAP_PROPERTY("border", double)
            _WRAP_PROPERTY("shade-color", Graphic::ColorRefPtr)

            _WRAP_PROPERTY("toggled", Glib::RefPtr<Core::Event>)

            _WRAP_PROPERTY("group", Glib::ustring)
            _WRAP_PROPERTY("toggle-group", Glib::RefPtr<ToggleGroup>)
            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("label", Glib::ustring)
            _WRAP_PROPERTY("active", bool)
            _WRAP_PROPERTY("hide-if-inactive", bool)

            _WRAP_PROPERTY("row", guint)
            _WRAP_PROPERTY("rows", guint)

            _WRAP_PROPERTY("column", guint)
            _WRAP_PROPERTY("columns", guint)

            _WRAP_PROPERTY("xexpand", bool)
            _WRAP_PROPERTY("xfill", bool)
            _WRAP_PROPERTY("xshrink", bool)
            _WRAP_PROPERTY("xlimp", bool)
            _WRAP_PROPERTY("xalign", double)

            _WRAP_PROPERTY("yexpand", bool)
            _WRAP_PROPERTY("yfill", bool)
            _WRAP_PROPERTY("yshrink", bool)
            _WRAP_PROPERTY("ylimp", bool)
            _WRAP_PROPERTY("yalign", double)

            _WRAP_PROPERTY("top-padding", double)
            _WRAP_PROPERTY("bottom-padding", double)
            _WRAP_PROPERTY("left-padding", double)
            _WRAP_PROPERTY("right-padding", double)

            _WRAP_PROPERTY("backcell-pattern", Glib::RefPtr<Graphic::Pattern>)
#endif

        private:
            _WRAP_PROPERTY("main-data", Glib::ustring)
            _WRAP_PROPERTY("main-content", Glib::RefPtr<Item>)
    };
}
