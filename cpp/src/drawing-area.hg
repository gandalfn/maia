/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * drawing-area.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

#include <maiamm/graphic-color.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/item.h>
#include <maiamm/group.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    class DrawingArea : public Group, public ItemPackable, public ItemFocusable
    {
        _CLASS_GOBJECT(DrawingArea, MaiaDrawingArea, MAIA_DRAWING_AREA, Group, MaiaGroup)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit DrawingArea(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<DrawingArea>;

            static DrawingArea::RefPtr create (const Glib::ustring& inId)
            {
                MaiaDrawingArea* pDrawingArea = maia_drawing_area_new (inId.c_str ());

                return DrawingArea::RefPtr (new DrawingArea (pDrawingArea));
            }

            _WRAP_METHOD(Item::RefPtr get_selected () const, maia_drawing_area_get_selected, refreturn)
            _WRAP_METHOD(void set_selected (const Item::RefPtr& inSelected), maia_drawing_area_set_selected)

            _WRAP_METHOD(double get_anchor_size () const, maia_drawing_area_get_anchor_size)
            _WRAP_METHOD(void set_anchor_size (double inSize), maia_drawing_area_set_anchor_size)

            _WRAP_METHOD(double get_selected_border () const, maia_drawing_area_get_selected_border)
            _WRAP_METHOD(void set_selected_border (double inBorder), maia_drawing_area_set_selected_border)

            _WRAP_METHOD(double get_selected_border_line_width () const, maia_drawing_area_get_selected_border_line_width)
            _WRAP_METHOD(void set_selected_border_line_width (double inLineWidth), maia_drawing_area_set_selected_border_line_width)

            _WRAP_METHOD(Graphic::Color::RefPtr get_selected_border_color () const, maia_drawing_area_get_selected_border_color, refreturn)
            _WRAP_METHOD(void set_selected_border_color (const Graphic::Color::RefPtr& inColor), maia_drawing_area_set_selected_border_color)

            _WRAP_METHOD(bool touchscreen_mode () const, maia_drawing_area_get_touchscreen_mode)
            _WRAP_METHOD(void set_touchscreen_mode (bool inTouchscrenMode = true), maia_drawing_area_set_touchscreen_mode)


            _WRAP_PROPERTY("selected", Item::RefPtr)
            _WRAP_PROPERTY("anchor-size", double)
            _WRAP_PROPERTY("selected-border", double)
            _WRAP_PROPERTY("selected-border-line-width", double)
            _WRAP_PROPERTY("selected-border-color", Graphic::Color::RefPtr)
            _WRAP_PROPERTY("touchscreen-mode", bool)

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
