/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-notification.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        void (*Notification::append_observers_parent) (MaiaCoreNotification* self, MaiaCoreNotification* inNotification) = nullptr;

        static void _on_notification_callback (MaiaCoreNotification* inpNotification, gpointer inpData)
        {
            NotificationObserver* pObserver = (NotificationObserver*)g_object_get_data (G_OBJECT (inpData), "NotificationObserverCpp");
            Glib::RefPtr<Notification> pNotification = Glib::wrap (inpNotification, true);

            (*pObserver) (pNotification);
        }

        static void* _destroy_notify (gpointer inpData)
        {
            NotificationObserver* pSelf = (NotificationObserver*)inpData;
            pSelf->m_pNotification = nullptr;
            pSelf->unreference ();

            return 0;
        }

        void Notification::_append_observers_vfunc_callback(MaiaCoreNotification* self, MaiaCoreNotification* inpNotification)
        {
            if (Notification::append_observers_parent)
            {
                (*Notification::append_observers_parent) (self, inpNotification);
            }
            else if (MAIA_CORE_NOTIFICATION_GET_CLASS (self)->append_observers)
            {
                (*MAIA_CORE_NOTIFICATION_GET_CLASS (self)->append_observers) (self, inpNotification);
            }

            Notification* pNotification = (Notification*)g_object_get_data (G_OBJECT (inpNotification), "MaiaCoreNotificationCpp");
            if (pNotification)
            {
                Glib::RefPtr<Notification> pSelf = Glib::wrap(self, true);
                if (pSelf)
                {
                    for (auto observer : pNotification->m_Observers)
                    {
                        auto clone = observer->clone ();
                        clone->m_pNotification = pSelf->cpp_obj ();
                        maia_core_notification_add_object_observer (pSelf->gobj (), _on_notification_callback, clone->gobj ());
                        pSelf->add_destroy_notify_callback (clone, _destroy_notify);
                        clone->reference ();
                        pSelf->m_Observers.insert (clone);
                    }
                }
            }
        }

        Notification::Notification(const Glib::ustring& inName) :
            Glib::ObjectBase(0),
            Object((MaiaCoreObject*)(maia_core_notification_new (inName.c_str ())))
        {
            if (MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers != _append_observers_vfunc_callback)
            {
                append_observers_parent = MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers;
                MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers = &_append_observers_vfunc_callback;
            }

            g_object_set_data (G_OBJECT (gobj ()), "MaiaCoreNotificationCpp", this);
        }

        Notification::Notification(const Glib::ConstructParams& construct_params) :
            Object(construct_params)
        {
            if (MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers != _append_observers_vfunc_callback)
            {
                append_observers_parent = MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers;
                MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers = &_append_observers_vfunc_callback;
            }

            g_object_set_data (G_OBJECT (gobj ()), "MaiaCoreNotificationCpp", this);
        }

        Notification::Notification(MaiaCoreNotification* castitem) :
            Object((MaiaCoreObject*)(castitem))
        {
            if (MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers != _append_observers_vfunc_callback)
            {
                append_observers_parent = MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers;
                MAIA_CORE_NOTIFICATION_GET_CLASS (gobj ())->append_observers = &_append_observers_vfunc_callback;
            }

            g_object_set_data (G_OBJECT (gobj ()), "MaiaCoreNotificationCpp", this);
        }

        void Notification::add_observer (const Glib::RefPtr<NotificationObserver>& inpObserver)
        {
            maia_core_notification_add_object_observer (gobj (), _on_notification_callback, inpObserver->gobj ());
            add_destroy_notify_callback (inpObserver->cpp_obj (), _destroy_notify);
            inpObserver->reference ();
            m_Observers.insert (inpObserver->cpp_obj ());
        }

        void Notification::remove_observer (const Glib::RefPtr<NotificationObserver>& inpObserver)
        {
            remove_observer (inpObserver->cpp_obj ());
        }

        void Notification::remove_observer (NotificationObserver* inpObserver)
        {
            maia_core_notification_remove_observer (gobj (), _on_notification_callback, inpObserver->gobj ());
            remove_destroy_notify_callback (inpObserver->cpp_obj ());
            inpObserver->unreference ();
            inpObserver->m_pNotification = nullptr;
            m_Observers.erase (inpObserver);
        }

        Notifications::Notifications(const Glib::ConstructParams& construct_params) :
            Object(construct_params)
        {
        }

        Notifications::Notifications(MaiaCoreNotifications* castitem) :
            Object((MaiaCoreObject*)(castitem))
        {
        }
    }
}
