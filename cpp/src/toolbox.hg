/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * toolbox.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/item.h>
#include <maiamm/popup.h>
#include <maiamm/core-event.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/popup_p.h)
_PINCLUDE(maiamm/private/core-eventargs_p.h)

namespace Maia
{
    class ToolboxAddItemEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(ToolboxAddItemEventArgs, MaiaToolboxAddItemEventArgs, MAIA_TOOLBOX_ADD_ITEM_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            _WRAP_METHOD(Glib::RefPtr<Item> get_item () const, maia_toolbox_add_item_event_args_get_item, refreturn)
            _WRAP_METHOD(bool get_parent () const, maia_toolbox_add_item_event_args_get_parent)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_PROPERTY("item", Glib::RefPtr<Item>)
            _WRAP_PROPERTY("parent", bool)
#endif    };

    class ToolboxCurrentItemEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(ToolboxCurrentItemEventArgs, MaiaToolboxCurrentItemEventArgs, MAIA_TOOLBOX_CURRENT_ITEM_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            _WRAP_METHOD(Glib::ustring get_item_name () const, maia_toolbox_current_item_event_args_get_item_name)
            _WRAP_METHOD(GType get_item_type () const, maia_toolbox_current_item_event_args_get_item_type)
            _WRAP_METHOD(Glib::ustring get_parent_name () const, maia_toolbox_current_item_event_args_get_parent_name)
            _WRAP_METHOD(GType get_parent_type () const, maia_toolbox_current_item_event_args_get_parent_type)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_PROPERTY("item-name", Glib::ustring)
            _WRAP_PROPERTY("item-type", GType)
            _WRAP_PROPERTY("parent-name", Glib::ustring)
            _WRAP_PROPERTY("parent-type", GType)
#endif
    };

    class Toolbox : public Popup
    {
        _CLASS_GOBJECT(Toolbox, MaiaToolbox, MAIA_TOOLBOX, Popup, MaiaPopup)

        protected:
            _CTOR_DEFAULT()

            explicit Toolbox(const Glib::ustring& inId);

        public:
            static Glib::RefPtr<Toolbox> create (const Glib::ustring& inId)
            {
                MaiaToolbox* pToolbox = maia_toolbox_new (inId.c_str ());

                return Glib::RefPtr<Toolbox> (new Toolbox (pToolbox));
            }

            _WRAP_METHOD(Glib::RefPtr<Core::Event> add_item () const, maia_toolbox_get_add_item, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> remove_item () const, maia_toolbox_get_remove_item, refreturn)
            _WRAP_METHOD(Glib::RefPtr<Core::Event> current_item () const, maia_toolbox_get_current_item, refreturn)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_PROPERTY("add-item", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("remove-item", Glib::RefPtr<Core::Event>)
            _WRAP_PROPERTY("current-item", Glib::RefPtr<Core::Event>)
#endif
    };
}
