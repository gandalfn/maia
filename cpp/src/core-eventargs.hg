/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-args.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

#define MAIA_CORE_EVENT_ARGS_DEFINE(klass) \
    static Glib::ObjectBase* wrap_new(GObject* object) \
    { \
        return new klass ((MaiaCoreEventArgs*)object); \
    } \
    klass () : \
        Glib::ObjectBase ("##klass##"), \
        Maia::Core::EventArgs (& klass ::wrap_new) \
    { \
    } \
    klass (MaiaCoreEventArgs* inpSelf) : \
        Glib::ObjectBase ("##klass##"), \
        Maia::Core::EventArgs (inpSelf) \
    { \
    }

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class EventArgs : public Glib::Object
        {
            _CLASS_GOBJECT(EventArgs, MaiaCoreEventArgs, MAIA_CORE_EVENT_ARGS, Glib::Object, GObject)

            protected:
                EventArgs (Glib::WrapNewFunction inWrapFunc);

#m4 _CONVERSION(`Glib::VariantBase',`GVariant*',`g_variant_ref (($3).gobj())')
#m4 _CONVERSION(`GVariant*',`const Glib::VariantBase&',`Glib::wrap($3, true)')
                _WRAP_VFUNC(Glib::VariantBase get_serialize (), get_serialize)
                _WRAP_VFUNC(void set_serialize (const Glib::VariantBase& inData), set_serialize, custom_vfunc_callback)
                _WRAP_VFUNC(void accumulate (const Glib::RefPtr<EventArgs>& inOther), accumulate)

                static Glib::VariantBase serialize (const Glib::ustring& inSignature, ...);
                static void unserialize (const Glib::VariantBase& inData, const Glib::ustring& inSignature, ...);

            public:
                _WRAP_METHOD(int get_sequence (), maia_core_event_args_get_sequence)
                _WRAP_METHOD(Glib::VariantBase get_serialize (), maia_core_event_args_get_serialize)
                _WRAP_METHOD(void set_serialize (const Glib::VariantBase& inData), maia_core_event_args_set_serialize)
                _WRAP_METHOD(void accumulate (const Glib::RefPtr<EventArgs>& inOther), maia_core_event_args_accumulate)
                _WRAP_METHOD(Glib::RefPtr<EventArgs> copy () const, maia_core_event_args_copy, refreturn)

                _WRAP_PROPERTY("sequence", int)
                _WRAP_PROPERTY("serialize", Glib::VariantBase)
        };
    }
}
