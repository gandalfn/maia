/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-args.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-serializable.h>
#include <maiamm/protocol-message.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS

typedef void (*MaiaCoreEventArgsRegisterFunc) ();

struct MaiaCoreEventArgsLoadVector
{
    MaiaCoreEventArgsRegisterFunc func;
    MaiaCoreEventArgsLoadVector* next;
};

#define MAIA_CORE_EVENT_ARGS_REGISTER_WITH_NAMESPACE(protobuf,message,ns,klass)\
    MaiaCoreEventArgsLoadVector klass ::s_LoadEntry;                           \
                                                                               \
    void klass ::register_protobuf()                                           \
    {                                                                          \
        maia_core_event_args_register_protocol ("gtkmm__CustomObject_" #ns "++" #klass ,\
                                                message ,                      \
                                                protobuf );                    \
        klass ::create ();                                                     \
    }                                                                          \
                                                                               \
    void klass ::constructor ()                                                \
    {                                                                          \
        s_LoadEntry.func = register_protobuf;                                  \
        s_LoadEntry.next = EventArgs::s_LoadVector;                            \
        EventArgs::s_LoadVector = &s_LoadEntry;                                \
    }

#define MAIA_CORE_EVENT_ARGS_DEFINE_WITH_NAMESPACE(ns,klass)                   \
    class klass : public Maia::Core::EventArgs                                 \
    {                                                                          \
        public:                                                                \
            static Glib::RefPtr< klass > create ()                             \
            {                                                                  \
                return Glib::RefPtr< klass > (new klass ());                   \
            }                                                                  \
            template<typename T, typename... Args>                             \
            static Glib::RefPtr< klass > create (const T& inVal, Args... inArgs)\
            {                                                                  \
                klass * pThis = new klass ();                                  \
                FieldsClosure closure (pThis);                                 \
                closure.add_field_value (inVal, inArgs...);                    \
                return Glib::RefPtr< klass > (pThis);                          \
            }                                                                  \
            static Glib::ObjectBase* wrap_new(GObject* object)                 \
            {                                                                  \
                return new klass ((MaiaCoreEventArgs*)object);                 \
            }                                                                  \
        protected:                                                             \
            klass () :                                                         \
                Glib::ObjectBase(#ns "::" #klass),                             \
                Maia::Core::EventArgs (& klass ::wrap_new)                     \
            {                                                                  \
            }                                                                  \
            klass (MaiaCoreEventArgs* inpSelf) :                               \
                Glib::ObjectBase(#ns "::" #klass),                             \
                Maia::Core::EventArgs (inpSelf)                                \
            {                                                                  \
            }                                                                  \
            virtual void unserialize_vfunc (const Glib::VariantBase& inData)   \
            {                                                                  \
                maia_core_event_args_get_protocol_buffer_message (gobj ());    \
                Maia::Core::EventArgs::unserialize_vfunc (inData);             \
            }                                                                  \
        private:                                                               \
            static MaiaCoreEventArgsLoadVector s_LoadEntry;                    \
                                                                               \
            static void register_protobuf();                                   \
            __attribute__ ((constructor))                                      \
            static void constructor ();                                        \
    };

#define MAIA_CORE_EVENT_ARGS_REGISTER(protobuf,message,klass)                  \
    MaiaCoreEventArgsLoadVector klass ::s_LoadEntry;                           \
                                                                               \
    void klass ::register_protobuf()                                           \
    {                                                                          \
        maia_core_event_args_register_protocol ("gtkmm__CustomObject_" #klass ,\
                                                message ,                      \
                                                protobuf );                    \
        klass ::create ();                                                     \
    }                                                                          \
                                                                               \
    void klass ::constructor ()                                                \
    {                                                                          \
        s_LoadEntry.func = & klass ::register_protobuf;                        \
        s_LoadEntry.next = EventArgs::s_LoadVector;                            \
        EventArgs::s_LoadVector = &s_LoadEntry;                                \
    }

#define MAIA_CORE_EVENT_ARGS_DEFINE(klass)                                     \
    class klass : public Maia::Core::EventArgs                                 \
    {                                                                          \
        public:                                                                \
            static Glib::RefPtr< klass > create ()                             \
            {                                                                  \
                return Glib::RefPtr< klass > (new klass ());                   \
            }                                                                  \
            template<typename T, typename... Args>                             \
            static Glib::RefPtr< klass > create (const T& inVal, Args... inArgs)\
            {                                                                  \
                klass * pThis = new klass ();                                  \
                FieldsClosure closure (pThis);                                 \
                closure.add_field_value (inVal, inArgs...);                    \
                return Glib::RefPtr< klass > (pThis);                          \
            }                                                                  \
            static Glib::ObjectBase* wrap_new(GObject* object)                 \
            {                                                                  \
                return new klass ((MaiaCoreEventArgs*)object);                 \
            }                                                                  \
        protected:                                                             \
            klass () :                                                         \
                Glib::ObjectBase(#klass),                                      \
                Maia::Core::EventArgs (& klass ::wrap_new)                     \
            {                                                                  \
            }                                                                  \
            klass (MaiaCoreEventArgs* inpSelf) :                               \
                Glib::ObjectBase(#klass),                                      \
                Maia::Core::EventArgs (inpSelf)                                \
            {                                                                  \
            }                                                                  \
            virtual void unserialize_vfunc (const Glib::VariantBase& inData)   \
            {                                                                  \
                maia_core_event_args_get_protocol_buffer_message (gobj ());    \
                Maia::Core::EventArgs::unserialize_vfunc (inData);             \
            }                                                                  \
        private:                                                               \
            static MaiaCoreEventArgsLoadVector s_LoadEntry;                    \
                                                                               \
            static void register_protobuf();                                   \
            __attribute__ ((constructor))                                      \
            static void constructor ();                                        \
    };

#define MAIA_CORE_EVENT_ARGS_CONSTRUCTOR(signature,klass)                      \
    static Glib::ObjectBase* wrap_new(GObject* object)                         \
    {                                                                          \
        return new klass ((MaiaCoreEventArgs*)object);                         \
    }                                                                          \
    klass () :                                                                 \
        Glib::ObjectBase (#klass),                                             \
        Maia::Core::EventArgs (signature, & klass ::wrap_new)                  \
    {                                                                          \
    }                                                                          \
    klass (MaiaCoreEventArgs* inpSelf) :                                       \
        Glib::ObjectBase (#klass),                                             \
        Maia::Core::EventArgs (inpSelf)                                        \
    {                                                                          \
    }

#endif

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class EventArgsField
        {
            public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                inline EventArgsField (MaiaCoreEventArgs* inpEventArgs, const Glib::ustring& inField, int inIndex = 0) :
                    m_pEventArgs (inpEventArgs),
                    m_Field (inField),
                    m_Index (inIndex)
                {

                }
#endif

                template <typename T>
                inline EventArgsField& operator=(const T& inVal);

                template <typename T>
                inline operator T() const;

                template <typename T>
                inline EventArgsField& operator=(const std::vector<T>& inVal);

                template <typename T>
                inline operator std::vector<T>() const;

                template <typename T>
                inline int push_back (T inVal);

                int size () const
                {
                    return maia_core_event_args_get_field_length (const_cast<MaiaCoreEventArgs*> (m_pEventArgs), m_Field.c_str ());
                }

                EventArgsField at (int inIndex) const
                {
                    if (!maia_core_event_args_is_array (m_pEventArgs, m_Field.c_str ()))
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "Cannot get field %s index %i not an array", m_Field.c_str (), inIndex);
                        throw Glib::Error(error);
                    }

                    if (inIndex > maia_core_event_args_get_field_length (m_pEventArgs, m_Field.c_str ()))
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "%i out of bound of field %s", inIndex, m_Field.c_str ());
                        throw Glib::Error(error);
                    }

                    return EventArgsField (m_pEventArgs, m_Field, inIndex);
                }

                EventArgsField operator[] (int inIndex) const
                {
                    if (!maia_core_event_args_is_array (m_pEventArgs, m_Field.c_str ()))
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "Cannot get field %s index %i not an array", m_Field.c_str (), inIndex);
                        throw Glib::Error(error);
                    }

                    if (inIndex >= maia_core_event_args_get_field_length (m_pEventArgs, m_Field.c_str ()))
                    {
                        maia_core_event_args_resize (m_pEventArgs, m_Field.c_str (), inIndex + 1);
                    }

                    return EventArgsField (m_pEventArgs, m_Field, inIndex);
                }

                Protocol::Message::Field operator[] (const Glib::ustring& inField) const
                {
                    GValue* val = maia_core_event_args_get (m_pEventArgs, m_Field.c_str (), m_Index);
                    if (!G_VALUE_HOLDS (val, MAIA_PROTOCOL_TYPE_MESSAGE))
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "Cannot get field %s in %s not a message", inField.c_str (), m_Field.c_str ());
                        throw Glib::Error(error);
                    }
                    MaiaProtocolMessage* pMessage = MAIA_PROTOCOL_MESSAGE (g_value_get_object (val));
                    if (!pMessage)
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "Cannot get field %s in %s not a message", inField.c_str (), m_Field.c_str ());
                        throw Glib::Error(error);
                    }
                    if (!maia_protocol_message_contains (pMessage, inField.c_str ()))
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "Field %s not found in %s", inField.c_str (), m_Field.c_str ());
                        throw Glib::Error(error);
                    }

                    return Protocol::Message::Field (pMessage, inField);
                }

            private:
                MaiaCoreEventArgs* m_pEventArgs;
                Glib::ustring      m_Field;
                int                m_Index;

                // no copy assignment
                EventArgsField& operator=(const EventArgsField&) { return *this; }
        };

        class EventArgsFields
        {
            public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                inline EventArgsFields (MaiaCoreEventArgs* inpEventArgs) :
                    m_pEventArgs (inpEventArgs)
                {
                }
#endif

                EventArgsField operator[] (const Glib::ustring& inField) const
                {
                    if (!maia_core_event_args_contains (m_pEventArgs, inField.c_str ()))
                    {
                        GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                          "Field %s not found", inField.c_str ());
                        throw Glib::Error(error);
                    }
                    return EventArgsField (m_pEventArgs, inField);
                }

            private:
                MaiaCoreEventArgs* m_pEventArgs;

                // no copy assignment
                EventArgsFields& operator=(const EventArgsFields&) { return *this; }
        };

        class EventArgs : public Glib::Object, public Core::Serializable
        {
            _CLASS_GOBJECT(EventArgs, MaiaCoreEventArgs, MAIA_CORE_EVENT_ARGS, Glib::Object, GObject)
            _IMPLEMENTS_INTERFACE(Serializable)

            _IGNORE(maia_core_event_args_get_protocol_buffer_message, maia_core_event_args_get, maia_core_event_args_set,
                    maia_core_event_args_contains, maia_core_event_args_is_array, maia_core_event_args_add_value,
                    maia_core_event_args_get_field_length, maia_core_event_args_clear, maia_core_event_args_resize)

            protected:
                explicit EventArgs (Glib::WrapNewFunction inWrapFunc);
                explicit EventArgs (const Glib::ustring& inSignature, Glib::WrapNewFunction inWrapFunc);

#m4 _CONVERSION(`Glib::VariantBase',`GVariant*',`g_variant_ref (($3).gobj())')
#m4 _CONVERSION(`GVariant*',`const Glib::VariantBase&',`Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaCoreEventArgs*', `const Glib::RefPtr<EventArgs>&', `Glib::wrap($3, true)')
                _WRAP_VFUNC(Glib::VariantBase serialize (), get_serialize)
                _WRAP_VFUNC(void unserialize (const Glib::VariantBase& inData), set_serialize, custom_vfunc_callback)
                _WRAP_VFUNC(void accumulate (const Glib::RefPtr<EventArgs>& inOther), accumulate)
#m4 _CONVERSION(`MaiaCoreEventArgs*', `const Glib::RefPtr<EventArgs>&', `Glib::wrap($3)')

                template<typename T>
                Glib::VariantBase serialize (T inVal);

                template<typename T, typename... Args>
                Glib::VariantBase serialize (T inVal, Args... inArgs);

                template<typename T>
                void unserialize (const Glib::VariantBase& inVariant, T& inVal);

                template<typename T, typename... Args>
                void unserialize (const Glib::VariantBase& inVariant, T& inVal, Args&... inArgs);

            public:
                typedef EventArgsField Field;
                typedef EventArgsFields Fields;

                static void init ();

                _WRAP_METHOD(int get_sequence (), maia_core_event_args_get_sequence)
                _WRAP_METHOD(Glib::VariantBase serialize (), maia_core_event_args_get_serialize)
                _WRAP_METHOD(void unserialize (const Glib::VariantBase& inData), maia_core_event_args_set_serialize)
                _WRAP_METHOD(void accumulate (const Glib::RefPtr<EventArgs>& inOther), maia_core_event_args_accumulate)
                _WRAP_METHOD(Glib::RefPtr<EventArgs> copy () const, maia_core_event_args_copy, refreturn)

                _WRAP_PROPERTY("sequence", int)

                Fields fields () const
                {
                    return Fields (const_cast<MaiaCoreEventArgs*> (gobj ()));
                }

            protected:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                static MaiaCoreEventArgsLoadVector* s_LoadVector;

                class FieldsClosure
                {
                    public:
                        FieldsClosure (EventArgs* inpEventArgs) :
                            m_pEventArgs (inpEventArgs),
                            m_CurrentColumn ("")
                        {
                        }

                        template <typename T>
                        void add_field_value (const T& inValue)
                        {
                            if (!m_CurrentColumn.empty ())
                            {
                                set_value (inValue);
                                m_CurrentColumn = "";
                            }
                        }

                        void add_field_value (const char* inValue)
                        {
                            if (!m_CurrentColumn.empty ())
                            {
                                set_value ((Glib::ustring)inValue);
                                m_CurrentColumn = "";
                            }
                        }

                        template <typename... Args>
                        void add_field_value (const Glib::ustring& inValue, Args... inArgs)
                        {
                            if (!m_CurrentColumn.empty ())
                            {
                                set_value (inValue);
                                m_CurrentColumn = "";
                            }
                            else
                            {
                                m_CurrentColumn = inValue;
                            }

                            add_field_value (inArgs...);
                        }

                        template <typename... Args>
                        void add_field_value (const char* inValue, Args... inArgs)
                        {
                            if (!m_CurrentColumn.empty ())
                            {
                                set_value (Glib::ustring (inValue));
                                m_CurrentColumn = "";
                            }
                            else
                            {
                                m_CurrentColumn = Glib::ustring (inValue);
                            }

                            add_field_value (inArgs...);
                        }

                        template <typename T, typename... Args>
                        void add_field_value (const T& inValue, Args... inArgs)
                        {
                            if (!m_CurrentColumn.empty ())
                            {
                                set_value (inValue);
                                m_CurrentColumn = "";
                            }

                            add_field_value (inArgs...);
                        }

                    private:
                        EventArgs*      m_pEventArgs;
                        Glib::ustring   m_CurrentColumn;

                        template <typename T>
                        void set_value (const T& inValue)
                        {
                            if (!m_CurrentColumn.empty ())
                            {
                                if (m_CurrentColumn.find ("::") != Glib::ustring::npos)
                                {
                                    gchar** columns = g_strsplit (m_CurrentColumn.c_str (), "::", -1);
                                    if (columns)
                                    {
                                        Glib::ustring column = columns[0];
                                        Field field = m_pEventArgs->fields ()[column];

                                        if (columns[1])
                                        {
                                            column = columns[1];
                                            Protocol::Message::Field f = field[column];

                                            for (int cpt = 2; columns[cpt]; ++cpt)
                                            {
                                                column = columns[cpt];
                                                f = f[column];
                                            }

                                            f = inValue;
                                        }
                                        else
                                        {
                                            field = inValue;
                                        }
                                        g_strfreev (columns);
                                    }
                                }
                                else
                                {
                                    m_pEventArgs->fields ()[m_CurrentColumn] = inValue;
                                }
                            }
                        }
                };
#endif

            private:
                _WRAP_PROPERTY("serialize", Glib::VariantBase)

                class SerializeClosure
                {
                    public:
                        enum class EContainerType
                        {
                            UNKNOWN,
                            BASIC,
                            TUPLE,
                            ARRAY
                        };

                    public:
                        SerializeClosure (const GVariantType* inType);
                        virtual ~SerializeClosure ();

                        Glib::VariantBase get ();
                        void set (const Glib::VariantBase& inVal);


                    private:
                        EContainerType                 m_ContainerType;
                        GVariantType*                  m_pType;
                        const GVariantType*            m_pCurrentType;
                        Glib::VariantBase              m_Variant;
                        std::vector<SerializeClosure*> m_Childs;
                };

                class UnserializeClosure
                {
                    public:
                        enum class EContainerType
                        {
                            UNKNOWN,
                            BASIC,
                            TUPLE,
                            ARRAY
                        };

                    public:
                        UnserializeClosure (const Glib::VariantBase& inVariant);
                        virtual ~UnserializeClosure ();

                        Glib::VariantBase get ();

                    private:
                        EContainerType                   m_ContainerType;
                        Glib::VariantBase                m_Variant;
                        std::vector<UnserializeClosure*> m_Childs;
                        int                              m_Index;
                };

                Glib::ustring       m_Signature;
                SerializeClosure*   m_pSerialize;
        };

        template<typename T>
        Glib::VariantBase EventArgs::serialize (T inVal)
        {
            if (!m_pSerialize)
            {
                m_pSerialize = new SerializeClosure (g_variant_type_new (m_Signature.c_str ()));
            }
            m_pSerialize->set (Glib::Variant<T>::create (inVal));

            Glib::VariantBase ret = m_pSerialize->get ();
            delete m_pSerialize; m_pSerialize = nullptr;

            return ret;
        }

        template<typename T, typename... Args>
        Glib::VariantBase EventArgs::serialize (T inVal, Args... inArgs)
        {
            if (!m_pSerialize)
            {
                m_pSerialize = new SerializeClosure (g_variant_type_new (m_Signature.c_str ()));
            }
            m_pSerialize->set (Glib::Variant<T>::create (inVal));

            return serialize (inArgs...);
        }

        template<typename T>
        void EventArgs::unserialize (const Glib::VariantBase& inVariant, T& inVal)
        {
            UnserializeClosure* pClosure = (UnserializeClosure*)steal_data ("Maia::Core::EventArgs::UnserializeClosure");
            if (!pClosure)
            {
                pClosure = new UnserializeClosure (inVariant);
            }
            Glib::VariantBase variant = pClosure->get ();

            delete pClosure; pClosure = nullptr;

            inVal = Glib::VariantBase::cast_dynamic< Glib::Variant<T> > (variant).get ();
        }

        template<typename T, typename... Args>
        void EventArgs::unserialize (const Glib::VariantBase& inVariant, T& inVal, Args&... inArgs)
        {
            UnserializeClosure* pClosure = (UnserializeClosure*)get_data ("Maia::Core::EventArgs::UnserializeClosure");
            if (!pClosure)
            {
                pClosure = new UnserializeClosure (inVariant);
                set_data ("Maia::Core::EventArgs::UnserializeClosure", (void*)pClosure);
            }

            Glib::VariantBase variant = pClosure->get ();
            inVal = Glib::VariantBase::cast_dynamic< Glib::Variant<T> > (variant).get ();

            unserialize (inVariant, inArgs...);
        }

        template <typename T>
        inline EventArgsField& EventArgsField::operator= (const T& inVal)
        {
            Glib::Value<T> value;
            value.init(Glib::Value<T>::value_type());

            value.set(inVal);
            maia_core_event_args_set (m_pEventArgs, m_Field.c_str (), m_Index, value.gobj ());

            return *this;
        }

        template <typename T>
        inline EventArgsField::operator T () const
        {
            Glib::Value<T> value;
            value.init(Glib::Value<T>::value_type());

            GValue* val = maia_core_event_args_get (m_pEventArgs, m_Field.c_str (), m_Index);
            g_value_copy (val, value.gobj ());

            return value.get ();
        }

        template <typename T>
        inline EventArgsField& EventArgsField::operator= (const std::vector<T>& inVal)
        {
            if (!maia_core_event_args_is_array (m_pEventArgs, m_Field.c_str ()))
            {
                GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                  "Cannot set array value for field %s not an array", m_Field.c_str ());
                throw Glib::Error(error);
            }

            maia_core_event_args_clear (m_pEventArgs, m_Field.c_str ());
            for (const T& val : inVal)
            {
                Glib::Value<T> value;
                value.init(Glib::Value<T>::value_type());

                value.set(val);
                maia_core_event_args_add_value (m_pEventArgs, m_Field.c_str (), value.gobj ());
            }

            return *this;
        }

        template <typename T>
        inline EventArgsField::operator std::vector<T> () const
        {
            std::vector<T> ret;

            if (!maia_core_event_args_is_array (m_pEventArgs, m_Field.c_str ()))
            {
                GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                  "Cannot get array value for field %s not an array", m_Field.c_str ());
                throw Glib::Error(error);
            }

            for (int cpt = 0; cpt < maia_core_event_args_get_field_length (m_pEventArgs, m_Field.c_str ()); ++cpt)
            {
                Glib::Value<T> value;
                value.init(Glib::Value<T>::value_type());

                GValue* val = maia_core_event_args_get (m_pEventArgs, m_Field.c_str (), cpt);
                g_value_copy (val, value.gobj ());

                ret.push_back (value.get ());
            }

            return ret;
        }

        template <typename T>
        inline int EventArgsField::push_back (T inVal)
        {
            if (!maia_core_event_args_is_array (m_pEventArgs, m_Field.c_str ()))
            {
                GError* const error = g_error_new(MAIA_PROTOCOL_ERROR, MAIA_PROTOCOL_ERROR_INVALID_FIELD,
                                                  "Cannot push back value in field %s not an array", m_Field.c_str ());
                throw Glib::Error(error);
            }

            Glib::Value<T> value;
            value.init(Glib::Value<T>::value_type());

            value.set(inVal);
            return maia_core_event_args_add_value (m_pEventArgs, m_Field.c_str (), value.gobj ());
        }
    }
}
