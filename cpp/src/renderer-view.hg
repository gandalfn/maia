/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * renderer-view.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/group.h>
#include <maiamm/graphic-renderer.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    class RendererView : public Group, public ItemPackable, public ItemMovable
    {
        _CLASS_GOBJECT(RendererView, MaiaRendererView, MAIA_RENDERER_VIEW, Group, MaiaGroup)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)

        protected:
            _CTOR_DEFAULT()

            explicit RendererView(const Glib::ustring& inId);

        public:
            static Glib::RefPtr<RendererView> create (const Glib::ustring& inName, const Glib::RefPtr<Graphic::Renderer>& inpRenderer)
            {
                RendererView* pView = new RendererView (maia_renderer_view_new (inName.c_str (), const_cast<MaiaGraphicRenderer*> (inpRenderer->get_renderer ()->gobj ())));
                pView->m_pRenderer = inpRenderer;
                return Glib::RefPtr<RendererView> (pView);
            }

            _WRAP_METHOD(Glib::RefPtr<Graphic::RendererLooper> get_looper () const, maia_renderer_view_get_looper)
            _WRAP_METHOD(void set_looper (const Glib::RefPtr<Graphic::RendererLooper>& inpLooper), maia_renderer_view_set_looper)

            _WRAP_METHOD(bool paused () const, maia_renderer_view_get_pause)
            _WRAP_METHOD(void set_pause (bool inPause = true), maia_renderer_view_set_pause)

            _IGNORE (maia_renderer_view_get_renderer, maia_renderer_view_set_renderer)

            Glib::RefPtr<Graphic::Renderer> get_renderer ();
            void set_renderer (const Glib::RefPtr<Graphic::Renderer>& inpRenderer);

            _WRAP_PROPERTY("looper", Glib::RefPtr<Graphic::RendererLooper>)

            _WRAP_PROPERTY("pause", bool)

            _WRAP_PROPERTY("can-focus", bool)

            _WRAP_PROPERTY("row", guint)
            _WRAP_PROPERTY("rows", guint)

            _WRAP_PROPERTY("column", guint)
            _WRAP_PROPERTY("columns", guint)

            _WRAP_PROPERTY("xexpand", bool)
            _WRAP_PROPERTY("xfill", bool)
            _WRAP_PROPERTY("xshrink", bool)
            _WRAP_PROPERTY("xlimp", bool)
            _WRAP_PROPERTY("xalign", double)

            _WRAP_PROPERTY("yexpand", bool)
            _WRAP_PROPERTY("yfill", bool)
            _WRAP_PROPERTY("yshrink", bool)
            _WRAP_PROPERTY("ylimp", bool)
            _WRAP_PROPERTY("yalign", double)

            _WRAP_PROPERTY("top-padding", double)
            _WRAP_PROPERTY("bottom-padding", double)
            _WRAP_PROPERTY("left-padding", double)
            _WRAP_PROPERTY("right-padding", double)

            _WRAP_PROPERTY("backcell-pattern", Glib::RefPtr<Graphic::Pattern>)

      private:
            Glib::RefPtr<Graphic::Renderer> m_pRenderer;

            _WRAP_PROPERTY("renderer", Glib::RefPtr<Graphic::RendererObject>)
    };
}
