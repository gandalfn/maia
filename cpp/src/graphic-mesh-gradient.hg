/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-mesh-gradient.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-point.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-path.h>
#include <maiamm/graphic-rectangle.h>
#include <maiamm/graphic-gradient.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/graphic-gradient_p.h)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        class MeshGradient : public Gradient
        {
            _CLASS_GOBJECT(MeshGradient, MaiaGraphicMeshGradient, MAIA_GRAPHIC_MESH_GRADIENT, Gradient, MaiaGraphicGradient)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<MeshGradient>;

                static MeshGradient::RefPtr create ()
                {
                    MaiaGraphicMeshGradient* pGradient = maia_graphic_mesh_gradient_new ();
                    return MeshGradient::RefPtr (new MeshGradient (pGradient));
                }

                _IGNORE(maia_graphic_mesh_gradient_new)
        };

        class MeshGradientPatch : public Core::Object
        {
            _CLASS_GOBJECT(MeshGradientPatch, MaiaGraphicMeshGradientPatch, MAIA_GRAPHIC_MESH_GRADIENT_PATCH, Core::Object, MaiaCoreObject)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<MeshGradientPatch>;

                static MeshGradientPatch::RefPtr create (const Glib::RefPtr<Path>& inPath)
                {
                    MaiaGraphicMeshGradientPatch* pGradient = maia_graphic_mesh_gradient_patch_new (const_cast<MaiaGraphicPath*> (inPath->gobj ()));
                    return MeshGradientPatch::RefPtr (new MeshGradientPatch (pGradient));
                }

                _IGNORE(maia_graphic_mesh_gradient_patch_new)

                _WRAP_METHOD(Path::RefPtr get_path () const, maia_graphic_mesh_gradient_patch_get_path, refreturn)
        };

        class MeshGradientLinePatch : public MeshGradientPatch
        {
            _CLASS_GOBJECT(MeshGradientLinePatch, MaiaGraphicMeshGradientLinePatch, MAIA_GRAPHIC_MESH_GRADIENT_LINE_PATCH, MeshGradientPatch, MaiaGraphicMeshGradientPatch)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<MeshGradientLinePatch>;

                static MeshGradientLinePatch::RefPtr create (const Rectangle& inRectangle, const std::vector<Color::RefPtr>& inColors)
                {
                    int nb = std::min ((int)inColors.size (), 4);
                    MaiaGraphicColor** colors = new MaiaGraphicColor*[nb];
                    int cpt = 0;

                    for (std::vector<Color::RefPtr>::const_iterator iter = inColors.begin (); cpt < 4 && iter != inColors.end (); ++iter, ++cpt)
                    {
                        colors[cpt] = const_cast<MaiaGraphicColor*> ((*iter)->gobj ());
                    }

                    MaiaGraphicMeshGradientLinePatch* pPatch = maia_graphic_mesh_gradient_line_patch_new (const_cast<MaiaGraphicRectangle*> (inRectangle.gobj ()), colors, nb);
                    delete colors; colors = nullptr;
                    return MeshGradientLinePatch::RefPtr (new MeshGradientLinePatch (pPatch));
                }

                _IGNORE(maia_graphic_mesh_gradient_line_patch_new)
        };

        class MeshGradientArcPatch : public MeshGradientPatch
        {
            _CLASS_GOBJECT(MeshGradientArcPatch, MaiaGraphicMeshGradientArcPatch, MAIA_GRAPHIC_MESH_GRADIENT_ARC_PATCH, MeshGradientPatch, MaiaGraphicMeshGradientPatch)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<MeshGradientArcPatch>;

                static MeshGradientArcPatch::RefPtr create (const Point& inCenter, double inStart, double inEnd, double inRadius, const std::vector<Color::RefPtr>& inColors)
                {
                    int nb = std::min ((int)inColors.size (), 4);
                    MaiaGraphicColor** colors = new MaiaGraphicColor*[nb];
                    int cpt = 0;

                    for (std::vector<Color::RefPtr>::const_iterator iter = inColors.begin (); cpt < 4 && iter != inColors.end (); ++iter, ++cpt)
                    {
                        colors[cpt] = const_cast<MaiaGraphicColor*> ((*iter)->gobj ());
                    }

                    MaiaGraphicMeshGradientArcPatch* pPatch = maia_graphic_mesh_gradient_arc_patch_new (const_cast<MaiaGraphicPoint*> (inCenter.gobj ()),
                                                                                                        inStart, inEnd, inRadius, colors, nb);
                    delete colors; colors = nullptr;
                    return MeshGradientArcPatch::RefPtr (new MeshGradientArcPatch (pPatch));
                }

                _IGNORE(maia_graphic_mesh_gradient_arc_patch_new)
        };

        class MeshGradientPatchControl : public Core::Object
        {
            _CLASS_GOBJECT(MeshGradientPatchControl, MaiaGraphicMeshGradientPatchControl, MAIA_GRAPHIC_MESH_GRADIENT_PATCH_CONTROL, Core::Object, MaiaCoreObject)

            public:
                using RefPtr = Glib::RefPtr<MeshGradientPatchControl>;
        };

        class MeshGradientPatchControlPoint : public MeshGradientPatchControl
        {
            _CLASS_GOBJECT(MeshGradientPatchControlPoint, MaiaGraphicMeshGradientPatchControlPoint, MAIA_GRAPHIC_MESH_GRADIENT_PATCH_CONTROL_POINT, MeshGradientPatchControl, MaiaGraphicMeshGradientPatchControl)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<class MeshGradientPatchControlPoint>;

                static MeshGradientPatchControlPoint::RefPtr create (unsigned int inNum, const Point& inPoint)
                {
                    MaiaGraphicMeshGradientPatchControlPoint* pPoint = maia_graphic_mesh_gradient_patch_control_point_new (inNum, const_cast<MaiaGraphicPoint*> (inPoint.gobj ()));
                    return MeshGradientPatchControlPoint::RefPtr (new MeshGradientPatchControlPoint (pPoint));
                }

                _WRAP_METHOD(guint get_num () const, maia_graphic_mesh_gradient_patch_control_point_get_num)
                _WRAP_METHOD(void get_point (Point& outPoint) const, maia_graphic_mesh_gradient_patch_control_point_get_point)
        };

        class MeshGradientPatchCornerColor : public MeshGradientPatchControl
        {
            _CLASS_GOBJECT(MeshGradientPatchCornerColor, MaiaGraphicMeshGradientPatchCornerColor, MAIA_GRAPHIC_MESH_GRADIENT_PATCH_CORNER_COLOR, MeshGradientPatchControl, MaiaGraphicMeshGradientPatchControl)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<class MeshGradientPatchCornerColor>;

                static MeshGradientPatchCornerColor::RefPtr create (unsigned int inNum, const Color::RefPtr& inColor)
                {
                    MaiaGraphicMeshGradientPatchCornerColor* pCorner = maia_graphic_mesh_gradient_patch_corner_color_new (inNum, const_cast<MaiaGraphicColor*> (inColor->gobj ()));
                    return MeshGradientPatchCornerColor::RefPtr (new MeshGradientPatchCornerColor (pCorner));
                }

                _WRAP_METHOD(guint get_num () const, maia_graphic_mesh_gradient_patch_corner_color_get_num)
                _WRAP_METHOD(Color::RefPtr get_color () const, maia_graphic_mesh_gradient_patch_corner_color_get_color, refreturn)
        };
    }
}
