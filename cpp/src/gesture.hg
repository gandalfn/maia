/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * gesture.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/graphic-point.h>
#include <maiamm/core-notification.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-notification_p.h)

namespace Maia
{
    namespace Gesture
    {
        _GMMPROC_EXTRA_NAMESPACE(Gesture)

        _WRAP_ENUM(class Type, MaiaGestureType, s#GESTURE_TYPE_##,  NO_GTYPE)

        class Notification : public Core::Notification
        {
            _CLASS_GOBJECT(Notification, MaiaGestureNotification, MAIA_GESTURE_NOTIFICATION, Core::Notification, MaiaCoreNotification)

            protected:
                _CTOR_DEFAULT()

            public:
                using RefPtr = Glib::RefPtr<Notification>;

                _WRAP_METHOD(guint get_button () const, maia_gesture_notification_get_button)

                _WRAP_METHOD(Gesture::Type get_gesture_type () const, maia_gesture_notification_get_gesture_type)

                _IGNORE(maia_gesture_notification_get_position)
                _WRAP_METHOD_DOCS_ONLY(maia_gesture_notification_get_position)
                Graphic::Point get_position () const
                {
                    Graphic::Point ret;
                    maia_gesture_notification_get_position(const_cast<MaiaGestureNotification*> (gobj ()), ret.gobj ());
                    return ret;
                }

                _WRAP_METHOD(bool proceed () const, maia_gesture_notification_get_proceed)
                _WRAP_METHOD(void set_proceed (bool inProceed = true), maia_gesture_notification_set_proceed)

                _WRAP_METHOD(void post (guint inButton, Gesture::Type inType, const Graphic::Point& inPosition), maia_gesture_notification_post)

                _WRAP_PROPERTY("button", guint)
                _WRAP_PROPERTY("gesture-type", Gesture::Type)
                _WRAP_PROPERTY("position", Graphic::Point)
                _WRAP_PROPERTY("proceed", bool)
        };
    }
}
