/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-listener.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <type_traits>

#include <maia.h>
#include <maiamm/core-object.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class Event;
        class EventArgs;


#ifndef DOXYGEN_SHOULD_SKIP_THIS
        class EventListenerFunctorBase : public Glib::Object
        {
            public:
                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs) = 0;
                EventListenerFunctorBase* cpp_obj () { return this; }

            protected:
                EventListenerFunctorBase () :
                    Glib::ObjectBase ("EventListenerFunctorBase")
                {
                    g_object_set_data (G_OBJECT (gobj ()), "EventListenerCpp", this);
                }
        };

        template <class T_obj>
        class EventListenerFunctor : public EventListenerFunctorBase
        {
            typedef void (T_obj::*Handler) (const Glib::RefPtr<EventArgs>& inpArgs);

            public:
                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs)
                {
                    (m_pObj->*m_Callback) (inArgs);
                }

                static Glib::RefPtr<EventListenerFunctorBase> create (T_obj* pObj, Handler pFunc)
                {
                    return Glib::RefPtr<EventListenerFunctorBase> (new EventListenerFunctor (pObj, pFunc));
                }

            protected:
                EventListenerFunctor (T_obj* pObj, Handler pFunc) :
                    EventListenerFunctorBase (),
                    m_pObj (pObj),
                    m_Callback (pFunc)
                {
                }


            private:
                T_obj*  m_pObj;
                Handler m_Callback;

                friend Event;
        };

        class EventListenerSigcFunctor : public EventListenerFunctorBase
        {
            typedef sigc::slot<void, Glib::RefPtr<EventArgs>> Handler;
            private:
                static void* _on_destroy_notify (gpointer inpData)
                {
                    EventListenerSigcFunctor* pSelf = (EventListenerSigcFunctor*)inpData;

                    pSelf->unreference ();

                    return 0;
                }

            public:
                ~EventListenerSigcFunctor ()
                {
                    delete m_pCallback; m_pCallback = 0;
                }

                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs)
                {
                    (*m_pCallback) (inArgs);
                }

                static Glib::RefPtr<EventListenerFunctorBase> create (const Handler& inSlot)
                {
                    return Glib::RefPtr<EventListenerFunctorBase> (new EventListenerSigcFunctor (inSlot));
                }

            protected:
                EventListenerSigcFunctor (const Handler& inSlot) :
                    EventListenerFunctorBase (),
                    m_pCallback (new Handler (inSlot))
                {
                    m_pCallback->add_destroy_notify_callback (this, &_on_destroy_notify);
                }


            private:
                Handler* m_pCallback;

                friend Event;
        };
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

        class EventListener : public Object
        {
            _CLASS_GOBJECT(EventListener, MaiaCoreEventListener, MAIA_CORE_EVENT_LISTENER, Object, MaiaCoreObject)

            _CUSTOM_DTOR

            _IGNORE(maia_core_event_listener_new, maia_core_event_listener_new_object, maia_core_event_listener_set_block,
                    maia_core_event_listener_new_with_hash, maia_core_event_listener_new_with_hash_object,
                    maia_core_event_listener_set_event_destroyed, maia_core_event_listener_set_block_next_nb_events,
                    maia_core_event_listener_get_event_destroyed, maia_core_event_listener_get_block_next_nb_events)

            public:
                using RefPtr = Glib::RefPtr<EventListener>;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template<typename Condition, typename Retun>
                using EnableIf = typename std::enable_if<Condition::value, Retun>::type;
                template<typename Condition, typename Retun>
                using EnableIfNot = typename std::enable_if<!Condition::value, EventListener::RefPtr>::type;
                template <typename T_return, typename T_obj>
                using ReturnIfGlibObject = EnableIf<std::is_base_of<Glib::Object, T_obj>, T_return>;
                template <typename T_return, typename T_obj>
                using ReturnIfNotGlibObject = EnableIfNot<std::is_base_of<Glib::Object, T_obj>, T_return>;

                template <typename T_obj>
                static ReturnIfNotGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::RefPtr<Event>& inpEvent, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inpEvent, pFunctor);

                    return pListener;
                }

                template <typename T_obj>
                static ReturnIfGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::RefPtr<Event>& inpEvent, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inpEvent, pFunctor);

                    pListener->add_gobject_watch (pObj);

                    return pListener;
                }

                static EventListener::RefPtr
                create (const Glib::RefPtr<Event>& inpEvent, const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerSigcFunctor::create (inSlot);

                    return create (inpEvent, pFunctor);
                }
                template <typename T_obj>
                static ReturnIfNotGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inName, inpOwner, pFunctor);

                    return pListener;
                }

                template <typename T_obj>
                static ReturnIfGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inName, inpOwner, pFunctor);

                    pListener->add_gobject_watch (pObj);

                    return pListener;
                }

                static EventListener::RefPtr
                create (const Glib::ustring& inName, void* inpOwner, const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerSigcFunctor::create (inSlot);

                    return create (inName, inpOwner, pFunctor);
                }

                template <typename T_obj>
                static ReturnIfNotGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::ustring& inName, int inOwner, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inName, GINT_TO_POINTER (inOwner), pFunctor);

                    return pListener;
                }

                template <typename T_obj>
                static ReturnIfGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::ustring& inName, int inOwner, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inName, GINT_TO_POINTER (inOwner), pFunctor);

                    pListener->add_gobject_watch (pObj);

                    return pListener;
                }

                template <typename T_obj>
                static ReturnIfNotGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inName, 0, pFunctor);

                    return pListener;
                }

                template <typename T_obj>
                static ReturnIfGlibObject<EventListener::RefPtr, T_obj>
                create (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    EventListener::RefPtr pListener = create (inName, 0, pFunctor);

                    pListener->add_gobject_watch (pObj);

                    return pListener;
                }

                static EventListener::RefPtr
                create (const Glib::ustring& inName, const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerSigcFunctor::create (inSlot);

                    return create (inName, 0, pFunctor);
                }
#else
                /**
                 * Create a new event listener for an Event
                 *
                 * @param inEvent event to create listener for
                 * @param inpObject target object
                 * @param pFunc callback of listerner
                 *
                 * @return EventListener::RefPtr
                 */
                template <typename T_obj>
                static EventListener::RefPtr create (const Glib::RefPtr<Event>& inpEvent, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
                static EventListener::RefPtr create (const Glib::RefPtr<Event>& inpEvent, const sigc::slot<void, EventArgs::RefPtr>& inSlot);
                template <typename T_obj>
                static EventListener::RefPtr create (const Glib::ustring& inName, void* inpOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
                template <typename T_obj>
                static EventListener::RefPtr create (const Glib::ustring& inName, int inOwner, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
                static EventListener::RefPtr create (const Glib::ustring& inName, void* inpOwner, const sigc::slot<void, EventArgs::RefPtr>& inSlot);
                template <typename T_obj>
                static EventListener::RefPtr create (const Glib::ustring& inName, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
                static EventListener::RefPtr create (const Glib::ustring& inName, const sigc::slot<void, EventArgs::RefPtr>& inSlot);
#endif

                _WRAP_METHOD(bool is_blocked () const, maia_core_event_listener_get_block)
                void block ()
                {
                    maia_core_event_listener_set_block (gobj (), true);
                }
                void unblock ()
                {
                    maia_core_event_listener_set_block (gobj (), false);
                }

                void block_next_event ()
                {
                    int nb = maia_core_event_listener_get_block_next_nb_events (gobj ());
                    maia_core_event_listener_set_block_next_nb_events (gobj (), nb + 1);
                }

                _WRAP_PROPERTY("block", bool)

            protected:
                _CUSTOM_CTOR_CAST()

            private:
                static EventListener::RefPtr create (const Glib::RefPtr<Event>& inpEvent, const Glib::RefPtr<EventListenerFunctorBase>& inpFunctor);
                static EventListener::RefPtr create (Event* inpEvent, const Glib::RefPtr<EventListenerFunctorBase>& inpFunctor);
                static EventListener::RefPtr create (const Glib::ustring& inName, void* inpOwner, const Glib::RefPtr<EventListenerFunctorBase>& inpFunctor);

                Glib::RefPtr<EventListenerFunctorBase> m_pFunctor;
                Glib::Object* m_pClient;

                void add_gobject_watch (Glib::Object* inpObject);

                static void* _on_gobject_child_destroy_notify (gpointer inpData);

                friend Event;
        };
    }
}
