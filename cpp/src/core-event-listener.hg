/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event-listener.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class Event;
        class EventArgs;


#ifndef DOXYGEN_SHOULD_SKIP_THIS
        class EventListenerFunctorBase : public Glib::Object
        {
            public:
                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs) = 0;
                EventListenerFunctorBase* cpp_obj () { return this; }

            protected:
                EventListenerFunctorBase () :
                    Glib::ObjectBase ("EventListenerFunctorBase")
                {
                    g_object_set_data (G_OBJECT (gobj ()), "EventListenerCpp", this);
                }
        };

        template <class T_obj>
        class EventListenerFunctor : public EventListenerFunctorBase
        {
            typedef void (T_obj::*Handler) (const Glib::RefPtr<EventArgs>& inpArgs);

            public:
                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs)
                {
                    (m_pObj->*m_Callback) (inArgs);
                }

                static Glib::RefPtr<EventListenerFunctorBase> create (T_obj* pObj, Handler pFunc)
                {
                    return Glib::RefPtr<EventListenerFunctorBase> (new EventListenerFunctor (pObj, pFunc));
                }

            protected:
                EventListenerFunctor (T_obj* pObj, Handler pFunc) :
                    EventListenerFunctorBase (),
                    m_pObj (pObj),
                    m_Callback (pFunc)
                {
                }


            private:
                T_obj*  m_pObj;
                Handler m_Callback;

                friend Event;
        };

        class EventListenerSigcFunctor : public EventListenerFunctorBase
        {
            typedef sigc::slot<void, Glib::RefPtr<EventArgs>> Handler;

            public:
                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs)
                {
                    (*m_pCallback) (inArgs);
                }

                static Glib::RefPtr<EventListenerFunctorBase> create (const Handler& inSlot)
                {
                    return Glib::RefPtr<EventListenerFunctorBase> (new EventListenerSigcFunctor (inSlot));
                }

            protected:
                EventListenerSigcFunctor (const Handler& inSlot) :
                    EventListenerFunctorBase (),
                    m_pCallback (new Handler (inSlot))
                {
                }


            private:
                Handler* m_pCallback;

                friend Event;
        };

        template <class T_obj>
        class EventListenerGFunctor : public EventListenerFunctorBase
        {
            typedef void (T_obj::*Handler) (const Glib::RefPtr<EventArgs>& inpArgs);

            public:
                virtual void operator() (const Glib::RefPtr<EventArgs>& inArgs)
                {
                    (m_pObj->*m_Callback) (inArgs);
                }

                static Glib::RefPtr<EventListenerFunctorBase> create (const Glib::RefPtr<T_obj>& pObj, Handler pFunc)
                {
                    return Glib::RefPtr<EventListenerFunctorBase> (new EventListenerGFunctor (pObj, pFunc));
                }

            protected:
                EventListenerGFunctor (const Glib::RefPtr<T_obj>& pObj, Handler pFunc) :
                    EventListenerFunctorBase (),
                    m_pObj (pObj),
                    m_Callback (pFunc)
                {
                }


            private:
                const Glib::RefPtr<T_obj>&  m_pObj;
                Handler m_Callback;

                friend Event;
        };
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

        class EventListener : public Object
        {
            _CLASS_GOBJECT(EventListener, MaiaCoreEventListener, MAIA_CORE_EVENT_LISTENER, Object, MaiaCoreObject)

            _IGNORE(maia_core_event_listener_new, maia_core_event_listener_new_object, maia_core_event_listener_set_block);

            public:
                template <class T_obj>
                static Glib::RefPtr<EventListener>
                create (const Glib::RefPtr<Event>& inpEvent, T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);

                    return create (inpEvent, pFunctor);
                }

                static Glib::RefPtr<EventListener>
                create (const Glib::RefPtr<Event>& inpEvent, const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerSigcFunctor::create (inSlot);

                    return create (inpEvent, pFunctor);
                }

                template <class T_obj>
                static Glib::RefPtr<EventListener>
                create (const Glib::RefPtr<Event>& inpEvent, const Glib::RefPtr<T_obj>& pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerGFunctor<T_obj>::create (pObj, pFunc);
                    Glib::RefPtr<EventListener> pListener = create (inpEvent, pFunctor);

                    pObj->add_destroy_notify_callback (pListener->gobj (), _on_gobject_child_destroy_notify);

                    return  pListener;
                }

                _WRAP_METHOD(bool is_blocked () const, maia_core_event_listener_get_block)
                void block ()
                {
                    maia_core_event_listener_set_block (gobj (), true);
                }
                void unblock ()
                {
                    maia_core_event_listener_set_block (gobj (), false);
                }

                _WRAP_PROPERTY("block", bool)

            private:
                static Glib::RefPtr<EventListener> create (const Glib::RefPtr<Event>& inpEvent, const Glib::RefPtr<EventListenerFunctorBase>& inpFunctor);
                static Glib::RefPtr<EventListener> create (Event* inpEvent, const Glib::RefPtr<EventListenerFunctorBase>& inpFunctor);

                static void* _on_gobject_child_destroy_notify (gpointer inpData)
                {
                    maia_core_object_set_parent (MAIA_CORE_OBJECT (inpData), 0);

                    return 0;
                }

                friend Event;
        };
    }
}
