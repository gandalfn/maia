/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * document.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    static void on_save_finished (GObject* inpObject, GAsyncResult* inpResult, gpointer inpData)
    {
        Document::SlotSaveFinished* pSlot = (Document::SlotSaveFinished*)inpData;
        if (!pSlot)
        {
            GError* gerror = nullptr;
            maia_document_save_finish (MAIA_DOCUMENT (inpObject), inpResult, &gerror);
            if (gerror) ::Glib::Error::throw_exception(gerror);
        }
        else
        {
            Glib::RefPtr<Document> pDocument = Glib::wrap (MAIA_DOCUMENT (inpObject), true);
            Glib::RefPtr<Gio::AsyncResult> pResult = Glib::wrap (inpResult);
            (*pSlot) (pDocument, pResult);
        }

        delete pSlot; pSlot = nullptr;
    }

    void Document::save (const Glib::ustring& inFilename, double inDpi)
    {
        maia_document_save (gobj (), inFilename.c_str (), inDpi, nullptr, on_save_finished, nullptr);
    }

    void Document::save (const Glib::ustring& inFilename, SlotSaveFinished inFunc)
    {
        SlotSaveFinished* pSlot = new SlotSaveFinished (inFunc);

        maia_document_save (gobj (), inFilename.c_str (), 96, nullptr, on_save_finished, pSlot);
    }

    void Document::save (const Glib::ustring& inFilename, SlotSaveFinished inFunc, const Glib::RefPtr<Gio::Cancellable>& inCancellable)
    {
        SlotSaveFinished* pSlot = new SlotSaveFinished (inFunc);

        maia_document_save (gobj (), inFilename.c_str (), 96, const_cast<GCancellable*> (inCancellable->gobj ()), on_save_finished, pSlot);
    }

    void Document::save (const Glib::ustring& inFilename, double inDpi, SlotSaveFinished inFunc)
    {
        SlotSaveFinished* pSlot = new SlotSaveFinished (inFunc);

        maia_document_save (gobj (), inFilename.c_str (), inDpi, nullptr, on_save_finished, pSlot);
    }

    void Document::save (const Glib::ustring& inFilename, double inDpi, SlotSaveFinished inFunc, const Glib::RefPtr<Gio::Cancellable>& inCancellable)
    {
        SlotSaveFinished* pSlot = new SlotSaveFinished (inFunc);

        maia_document_save (gobj (), inFilename.c_str (), inDpi, const_cast<GCancellable*> (inCancellable->gobj ()), on_save_finished, pSlot);
    }

    void Document::save_finish (const Glib::RefPtr<Gio::AsyncResult>& inResult)
    {
        GError* gerror = nullptr;
        maia_document_save_finish (gobj(), const_cast<GAsyncResult*> (inResult->gobj ()), &gerror);
        if (gerror) ::Glib::Error::throw_exception(gerror);
    }
}
