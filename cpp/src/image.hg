/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * image.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item-resizable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/item.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    class Image : public Item, public ItemPackable, public ItemMovable, public ItemResizable, public ItemFocusable
    {
        _CLASS_GOBJECT(Image, MaiaImage, MAIA_IMAGE, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)
        _IMPLEMENTS_INTERFACE(ItemResizable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit Image(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<Image>;

            static Image::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inFilename)
            {
                MaiaImage* pImage = maia_image_new (inId.c_str (), inFilename.c_str ());

                return Image::RefPtr (new Image (pImage));
            }

            _WRAP_METHOD(Glib::ustring get_filename () const, maia_image_get_filename)
            _WRAP_METHOD(void set_filename (const Glib::ustring& inFilename), maia_image_set_filename)
            inline void unset_filename ()
            {
                maia_image_set_filename (gobj(), 0);
            }

            _IGNORE(maia_image_create_image)

            _WRAP_PROPERTY("filename", Glib::ustring)

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
