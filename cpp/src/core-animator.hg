/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-animator.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-timeline.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        _WRAP_ENUM(AnimatorProgressType, MaiaCoreAnimatorProgressType, NO_GTYPE)

        class Animator : public Glib::Object
        {
            _CLASS_GOBJECT(Animator, MaiaCoreAnimator, MAIA_CORE_ANIMATOR, Glib::Object, GObject)

            protected:
                _WRAP_CTOR(Animator(guint speed, guint duration), maia_core_animator_new)

            public:
                _CUSTOM_DTOR

                typedef sigc::slot<bool, double> SlotTransitionCallback;
                typedef sigc::slot<void> SlotTransitionFinished;

                _WRAP_CREATE(guint speed, guint duration)

                _IGNORE (maia_core_animator_add_transition)
                _IGNORE (maia_core_animator_remove_transition)
                _IGNORE (maia_core_animator_add_transition_property)

                _WRAP_METHOD(void set_duration(guint msecs), maia_core_animator_set_duration)
                _WRAP_METHOD(guint get_duration() const, maia_core_animator_get_duration)
                _WRAP_METHOD(void set_speed(guint fps), maia_core_animator_set_speed)
                _WRAP_METHOD(guint get_speed() const, maia_core_animator_get_speed)
                _WRAP_METHOD(void set_loop(bool loop = true), maia_core_animator_set_loop)
                _WRAP_METHOD(bool get_loop() const, maia_core_animator_get_loop)
                _WRAP_METHOD(bool is_playing() const, maia_core_animator_get_is_playing)
                _WRAP_METHOD(void set_direction(TimelineDirection direction), maia_core_animator_set_direction)
                _WRAP_METHOD(TimelineDirection get_direction() const, maia_core_animator_get_direction)

                _WRAP_METHOD(void start(), maia_core_animator_start)
                _WRAP_METHOD(void stop(), maia_core_animator_stop)

                unsigned int add_transition (double inFrom, double inTo, AnimatorProgressType inType, SlotTransitionCallback inCallback, SlotTransitionFinished inFinished);
                unsigned int add_transition (double inFrom, double inTo, AnimatorProgressType inType, SlotTransitionCallback inCallback);
                unsigned int add_transition (double inFrom, double inTo, AnimatorProgressType inType, SlotTransitionFinished inFinished);
                unsigned int add_transition (double inFrom, double inTo, AnimatorProgressType inType);

                void remove_transition (unsigned int inTransition);

                void add_transition_property (unsigned int inTransition, Glib::Object& inObject, const Glib::ustring& inName, double inFrom, double inTo);
                void add_transition_property (unsigned int inTransition, Glib::Object& inObject, const Glib::ustring& inName, float inFrom, float inTo);
                void add_transition_property (unsigned int inTransition, Glib::Object& inObject, const Glib::ustring& inName, int inFrom, int inTo);

                _WRAP_PROPERTY("direction", TimelineDirection)
                _WRAP_PROPERTY("duration", guint)
                _WRAP_PROPERTY("speed", guint)
                _WRAP_PROPERTY("loop", bool)
                _WRAP_PROPERTY("is-playing", bool)

            private:
                struct AnimatorClosure
                {
                    SlotTransitionCallback* m_pCallback;
                    SlotTransitionFinished* m_pFinished;

                    AnimatorClosure (SlotTransitionCallback inCallback, SlotTransitionFinished inFinished) :
                        m_pCallback (0),
                        m_pFinished (0)
                    {
                        m_pCallback = new SlotTransitionCallback (inCallback);
                        m_pFinished = new SlotTransitionFinished (inFinished);
                    }

                    AnimatorClosure (SlotTransitionCallback inCallback) :
                        m_pCallback (0),
                        m_pFinished (0)
                    {
                        m_pCallback = new SlotTransitionCallback (inCallback);
                    }

                    AnimatorClosure (SlotTransitionFinished inFinished) :
                        m_pCallback (0),
                        m_pFinished (0)
                    {
                        m_pFinished = new SlotTransitionFinished (inFinished);
                    }

                    AnimatorClosure () :
                        m_pCallback (0),
                        m_pFinished (0)
                    {
                    }

                    ~AnimatorClosure ()
                    {
                        delete m_pCallback; m_pCallback = 0;
                        delete m_pFinished; m_pFinished = 0;
                    }
                };

                static gboolean on_transition_callback (double inProgress, void* inData);
                static void on_transition_finished (void* inData);
                static void on_destroy_closure (void* inData);
        };
    }
}
