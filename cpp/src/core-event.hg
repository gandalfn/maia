/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-event-bus.h>
#include <maiamm/core-event-listener.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class Event : public Object
        {
            _CLASS_GOBJECT(Event, MaiaCoreEvent, MAIA_CORE_EVENT, Object, MaiaCoreObject)

            public:
                static Glib::RefPtr<Event>
                create (const Glib::ustring& inName, const Glib::RefPtr<EventBus>& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), 0, const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Glib::RefPtr<Event> (new Event (pEvent));
                }

                template<typename T_obj>
                static Glib::RefPtr<Event>
                create (const Glib::ustring& inName, T_obj obj, const Glib::RefPtr<EventBus>& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), (void*)&obj, const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Glib::RefPtr<Event> (new Event (pEvent));
                }

                template<class T_obj>
                static Glib::RefPtr<Event>
                create (const Glib::ustring& inName, const Glib::RefPtr<T_obj>& pObj, const Glib::RefPtr<EventBus>& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), (void*)(pObj->gobj ()), const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Glib::RefPtr<Event> (new Event (pEvent));
                }

                _IGNORE(maia_core_event_subscribe, maia_core_event_object_subscribe)
                template <class T_obj>
                Glib::RefPtr<EventListener>
                subscribe (T_obj* pObj, void (T_obj::*pFunc) (const Glib::RefPtr<EventArgs>& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);
                    
                    Glib::RefPtr<EventListener> pListener = EventListener::create (this, pFunctor);

                    get_bus ()->subscribe (pListener);

                    return pListener;
                }

                Glib::RefPtr<EventListener>
                subscribe (const sigc::slot<void, Glib::RefPtr<EventArgs>>& inSlot)
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerSigcFunctor::create (inSlot);

                    Glib::RefPtr<EventListener> pListener = EventListener::create (this, pFunctor);

                    get_bus ()->subscribe (pListener);

                    return pListener;
                }

                _IGNORE(maia_core_event_get_owner)
                _WRAP_METHOD(Glib::ustring get_name () const, maia_core_event_get_name)
                _WRAP_METHOD(Glib::RefPtr<EventBus> get_bus () const, maia_core_event_get_bus, refreturn)

                _WRAP_PROPERTY("name", Glib::ustring)
                _WRAP_PROPERTY("owner", void*)
                _WRAP_PROPERTY("bus", Glib::RefPtr<EventBus>)
        };
    }
}
