/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-event.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-event-bus.h>
#include <maiamm/core-event-listener.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class Event : public Object
        {
            _CLASS_GOBJECT(Event, MaiaCoreEvent, MAIA_CORE_EVENT, Object, MaiaCoreObject)

            _IGNORE(maia_core_event_get_owner, maia_core_event_publish_with_reply, maia_core_event_object_publish_with_reply)

            public:
                using RefPtr = Glib::RefPtr<Event>;
                using SlotReplyCallback = sigc::slot<void, EventArgs::RefPtr>;

                static Event::RefPtr
                create (const Glib::ustring& inName, const EventBus::RefPtr& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), 0, const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Event::RefPtr (new Event (pEvent));
                }

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                static typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, Event::RefPtr>::type
                create (const Glib::ustring& inName, const T_obj& obj, const EventBus::RefPtr& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), (void*)&obj, const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Event::RefPtr (new Event (pEvent));
                }

                template <typename T_obj>
                static typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, Event::RefPtr>::type
                create (const Glib::ustring& inName, const T_obj& obj, const EventBus::RefPtr& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), (void*)(obj.gobj()), const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Event::RefPtr (new Event (pEvent));
                }
#else
                template <typename T_obj>
                static Event::RefPtr create (const Glib::ustring& inName, const T_obj& obj, const EventBus::RefPtr& inpBus = EventBus::get_default ());
#endif

                template<class T_obj>
                static Event::RefPtr
                create (const Glib::ustring& inName, const Glib::RefPtr<T_obj>& pObj, const EventBus::RefPtr& inpBus = EventBus::get_default ())
                {
                    MaiaCoreEvent* pEvent = maia_core_event_new (inName.c_str (), (void*)(pObj->gobj ()), const_cast<MaiaCoreEventBus*> (inpBus->gobj ()));
                    return Event::RefPtr (new Event (pEvent));
                }

                _IGNORE(maia_core_event_subscribe, maia_core_event_object_subscribe)
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);

                    EventListener::RefPtr pListener = EventListener::create (this, pFunctor);

                    get_bus ()->subscribe (pListener);

                    return pListener;
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, EventListener::RefPtr>::type
                subscribe (T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerFunctor<T_obj>::create (pObj, pFunc);

                    EventListener::RefPtr pListener = EventListener::create (this, pFunctor);

                    pListener->add_gobject_watch (pObj);

                    get_bus ()->subscribe (pListener);

                    return pListener;
                }
#else
                template <typename T_obj>
                EventListener::RefPtr subscribe (T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
#endif

                EventListener::RefPtr
                subscribe (const sigc::slot<void, EventArgs::RefPtr>& inSlot)
                {
                    Glib::RefPtr<EventListenerFunctorBase> pFunctor = EventListenerSigcFunctor::create (inSlot);

                    EventListener::RefPtr pListener = EventListener::create (this, pFunctor);

                    get_bus ()->subscribe (pListener);

                    return pListener;
                }

                _WRAP_METHOD(void publish (const EventArgs::RefPtr& inpArgs), maia_core_event_publish)

                void publish ()
                {
                    maia_core_event_publish (gobj (), 0);
                }

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                template <typename T_obj>
                typename std::enable_if<!std::is_base_of<Glib::Object, T_obj>::value, void>::type
                publish_with_reply (const EventArgs::RefPtr& inpArgs, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventReplyObject<T_obj>* pHandler = new EventReplyObject<T_obj> (pObj, pFunc);
                    maia_core_event_object_publish_with_reply (gobj (), const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()), &Event::_on_publish_reply_callback, (gpointer)pHandler);
                }

                template <typename T_obj>
                typename std::enable_if<std::is_base_of<Glib::Object, T_obj>::value, void>::type
                publish_with_reply (const EventArgs::RefPtr& inpArgs, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs))
                {
                    EventReplyGObject<T_obj>* pHandler = new EventReplyGObject<T_obj> (pObj, pFunc);
                    maia_core_event_object_publish_with_reply (gobj (), const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()), &Event::_on_publish_reply_callback, (gpointer)pHandler);
                }
#else
                template <typename T_obj>
                void publish_with_reply (const EventArgs::RefPtr& inpArgs, T_obj* pObj, void (T_obj::*pFunc) (const EventArgs::RefPtr& inpArgs));
#endif

                void publish_with_reply (const EventArgs::RefPtr& inpArgs, SlotReplyCallback inSlot)
                {
                    EventReplySigcFunctor* pHandler = new EventReplySigcFunctor (inSlot);
                    maia_core_event_object_publish_with_reply (gobj (), const_cast<MaiaCoreEventArgs*> (inpArgs->gobj ()), &Event::_on_publish_reply_callback, (gpointer)pHandler);
                }

                _WRAP_METHOD(Glib::ustring get_name () const, maia_core_event_get_name)
                _WRAP_METHOD(EventBus::RefPtr get_bus () const, maia_core_event_get_bus, refreturn)

                _WRAP_PROPERTY("name", Glib::ustring)
                _WRAP_PROPERTY("owner", void*)
                _WRAP_PROPERTY("bus", EventBus::RefPtr)

            private:
                static void _on_publish_reply_callback (MaiaCoreEventArgs* inpArgs, gpointer inpData);
        };
    }
}
