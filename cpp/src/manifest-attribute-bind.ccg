/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * manifest-attribute-bind.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    namespace Manifest
    {
        static void
        register_transform_func_callback (MaiaManifestAttributeBind* inpAttribute, GValue* outpValue,
                                          void* inpData, GError** outpError)
        {
            AttributeBind::SlotTransformFunc* pSlot = (AttributeBind::SlotTransformFunc*)inpData;
            if (pSlot)
            {
                Glib::ValueBase cppValue;
                cppValue.init (G_VALUE_TYPE (outpValue));
                (*pSlot) (Glib::wrap (inpAttribute), cppValue);
                g_value_copy (cppValue.gobj (), outpValue);
            }
        }

        static void
        register_transform_func_destroy (void* inpData)
        {
            AttributeBind::SlotTransformFunc* pSlot = (AttributeBind::SlotTransformFunc*)inpData;
            delete pSlot;
        }

        void
        register_transform_func (GType inType, const Glib::ustring& inName, AttributeBind::SlotTransformFunc inFunc)
        {
            AttributeBind::SlotTransformFunc* pSlot = new AttributeBind::SlotTransformFunc (inFunc);
            maia_manifest_attribute_bind_register_transform_func (inType, inName.c_str (), register_transform_func_callback, pSlot, register_transform_func_destroy);
        }
    }
}
