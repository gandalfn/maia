/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * logger.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)

namespace Maia
{
    namespace Log
    {
        _GMMPROC_EXTRA_NAMESPACE(Log)

        _WRAP_ENUM(class Level, MaiaLogLevel, s#LOG_LEVEL_##, NO_GTYPE)
        _WRAP_ENUM(Category, MaiaLogCategory, NO_GTYPE)

        class Logger : public Glib::Object
        {
            _CLASS_GOBJECT(Logger, MaiaLogLogger, MAIA_LOG_LOGGER, Glib::Object, GObject)

            protected:
                _CTOR_DEFAULT()

                explicit Logger (Level inLevel, Category inCategory, const Glib::ustring& inDomain);

                _WRAP_VFUNC(void write (const Glib::ustring& inDomain, Level inLevel, const Glib::ustring& inMessage), write)

                _WRAP_METHOD(Glib::ustring colorize (Level inLevel, const Glib::ustring& inMessage), maia_log_logger_colorize)

            public:
                _WRAP_METHOD(Level get_level () const, maia_log_logger_get_level)
                _WRAP_METHOD(void set_level (Level inLevel), maia_log_logger_set_level)
                _WRAP_METHOD(Category get_category () const, maia_log_logger_get_category)
                _WRAP_METHOD(void set_category (Category inCategory), maia_log_logger_set_category)
                _WRAP_METHOD(Glib::ustring get_domain () const, maia_log_logger_get_domain)
                _WRAP_METHOD(void set_domain (const Glib::ustring& inDomain), maia_log_logger_set_domain)
                _WRAP_METHOD(bool get_colorized () const, maia_log_logger_get_colorized)
                _WRAP_METHOD(void set_colorized (bool inColorized = true), maia_log_logger_set_colorized)

                _WRAP_PROPERTY("level", Level)
                _WRAP_PROPERTY("category", Category)
                _WRAP_PROPERTY("domain", Glib::ustring)
                _WRAP_PROPERTY("colorized", bool)
        };

        class File : public Logger
        {
            _CLASS_GOBJECT(File, MaiaLogFile, MAIA_LOG_FILE, Logger, MaiaLogLogger)

            protected:
                _CTOR_DEFAULT()

            public:
                static Glib::RefPtr<File> create (const Glib::ustring& inFilename, Level inLevel, Category inCategory, const Glib::ustring& inDomain)
                {
                    MaiaLogFile* pFile = maia_log_file_new (inFilename.c_str (), (MaiaLogLevel)inLevel, (MaiaLogCategory)inCategory, inDomain.c_str ());
                    return Glib::RefPtr<File> (new File (pFile));
                }

                _WRAP_METHOD(int get_fd () const, maia_log_file_get_fd)
                _WRAP_METHOD(void set_fd (int inFd), maia_log_file_set_fd)
                _WRAP_METHOD(bool get_close_on_destroy () const, maia_log_file_get_close_on_destroy)
                _WRAP_METHOD(void set_close_on_destroy (bool inCloseOnDestroy = true), maia_log_file_set_close_on_destroy)
        };

        class Stdout : public File
        {
            _CLASS_GOBJECT(Stdout, MaiaLogStdout, MAIA_LOG_STDOUT, File, MaiaLogFile)

            protected:
                _CTOR_DEFAULT()

            public:
                static Glib::RefPtr<Stdout> create (Level inLevel, Category inCategory, const Glib::ustring& inDomain)
                {
                    MaiaLogStdout* pLogger = maia_log_stdout_new ((MaiaLogLevel)inLevel, (MaiaLogCategory)inCategory, inDomain.c_str ());
                    return Glib::RefPtr<Stdout> (new Stdout (pLogger));
                }
        };

        class Stderr : public File
        {
            _CLASS_GOBJECT(Stderr, MaiaLogStderr, MAIA_LOG_STDERR, File, MaiaLogFile)

            protected:
                _CTOR_DEFAULT()

            public:
                static Glib::RefPtr<Stderr> create (Level inLevel, Category inCategory, const Glib::ustring& inDomain)
                {
                    MaiaLogStderr* pLogger = maia_log_stderr_new ((MaiaLogLevel)inLevel, (MaiaLogCategory)inCategory, inDomain.c_str ());
                    return Glib::RefPtr<Stderr> (new Stderr (pLogger));
                }
        };

        static inline void set_wrap_glog (bool inWrap = true)
        {
            maia_log_set_wrap_glog (inWrap);
        }

        static inline void set_default_logger (const Glib::RefPtr<Logger>& inLogger)
        {
            maia_log_set_default_logger (const_cast<MaiaLogLogger*> (inLogger->gobj ()));
        }

        static inline void unset_default_logger ()
        {
            maia_log_set_default_logger (nullptr);
        }
    }
}
