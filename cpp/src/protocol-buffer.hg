/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * protocol-buffer.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-parser.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-parser_p.h)

namespace Maia
{
    namespace Protocol
    {
        class Message;

        _GMMPROC_EXTRA_NAMESPACE(Protocol)

        _WRAP_GERROR(Error, MaiaProtocolError, MAIA_PROTOCOL_ERROR, NO_GTYPE)

        class Buffer : public Core::Parser
        {
            _CLASS_GOBJECT(Buffer, MaiaProtocolBuffer, MAIA_PROTOCOL_BUFFER, Core::Parser, MaiaCoreParser)

            protected:
                _CTOR_DEFAULT()

            public:
                static Glib::RefPtr<Buffer> create_from_filename (const Glib::ustring& inFilename)
                {
                    GError* gerror = 0;
                    MaiaProtocolBuffer* pBuffer = maia_protocol_buffer_new (inFilename.c_str(), &gerror);
                    if (gerror) ::Glib::Error::throw_exception(gerror);
                    return Glib::RefPtr<Buffer> (new Buffer (pBuffer));
                }

                static Glib::RefPtr<Buffer> create (const Glib::ustring& inBuffer)
                {
                    GError* gerror = 0;
                    MaiaProtocolBuffer* pBuffer = maia_protocol_buffer_new_from_data (inBuffer.c_str(), inBuffer.size (), &gerror);
                    if (gerror) ::Glib::Error::throw_exception(gerror);
                    return Glib::RefPtr<Buffer> (new Buffer (pBuffer));
                }

                _WRAP_METHOD(Glib::ustring get_message () const, maia_protocol_buffer_get_message)
                _WRAP_METHOD(Glib::ustring get_attribute_name () const, maia_protocol_buffer_get_attribute_name)
                _WRAP_METHOD(Glib::ustring get_attribute_rule () const, maia_protocol_buffer_get_attribute_rule)
                _WRAP_METHOD(Glib::ustring get_attribute_type () const, maia_protocol_buffer_get_attribute_type)
                _WRAP_METHOD(Glib::ustring get_attribute_options () const, maia_protocol_buffer_get_attribute_options)

                _WRAP_METHOD(Glib::RefPtr<Message> get (const Glib::ustring& inId) const, maia_protocol_buffer_get, refreturn)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                _WRAP_PROPERTY("message", Glib::ustring)
                _WRAP_PROPERTY("attribute-name", Glib::ustring)
                _WRAP_PROPERTY("attribute-rule", Glib::ustring)
                _WRAP_PROPERTY("attribute-type", Glib::ustring)
                _WRAP_PROPERTY("attribute-options", Glib::ustring)
#endif
        };
    }
}
