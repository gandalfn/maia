/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-clone-renderer.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-renderer.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(maiamm/private/graphic-renderer_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        typedef Glib::RefPtr<class CloneRendererLooper> CloneRendererLooperRefPtr;

        class CloneRendererLooper final : public RendererLooper
        {
            _CLASS_GOBJECT(CloneRendererLooper, MaiaGraphicCloneRendererLooper, MAIA_GRAPHIC_CLONE_RENDERER_LOOPER, RendererLooper, MaiaGraphicRendererLooper)

            protected:
                _CTOR_DEFAULT()

            public:
                static CloneRendererLooperRefPtr create (const DeviceRefPtr& inpDevice)
                {
                    CloneRendererLooper* pLooper = new CloneRendererLooper (maia_graphic_clone_renderer_looper_new (const_cast<MaiaGraphicDevice*> (inpDevice->gobj ())));
                    return CloneRendererLooperRefPtr (pLooper);
                }
        };

#ifndef DOXYGEN_SHOULD_SKIP_THIS
        class CloneRendererObject final : public RendererObject
        {
            _CLASS_GOBJECT(CloneRendererObject, MaiaGraphicCloneRenderer, MAIA_GRAPHIC_CLONE_RENDERER, RendererObject, MaiaGraphicRenderer)

            protected:
                _CTOR_DEFAULT()

                CloneRendererObject (const Rectangle& inArea, const DeviceRefPtr& inpDevice);

            public:
                static Glib::RefPtr<CloneRendererObject> create (const Rectangle& inArea, const DeviceRefPtr& inpDevice)
                {
                    return Glib::RefPtr<CloneRendererObject> (new CloneRendererObject (inArea, inpDevice));
                }
        };
#endif

        typedef Glib::RefPtr<class CloneRenderer> CloneRendererRefPtr;

        class CloneRenderer : public Renderer
        {
            public:
                virtual ~CloneRenderer ();

                static CloneRendererRefPtr create (const Rectangle& inArea, const DeviceRefPtr& inpDevice)
                {
                    return CloneRendererRefPtr (new CloneRenderer (inArea, inpDevice));
                }

            protected:
                CloneRenderer (const Rectangle& inArea, const DeviceRefPtr& inpDevice);
        };
    }
}
