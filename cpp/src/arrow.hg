/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * arrow.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-point.h>
#include <maiamm/item-movable.h>
#include <maiamm/item.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    /**
     * @includedoc MaiaArrow.doc
     */
    class Arrow : public Item, public ItemMovable
    {
        _CLASS_GOBJECT(Arrow, MaiaArrow, MAIA_ARROW, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemMovable)

        protected:
            _CTOR_DEFAULT()

            explicit Arrow(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<Arrow>;

            static Arrow::RefPtr create (const Glib::ustring& inId)
            {
                MaiaArrow* pArrow = maia_arrow_new (inId.c_str ());

                return Arrow::RefPtr (new Arrow (pArrow));
            }

            _IGNORE(maia_arrow_get_start)
            _WRAP_METHOD_DOCS_ONLY(maia_arrow_get_start)
            Graphic::Point get_start () const
            {
                Graphic::Point ret;
                maia_arrow_get_start(const_cast<MaiaArrow*> (gobj ()), ret.gobj ());
                return ret;
            }
            _WRAP_METHOD(void set_start (const Graphic::Point& inStart), maia_arrow_set_start)

            _IGNORE(maia_arrow_get_end)
            _WRAP_METHOD_DOCS_ONLY(maia_arrow_get_end)
            Graphic::Point get_end () const
            {
                Graphic::Point ret;
                maia_arrow_get_end(const_cast<MaiaArrow*> (gobj ()), ret.gobj ());
                return ret;
            }

            _WRAP_METHOD(Glib::ustring get_linked_item () const, maia_arrow_get_linked_item)
            _WRAP_METHOD(void set_linked_item (const Glib::ustring& inLinkedItemName), maia_arrow_set_linked_item)

            _WRAP_METHOD(double get_arrow_width () const, maia_arrow_get_arrow_width)
            _WRAP_METHOD(void set_arrow_width (double inArrowWidth), maia_arrow_set_arrow_width)

            _WRAP_METHOD(double get_arrow_angle () const, maia_arrow_get_arrow_angle)
            _WRAP_METHOD(void set_arrow_angle (double inArrowAngle), maia_arrow_set_arrow_angle)

            _WRAP_PROPERTY("start", Graphic::Point)
            _WRAP_PROPERTY("end", Graphic::Point)
            _WRAP_PROPERTY("linked-item", Glib::ustring)
            _WRAP_PROPERTY("arrow-width", double)
            _WRAP_PROPERTY("arrow-angle", double)
    };
}
