/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * input-devices.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/input-device.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)

namespace Maia
{
    class InputDevicesIterator
    {
        _CLASS_BOXEDTYPE(InputDevicesIterator, MaiaInputDevicesIterator, NONE, (MaiaInputDevicesIterator*)maia_input_devices_iterator_ref, maia_input_devices_iterator_unref)

        public:
            inline InputDevicesIterator& operator++()
            {
                next ();
                return *this;
            }

            inline const InputDevicesIterator operator++(int inCount)
            {
                for (int cpt = 0; cpt < inCount && next (); ++cpt);
                return *this;
            }

            _IGNORE(maia_input_devices_iterator_get)
            inline Glib::RefPtr<InputDevice> operator*()
            {
                return Glib::wrap (maia_input_devices_iterator_get (gobject_), true);
            }

            _IGNORE(maia_input_devices_iterator_compare)
            inline bool operator== (const InputDevicesIterator& rhs)
            {
                return maia_input_devices_iterator_compare (gobj (), const_cast<MaiaInputDevicesIterator*> (rhs.gobj ()));
            }

            inline bool operator!= (const InputDevicesIterator& rhs)
            {
                return !maia_input_devices_iterator_compare (gobj (), const_cast<MaiaInputDevicesIterator*> (rhs.gobj ()));
            }

            _WRAP_METHOD(bool next (), maia_input_devices_iterator_next)
    };

    class InputDevices : public Glib::Object
    {
        _CLASS_GOBJECT(InputDevices, MaiaInputDevices, MAIA_INPUT_DEVICES, Glib::Object, GObject)
        _IGNORE(maia_input_devices_iterator)

        protected:
            _CTOR_DEFAULT()

        public:
            typedef InputDevicesIterator iterator;

            static Glib::RefPtr<InputDevices> create ()
            {
                MaiaInputDevices* pInputDevices = maia_input_devices_new ();
                return Glib::RefPtr<InputDevices> (new InputDevices (pInputDevices));
            }

            _WRAP_METHOD(int size (), maia_input_devices_get_length)

            _IGNORE(maia_input_devices_get)
            inline Glib::RefPtr<InputDevice>
            at (int inIndex)
            {
                return Glib::wrap (maia_input_devices_get (gobj (), inIndex), true);
            }

            _WRAP_METHOD(InputDevices::iterator begin (), maia_input_devices_iterator_begin)
            _WRAP_METHOD(InputDevices::iterator end (), maia_input_devices_iterator_end)

            _WRAP_METHOD(void add (const Glib::RefPtr<InputDevice>& inpDevice), maia_input_devices_add)
            _WRAP_METHOD(void remove (const Glib::RefPtr<InputDevice>& inpDevice), maia_input_devices_remove)

            _WRAP_PROPERTY ("length", int)
    };
}
