/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-rectangle.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

namespace Maia
{
    namespace Graphic
    {
        Rectangle::Rectangle (double inX, double inY, double inWidth, double inHeight)
        {
            maia_graphic_rectangle_init (&gobject_, inX, inY, inWidth, inHeight);
        }

        Rectangle Rectangle::copy ()
        {
            MaiaGraphicRectangle rect;
            maia_graphic_rectangle_copy (&gobject_, &rect);
            return Rectangle (rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
        }

        bool Rectangle::is_empty ()
        {
            return maia_graphic_rectangle_is_empty (&gobject_);
        }

        void Rectangle::intersect (const Rectangle& inRectangle)
        {
            maia_graphic_rectangle_intersect (&gobject_, const_cast<MaiaGraphicRectangle*>(&inRectangle.gobject_));
        }

        void Rectangle::union_ (const Rectangle& inRectangle)
        {
            maia_graphic_rectangle_union_ (&gobject_, const_cast<MaiaGraphicRectangle*>(&inRectangle.gobject_));
        }

        void Rectangle::translate (const Point& inOffset)
        {
            maia_graphic_rectangle_translate (&gobject_, const_cast<MaiaGraphicPoint*>(inOffset.gobj ()));
        }

        void Rectangle::transform (const Glib::RefPtr<Transform>& inTransform)
        {
            maia_graphic_rectangle_transform (&gobject_, const_cast<MaiaGraphicTransform*>(inTransform->gobj ()));
        }

        void Rectangle::clamp (const Rectangle& inRectangle)
        {
            maia_graphic_rectangle_clamp (&gobject_, const_cast<MaiaGraphicRectangle*>(&inRectangle.gobject_));
        }

        bool Rectangle::contains (const Point& inPoint)
        {
            return maia_graphic_rectangle_contains (&gobject_, const_cast<MaiaGraphicPoint*>(inPoint.gobj ()));
        }

        Glib::ustring Rectangle::to_string ()
        {
            Glib::ustring ret (maia_graphic_rectangle_to_string (&gobject_));
            return ret;
        }
    }
}
