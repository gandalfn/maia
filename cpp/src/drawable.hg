/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * drawable.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-region.h>
#include <maiamm/graphic-transform.h>
#include <maiamm/graphic-context.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)

namespace Maia
{
    class Drawable : public Glib::Interface
    {
        _CLASS_INTERFACE(Drawable, MaiaDrawable, MAIA_DRAWABLE, MaiaDrawableIface)

        protected:
            _WRAP_VFUNC(Glib::RefPtr<Graphic::Region> get_geometry (), get_geometry)
            _WRAP_VFUNC(void set_geometry (const Glib::RefPtr<Graphic::Region>& inGeometry), set_geometry)
            _WRAP_VFUNC(Glib::RefPtr<Graphic::Region> get_damaged (), get_damaged)
            _WRAP_VFUNC(void set_damaged (const Glib::RefPtr<Graphic::Region>& inArea), set_damaged)
            _WRAP_VFUNC(Glib::RefPtr<Graphic::Transform> get_transform (), get_transform)
            _WRAP_VFUNC(void set_transform (const Glib::RefPtr<Graphic::Transform>& inTransform), set_transform)
            _WRAP_VFUNC(void draw (const Glib::RefPtr<Graphic::Context>& inContext), draw, errthrow)

            _WRAP_METHOD(void set_geometry (const Glib::RefPtr<Graphic::Region>& inGeometry), maia_drawable_set_geometry)
            _WRAP_METHOD(void set_damaged (const Glib::RefPtr<Graphic::Region>& inArea), maia_drawable_set_damaged)

        public:
            _WRAP_METHOD(Glib::RefPtr<Graphic::Region> get_geometry () const, maia_drawable_get_geometry)
            _WRAP_METHOD(void get_geometry (const Glib::RefPtr<Graphic::Region>& inGeometry), maia_drawable_set_geometry)

            inline void unset_geometry ()
            {
                maia_drawable_set_geometry (gobj(), 0);
            }

            _WRAP_METHOD(Glib::RefPtr<Graphic::Region> get_damaged () const, maia_drawable_get_damaged)
            _WRAP_METHOD(Glib::RefPtr<Graphic::Transform> get_transform () const, maia_drawable_get_transform)
            _WRAP_METHOD(void set_transform (const Glib::RefPtr<Graphic::Transform>& inTransform), maia_drawable_set_transform)

            _WRAP_METHOD(void draw (const Glib::RefPtr<Graphic::Context>& inContext), maia_drawable_draw, errthrow)

            _WRAP_SIGNAL(void damage (const Glib::RefPtr<Graphic::Region>& inArea), "damage")
            _WRAP_SIGNAL(void repair (const Glib::RefPtr<Graphic::Region>& inArea), "repair")

            _WRAP_PROPERTY("geometry", Glib::RefPtr<Graphic::Region>)
            _WRAP_PROPERTY("damaged", Glib::RefPtr<Graphic::Region>)
            _WRAP_PROPERTY("transform", Glib::RefPtr<Graphic::Transform>)
    };
}
