/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * item.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-set.h>
#include <maiamm/graphic-line-type.h>
#include <maiamm/graphic-point.h>
#include <maiamm/graphic-size.h>
#include <maiamm/graphic-region.h>
#include <maiamm/manifest-element.h>
#include <maiamm/manifest-theme.h>
#include <maiamm/drawable.h>
#include <maiamm/state.h>
#include <maiamm/gesture.h>
#include <maiamm/key.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    class Window;

    _WRAP_ENUM(class Scroll, MaiaScroll, s#SCROLL_##, NO_GTYPE)
    _WRAP_ENUM(class Cursor, MaiaCursor, s#CURSOR_##, NO_GTYPE)
    _WRAP_ENUM(class Placement, MaiaPlacement, s#PLACEMENT_##, NO_GTYPE)

    class Item : public Core::Object, public Drawable, public Manifest::Element
    {
        _CLASS_GOBJECT(Item, MaiaItem, MAIA_ITEM, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Drawable)
        _IMPLEMENTS_INTERFACE(Manifest::Element)
        _IGNORE(maia_item_on_button_press_event, maia_item_on_button_release_event, maia_item_on_child_damaged,
                maia_item_on_motion_event, maia_item_on_scroll_event, maia_item_get_tag, maia_item_size_request, maia_item_paint,
                maia_item_on_show, maia_item_on_hide, maia_item_on_move, maia_item_on_resize, maia_item_on_damage,
                maia_item_on_child_resized, maia_item_on_draw, maia_item_on_child_need_update, maia_item_on_transform_changed,
                maia_item_on_damage_area, maia_item_on_gesture)

        public:
            using RefPtr = Glib::RefPtr<Item>;

        protected:
            _CTOR_DEFAULT()

            explicit Item(const Glib::ustring& inId);

            _WRAP_VFUNC(Glib::ustring get_tag (), get_tag, custom_vfunc_callback)
            _WRAP_VFUNC(Glib::ustring dump_childs (const Glib::ustring& inPrefix), dump_childs)
            _WRAP_VFUNC(Glib::ustring dump_characters (const Glib::ustring& inPrefix), dump_characters)

#m4 _CONVERSION(`MaiaGraphicContext*', `const Graphic::Context::RefPtr&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaGraphicRegion*', `const Graphic::Region::RefPtr&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaDrawable*', `const Drawable::RefPtr&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3, true)')
#m4 _CONVERSION(`MaiaGestureNotification*', `const Gesture::Notification::RefPtr&', `Glib::wrap($3, true)')
            _WRAP_VFUNC(void on_gesture (const Gesture::Notification::RefPtr& inpNotification), on_gesture)

            _WRAP_VFUNC(void on_damage (const Graphic::Region::RefPtr& inArea), on_damage)
            _WRAP_VFUNC(void on_child_need_update (const Item::RefPtr& inChild), on_child_need_update)
            _WRAP_VFUNC(void on_child_damaged (const Drawable::RefPtr& inChild, const Graphic::Region::RefPtr& inArea), on_child_damaged)
            _WRAP_VFUNC(void on_child_resized (const Drawable::RefPtr& inChild), on_child_resized)
            _WRAP_VFUNC(void on_show (), on_show)
            _WRAP_VFUNC(void on_hide (), on_hide)
            _WRAP_VFUNC(void on_move (), on_move)
            _WRAP_VFUNC(void on_resize (), on_resize)
            _WRAP_VFUNC(void on_draw (const Graphic::Context::RefPtr& inContext, const Graphic::Region::RefPtr& inArea), on_draw, errthrow)
            _WRAP_VFUNC(bool on_button_press_event (unsigned int inButton, const Graphic::Point& inPoint), on_button_press_event)
            _WRAP_VFUNC(bool on_button_release_event (unsigned int inButton, const Graphic::Point& inPoint), on_button_release_event)
            _WRAP_VFUNC(bool on_motion_event (const Graphic::Point& inPoint), on_motion_event)
            _WRAP_VFUNC(bool on_scroll_event (Scroll inScroll, const Graphic::Point& inPoint), on_scroll_event)
            _WRAP_VFUNC(void on_transform_changed (), on_transform_changed)

            _WRAP_VFUNC(void size_request (const Graphic::Size& inSize, Graphic::Size& outSize), size_request)
            _WRAP_VFUNC(void paint (const Graphic::Context::RefPtr& inContext, const Graphic::Region::RefPtr& inArea), paint, errthrow)
            _WRAP_VFUNC(void update (const Graphic::Context::RefPtr& inContext, const Graphic::Region::RefPtr& inAllocation), update, errthrow)
#m4 _CONVERSION(`MaiaGestureNotification*', `const Gesture::Notification::RefPtr&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaGraphicContext*', `const Graphic::Context::RefPtr&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaGraphicRegion*', `const Graphic::Region::RefPtr&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaDrawable*', `const Drawable::RefPtr&', `Glib::wrap($3)')
#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3)')

            _WRAP_METHOD(void paint_background (const Graphic::Context::RefPtr& inContext), maia_item_paint_background, errthrow)

        public:
            using SlotRootChanged = sigc::slot<void>;

            _WRAP_METHOD(Glib::ustring get_name () const, maia_item_get_name)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_METHOD(Glib::RefPtr<Window> get_window () const, maia_item_get_window, refreturn)
            _WRAP_METHOD(void set_window (const Glib::RefPtr<Window>& inNativeWindow), maia_item_set_window)
#else
            Window::RefPtr get_window () const;
            void set_window (const Window::RefPtr& inNativeWindow);
#endif

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            _WRAP_METHOD(Glib::RefPtr<Window> get_toplevel () const, maia_item_get_toplevel, refreturn)
#else
            Window::RefPtr get_toplevel () const;
#endif

            _WRAP_METHOD(bool is_packable () const, maia_item_get_is_packable)

            _WRAP_METHOD(bool is_movable () const, maia_item_get_is_movable)
            _WRAP_METHOD(void set_movable (bool inMovable = true), maia_item_set_is_movable)

            _WRAP_METHOD(bool is_resizable () const, maia_item_get_is_resizable)
            _WRAP_METHOD(void set_resizable (bool inResizable = true), maia_item_set_is_resizable)

            _WRAP_METHOD(bool is_selectable () const, maia_item_get_is_selectable)
            _WRAP_METHOD(void set_selectable (bool inSelectable = true), maia_item_set_is_selectable)

            _WRAP_METHOD(bool visible () const, maia_item_get_visible)
            _WRAP_METHOD(void set_visible (bool inVisible = true), maia_item_set_visible)

            _WRAP_METHOD(bool need_update () const, maia_item_get_need_update)
            _WRAP_METHOD(void set_need_update (bool inNeedUpdate = true), maia_item_set_need_update)

            _WRAP_METHOD(void get_position (Graphic::Point& outPoint) const, maia_item_get_position)
            _WRAP_METHOD(void set_position (const Graphic::Point& inPosition), maia_item_set_position)

            _WRAP_METHOD(void get_size (Graphic::Size& outSize) const, maia_item_get_size)
            _WRAP_METHOD(void set_size (const Graphic::Size& inSize), maia_item_set_size)

            _WRAP_METHOD(unsigned int get_layer () const, maia_item_get_layer)
            _WRAP_METHOD(void set_layer (unsigned int inLayer) const, maia_item_set_layer)

            _WRAP_METHOD(StatePatterns::RefPtr get_fill_pattern () const, maia_item_get_fill_pattern, refreturn)
            _WRAP_METHOD(void set_fill_pattern (const StatePatterns::RefPtr& inPattern), maia_item_set_fill_pattern)

            _WRAP_METHOD(StatePatterns::RefPtr get_stroke_pattern () const, maia_item_get_stroke_pattern, refreturn)
            _WRAP_METHOD(void set_stroke_pattern (const StatePatterns::RefPtr& inPattern), maia_item_set_stroke_pattern)

            _WRAP_METHOD(StatePatterns::RefPtr get_background_pattern () const, maia_item_get_background_pattern, refreturn)
            _WRAP_METHOD(void set_background_pattern (const StatePatterns::RefPtr& inPattern), maia_item_set_background_pattern)

            _WRAP_METHOD(double get_line_width () const, maia_item_get_line_width)
            _WRAP_METHOD(void set_line_width (double inLineWidth), maia_item_set_line_width)

            _WRAP_METHOD(Graphic::LineType get_line_type () const, maia_item_get_line_type)
            _WRAP_METHOD(void set_line_type (Graphic::LineType inLineType), maia_item_set_line_type)

            _WRAP_METHOD(Glib::ustring get_chain_visible () const, maia_item_get_chain_visible)
            _WRAP_METHOD(void set_chain_visible (const Glib::ustring& inItemNames) const, maia_item_set_chain_visible)

            _WRAP_METHOD(bool get_pointer_over () const, maia_item_get_pointer_over)
            _WRAP_METHOD(void set_pointer_over (bool inOver = true), maia_item_set_pointer_over)

            _WRAP_METHOD(State get_state () const, maia_item_get_state)
            _WRAP_METHOD(void set_state (State inState), maia_item_set_state)

            _WRAP_METHOD(Gesture::Notification::RefPtr gesture () const, maia_item_get_gesture)

            void scroll_to (const Item::RefPtr& inItem);

            _WRAP_METHOD(void update (const Graphic::Context::RefPtr& inContext, const Graphic::Region::RefPtr& inAllocation), maia_item_update, errthrow)
            _WRAP_METHOD(void convert_to_item_space (const Graphic::Point& inPoint, Graphic::Point& outPoint), maia_item_convert_to_item_space)
            _WRAP_METHOD(void convert_to_root_space (const Graphic::Point& inPoint, Graphic::Point& outPoint), maia_item_convert_to_root_space)
            _WRAP_METHOD(void convert_to_window_space (const Graphic::Point& inPoint, Graphic::Point& outPoint), maia_item_convert_to_window_space)
            _WRAP_METHOD(void convert_from_window_space (const Graphic::Point& inPoint, Graphic::Point& outPoint), maia_item_convert_from_window_space)

            sigc::connection connect_root_changed (SlotRootChanged inSlot);

            void grab_focus (const Item::RefPtr& inpItem)
            {
                g_signal_emit_by_name (gobj (), "grab-focus", const_cast<MaiaItem*> (inpItem->gobj ()));
            }

            bool grab_pointer ()
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "grab-pointer", gobj (), &ret);
                return (bool)ret;
            }

            bool grab_pointer (const Item::RefPtr& inpItem)
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "grab-pointer", const_cast<MaiaItem*> (inpItem->gobj ()), &ret);
                return (bool)ret;
            }

            bool ungrab_pointer ()
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "ungrab-pointer", gobj (), &ret);
                return (bool)ret;
            }

            bool ungrab_pointer (const Item::RefPtr& inpItem)
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "ungrab-pointer", const_cast<MaiaItem*> (inpItem->gobj ()), &ret);
                return (bool)ret;
            }

            bool grab_keyboard ()
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "grab-keyboard", gobj (), &ret);
                return (bool)ret;
            }

            bool grab_keyboard (const Item::RefPtr& inpItem)
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "grab-keyboard", const_cast<MaiaItem*> (inpItem->gobj ()), &ret);
                return (bool)ret;
            }

            bool ungrab_keyboard ()
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "ungrab-keyboard", gobj (), &ret);
                return (bool)ret;
            }

            bool ungrab_keyboard (const Item::RefPtr& inpItem)
            {
                gboolean ret = false;
                g_signal_emit_by_name (gobj (), "ungrab-keyboard", const_cast<MaiaItem*> (inpItem->gobj ()), &ret);
                return (bool)ret;
            }

            void set_pointer_cursor (Cursor inCursor)
            {
                g_signal_emit_by_name (gobj (), "set-pointer-cursor", inCursor);
            }

            bool button_press_event (unsigned int inButton, const Maia::Graphic::Point& inPoint)
            {
                gboolean ret = FALSE;
                g_signal_emit_by_name (gobj (), "button-press-event", inButton, inPoint.gobj (), &ret);
                return ret;
            }

            bool button_release_event (unsigned int inButton, const Maia::Graphic::Point& inPoint)
            {
                gboolean ret = FALSE;
                g_signal_emit_by_name (gobj (), "button-release-event", inButton, inPoint.gobj (), &ret);
                return ret;
            }

            bool motion_event (const Maia::Graphic::Point& inPoint)
            {
                gboolean ret = FALSE;
                g_signal_emit_by_name (gobj (), "motion-event", inPoint.gobj (), &ret);
                return ret;
            }

            void key_press_event (Modifier inModifier, Key inKey, unsigned int inChar)
            {
                g_signal_emit_by_name (gobj (), "key-press-event", inModifier, inKey, inChar);
            }

            void key_release_event (Modifier inModifier, Key inKey, unsigned int inChar)
            {
                g_signal_emit_by_name (gobj (), "key-release-event", inModifier, inKey, inChar);
            }

            void move_pointer (const Maia::Graphic::Point& inPosition)
            {
                g_signal_emit_by_name (gobj (), "move-pointer", inPosition.gobj ());
            }

#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3, true)')
            _IGNORE(maia_item_grab_pointer)
            _WRAP_SIGNAL(bool grab_pointer (const Item::RefPtr& inItem), "grab-pointer", no_default_handler)
            _IGNORE(maia_item_ungrab_pointer)
            _WRAP_SIGNAL(void ungrab_pointer (const Item::RefPtr& inItem), "ungrab-pointer", no_default_handler)
            _IGNORE(maia_item_grab_keyboard)
            _WRAP_SIGNAL(bool grab_keyboard (const Item::RefPtr& inItem), "grab-keyboard", no_default_handler)
            _IGNORE(maia_item_ungrab_keyboard)
            _WRAP_SIGNAL(void ungrab_keyboard (const Item::RefPtr& inItem), "ungrab-keyboard", no_default_handler)
            _IGNORE(maia_item_button_press_event)
            _WRAP_SIGNAL(bool button_press_event (unsigned int inButton, const Graphic::Point& inPoint), "button-press-event", no_default_handler)
            _IGNORE(maia_item_button_release_event)
            _WRAP_SIGNAL(bool button_release_event (unsigned int inButton, const Graphic::Point& inPoint), "button-release-event", no_default_handler)
            _IGNORE(maia_item_motion_event)
            _WRAP_SIGNAL(bool motion_event (const Graphic::Point& inPoint), "motion-event", no_default_handler)
            _IGNORE(maia_item_scroll_event)
            _WRAP_SIGNAL(bool scroll_event (Scroll inScroll, const Graphic::Point& inPoint), "scroll-event", no_default_handler)
            _IGNORE(maia_item_key_press_event)
            _WRAP_SIGNAL(void key_press_event (Modifier inModifier, Key inKey, unsigned int inChar), "key-press-event", no_default_handler)
            _IGNORE(maia_item_key_release_event)
            _WRAP_SIGNAL(void key_release_event (Modifier inModifier, Key inKey, unsigned int inChar), "key-release-event", no_default_handler)

            _IGNORE(maia_item_grab_focus)
            _WRAP_SIGNAL(void grab_focus (const Item::RefPtr& inItem), "grab-focus")
            _IGNORE(maia_item_set_pointer_cursor)
            _WRAP_SIGNAL(void set_pointer_cursor (Cursor inCursor), "set-pointer-cursor")
            _IGNORE(maia_item_move_pointer)
            _WRAP_SIGNAL(void move_pointer (const Graphic::Point& inPosition), "move-pointer")
            _IGNORE(maia_item_scroll_to)
            _WRAP_SIGNAL(void scroll_to (const Item::RefPtr& inItem), "scroll-to")
#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3)')

            _IGNORE_PROPERTY("tag")
            _IGNORE_PROPERTY("style")
            _IGNORE_PROPERTY("characters")
            _IGNORE_PROPERTY("manifest-path")
            _IGNORE_PROPERTY("manifest-theme")

            _IGNORE_PROPERTY("gesture")

            _IGNORE_PROPERTY("geometry")
            _IGNORE_PROPERTY("damaged")
            _IGNORE_PROPERTY("transform")

            _WRAP_PROPERTY("name", Glib::ustring)
            _WRAP_PROPERTY("window", Window::RefPtr)
            _WRAP_PROPERTY("toplevel", Window::RefPtr)
            _WRAP_PROPERTY("state", State)
            _WRAP_PROPERTY("is-packable", bool)
            _WRAP_PROPERTY("is-movable", bool)
            _WRAP_PROPERTY("is-resizable", bool)
            _WRAP_PROPERTY("is-selectable", bool)
            _WRAP_PROPERTY("need-update", bool)
            _WRAP_PROPERTY("visible", bool)
            _WRAP_PROPERTY("position", Graphic::Point)
            _WRAP_PROPERTY("size", Graphic::Size)
            _WRAP_PROPERTY("layer", unsigned int)
            _WRAP_PROPERTY("fill-pattern", StatePatterns::RefPtr)
            _WRAP_PROPERTY("stroke-pattern", StatePatterns::RefPtr)
            _WRAP_PROPERTY("background-pattern", StatePatterns::RefPtr)
            _WRAP_PROPERTY("line-width", double)
            _WRAP_PROPERTY("line-type", Graphic::LineType)
            _WRAP_PROPERTY("chain-visible", Glib::ustring)

            _WRAP_PROPERTY("pointer-over", bool)

        private:
            Glib::ustring m_Tag;
    };
}
