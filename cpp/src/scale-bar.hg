/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * scale-bar.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/group.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/adjustment.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    class ScaleBar : public Group, public ItemPackable, public ItemMovable, public ItemFocusable
    {
        _CLASS_GOBJECT(ScaleBar, MaiaScaleBar, MAIA_SCALE_BAR, Group, MaiaGroup)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit ScaleBar(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<ScaleBar>;

            static ScaleBar::RefPtr create (const Glib::ustring& inId)
            {
                MaiaScaleBar* pScaleBar = maia_scale_bar_new (inId.c_str());
                return ScaleBar::RefPtr (new ScaleBar (pScaleBar));
            }

            _WRAP_METHOD(Adjustment::RefPtr get_adjustment () const, maia_scale_bar_get_adjustment, refreturn)
            _WRAP_METHOD(void set_adjustment (const Adjustment::RefPtr& inAdjustment), maia_scale_bar_set_adjustment)

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_scale_bar_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_scale_bar_set_font_description)

            _WRAP_METHOD(bool display_step_label () const, maia_scale_bar_get_display_step_label)
            _WRAP_METHOD(void set_display_step_label (bool inDisplay = true), maia_scale_bar_set_display_step_label)

            _WRAP_METHOD(Glib::ustring get_step_font_description () const, maia_scale_bar_get_step_font_description)
            _WRAP_METHOD(void set_step_font_description (const Glib::ustring& inFontDesc), maia_scale_bar_set_step_font_description)

            _WRAP_METHOD(Placement get_placement () const, maia_scale_bar_get_placement)
            _WRAP_METHOD(void set_placement (Placement inPlacement), maia_scale_bar_set_placement)

            _WRAP_METHOD(bool display_slide_label () const, maia_scale_bar_get_display_slide_label)
            _WRAP_METHOD(void set_display_slide_label (bool inDisplay = true), maia_scale_bar_set_display_slide_label)

            _WRAP_METHOD(bool display_step_middle () const, maia_scale_bar_get_display_step_middle)
            _WRAP_METHOD(void set_display_step_middle (bool inDisplay = true), maia_scale_bar_set_display_step_middle)

            _WRAP_METHOD(double get_label_border () const, maia_scale_bar_get_label_border)
            _WRAP_METHOD(void set_label_border (double inBorder), maia_scale_bar_set_label_border)

            _WRAP_METHOD(StatePatterns::RefPtr get_label_stroke_pattern () const, maia_scale_bar_get_label_stroke_pattern)
            _WRAP_METHOD(void set_label_stroke_pattern (const StatePatterns::RefPtr& inPattern), maia_scale_bar_set_label_stroke_pattern)

            _WRAP_METHOD(double get_step_line_width () const, maia_scale_bar_get_step_line_width)
            _WRAP_METHOD(void set_step_line_width (double inBorder), maia_scale_bar_set_step_line_width)

            _WRAP_METHOD(StatePatterns::RefPtr get_step_stroke_pattern () const, maia_scale_bar_get_step_stroke_pattern)
            _WRAP_METHOD(void set_step_stroke_pattern (const StatePatterns::RefPtr& inPattern), maia_scale_bar_set_step_stroke_pattern)

            _WRAP_PROPERTY("adjustment", Adjustment::RefPtr)
            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("placement", Placement)
            _WRAP_PROPERTY("display-slide-label", bool)
            _WRAP_PROPERTY("display-step-middle", bool)
            _WRAP_PROPERTY("label-border", double)
            _WRAP_PROPERTY("label-stroke-pattern", StatePatterns::RefPtr)
            _WRAP_PROPERTY("display-step-label", bool)
            _WRAP_PROPERTY("step-font-description", Glib::ustring)
            _WRAP_PROPERTY("step-line-width", double)
            _WRAP_PROPERTY("step-stroke-pattern", StatePatterns::RefPtr)

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
