/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-surface.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-serializable.h>
#include <maiamm/graphic-size.h>
#include <maiamm/graphic-context.h>
#include <maiamm/graphic-device.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/graphic-pattern_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        class Surface final : public Pattern, public Core::Serializable
        {
            _CLASS_GOBJECT(Surface, MaiaGraphicSurface, MAIA_GRAPHIC_SURFACE, Pattern, MaiaGraphicPattern)
            _IMPLEMENTS_INTERFACE(Core::Serializable)

            protected:
                _CTOR_DEFAULT()

                _WRAP_VFUNC(void clear (), clear, errthrow)
                _WRAP_VFUNC(void fast_blur (int inRadius, int inProcessCount), fast_blur, errthrow)
                _WRAP_VFUNC(void gaussian_blur (int inRadius), gaussian_blur, errthrow)
                _WRAP_VFUNC(void exponential_blur (int inRadius), exponential_blur, errthrow)

            public:
                _WRAP_ENUM(class Format, MaiaGraphicSurfaceFormat, s#GRAPHIC_SURFACE_FORMAT_##,  NO_GTYPE)

                static Glib::RefPtr<Surface> create (unsigned int inWidth, unsigned int inHeight)
                {
                    MaiaGraphicSurface* pSurface = maia_graphic_surface_new (inWidth, inHeight);
                    return Glib::RefPtr<Surface> (new Surface (pSurface));
                }

                _IGNORE(maia_graphic_surface_new)

                static Glib::RefPtr<Surface> create (const Glib::RefPtr<Device>& inDevice, unsigned int inWidth, unsigned int inHeight)
                {
                    MaiaGraphicSurface* pSurface = maia_graphic_surface_new_from_device (const_cast<MaiaGraphicDevice*> (inDevice->gobj ()), inWidth, inHeight);
                    return Glib::RefPtr<Surface> (new Surface (pSurface));
                }

                _IGNORE(maia_graphic_surface_new_similar, maia_graphic_surface_set_surface)
                static Glib::RefPtr<Surface> create (const Glib::RefPtr<Surface>& inSurface, unsigned int inWidth, unsigned int inHeight)
                {
                    MaiaGraphicSurface* pSurface = maia_graphic_surface_new_similar (const_cast<MaiaGraphicSurface*> (inSurface->gobj ()), inWidth, inHeight);
                    return Glib::RefPtr<Surface> (new Surface (pSurface));
                }

                _IGNORE(maia_graphic_surface_new_from_device)

                static Glib::RefPtr<Surface> create (Surface::Format inFormat, unsigned char* inpData, unsigned int inWidth, unsigned int inHeight)
                {
                    MaiaGraphicSurface* pSurface = maia_graphic_surface_new_from_data ((MaiaGraphicSurfaceFormat)inFormat, inpData, inWidth, inHeight);
                    return Glib::RefPtr<Surface> (new Surface (pSurface));
                }

                _IGNORE(maia_graphic_surface_new_from_data)

                static Glib::RefPtr<Surface> create (void* inpNative, unsigned int inWidth, unsigned int inHeight)
                {
                    MaiaGraphicSurface* pSurface = maia_graphic_surface_new_from_native (inpNative, inWidth, inHeight);
                    return Glib::RefPtr<Surface> (new Surface (pSurface));
                }

                _IGNORE(maia_graphic_surface_new_from_native)

                _IGNORE(maia_graphic_surface_set_format)
                _WRAP_METHOD(Surface::Format get_format () const, maia_graphic_surface_get_format)
                _WRAP_METHOD(void get_size (Size& outSize) const, maia_graphic_surface_get_size)
                _WRAP_METHOD(void set_size (const Size& inSize), maia_graphic_surface_set_size)
                _WRAP_METHOD(Glib::RefPtr<Context> get_context () const, maia_graphic_surface_get_context, refreturn)
                _WRAP_METHOD(Glib::RefPtr<Device> get_device () const, maia_graphic_surface_get_device, refreturn)
                _WRAP_METHOD(void set_device (const Glib::RefPtr<Device>& inpDevice), maia_graphic_surface_set_device)
                _WRAP_METHOD(guchar* get_data () const, maia_graphic_surface_get_data)
                _WRAP_METHOD(void* get_native () const, maia_graphic_surface_get_native)
                _WRAP_METHOD(void set_native (void* inpNative), maia_graphic_surface_set_native)
                _WRAP_METHOD(Glib::VariantBase serialize (), maia_graphic_surface_get_serialize)
                _WRAP_METHOD(void unserialize (const Glib::VariantBase& inData), maia_graphic_surface_set_serialize)

                _WRAP_METHOD(void status (), maia_graphic_surface_status, errthrow)
                _WRAP_METHOD(void flush (), maia_graphic_surface_flush, errthrow)
                _WRAP_METHOD(void clear (), maia_graphic_surface_clear, errthrow)
                _WRAP_METHOD(void fast_blur (int inRadius, int inProcessCount = 1), maia_graphic_surface_fast_blur, errthrow)
                _WRAP_METHOD(void gaussian_blur (int inRadius), maia_graphic_surface_gaussian_blur, errthrow)
                _WRAP_METHOD(void exponential_blur (int inRadius), maia_graphic_surface_exponential_blur, errthrow)

                _WRAP_METHOD(void dump (const Glib::ustring& inFilename), maia_graphic_surface_dump, errthrow)

                _WRAP_PROPERTY ("format", Surface::Format)
                _WRAP_PROPERTY ("size", Size)
                _WRAP_PROPERTY ("context", Glib::RefPtr<Context>)
                _WRAP_PROPERTY ("device", Glib::RefPtr<Device>)
                _WRAP_PROPERTY ("data", guchar*)
                _WRAP_PROPERTY ("native", void*)

            private:
                 _WRAP_PROPERTY("serialize", Glib::VariantBase)
                 _WRAP_PROPERTY("surface", Glib::RefPtr<Surface>)
        };

    }
}
