/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * group.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-size.h>
#include <maiamm/item.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)

namespace Maia
{
    class Group : public Item
    {
        _CLASS_GOBJECT(Group, MaiaGroup, MAIA_GROUP, Item, MaiaItem)
        _IGNORE(maia_group_childs_size_request)

        protected:
            _CTOR_DEFAULT()

            _WRAP_VFUNC(void childs_size_request (Graphic::Size& outSize), childs_size_request)

        public:
            static Glib::RefPtr<Group> create (const Glib::ustring& inId)
            {
                MaiaGroup* pGroup = maia_group_new (inId.c_str ());

                return Glib::RefPtr<Group> (new Group (pGroup));
            }

            _WRAP_METHOD(Glib::RefPtr<Item> get_item_over_pointer () const, maia_group_get_item_over_pointer)
            _WRAP_METHOD(void set_pointer_over_pointer (const Glib::RefPtr<Item>& inItem), maia_group_set_item_over_pointer)

            _WRAP_PROPERTY("item-over-pointer", Glib::RefPtr<Item>)

    };
}
