/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * focus-group.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/manifest-element.h>
#include <maiamm/manifest-theme.h>
#include <maiamm/item-focusable.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    class ItemFocusable;

    class FocusGroup : public Core::Object, public Manifest::Element
    {
        _CLASS_GOBJECT(FocusGroup, MaiaFocusGroup, MAIA_FOCUS_GROUP, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Manifest::Element)

        _IGNORE(maia_focus_group_get_items)

        protected:
            _CTOR_DEFAULT()

            explicit FocusGroup(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<FocusGroup>;

            static FocusGroup::RefPtr create ()
            {
                return FocusGroup::RefPtr (new FocusGroup ());
            }

            _WRAP_METHOD(Glib::ustring get_name () const, maia_focus_group_get_name)

            _WRAP_METHOD(void add (const ItemFocusable::RefPtr& inItem), maia_focus_group_add)
            _WRAP_METHOD(void remove (const ItemFocusable::RefPtr& inItem), maia_focus_group_remove)

            std::vector<ItemFocusable::RefPtr> get_items () const;

            _WRAP_METHOD(ItemFocusable::RefPtr current () const, maia_focus_group_get_current, refreturn)

            _WRAP_METHOD(void prev () const, maia_focus_group_prev)
            _WRAP_METHOD(void next () const, maia_focus_group_next)

            _WRAP_PROPERTY("name", Glib::ustring)
            _WRAP_PROPERTY("current", ItemFocusable::RefPtr)

            _IGNORE_PROPERTY("items")

            _IGNORE_PROPERTY("tag")
            _IGNORE_PROPERTY("style")
            _IGNORE_PROPERTY("characters")
            _IGNORE_PROPERTY("manifest-path")
            _IGNORE_PROPERTY("manifest-theme")
    };
}
