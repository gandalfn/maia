/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * manifest-attribute.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    namespace Manifest
    {
        _GMMPROC_EXTRA_NAMESPACE(Manifest)

        class Attribute : public Core::Object
        {
            _CLASS_GOBJECT(Attribute, MaiaManifestAttribute, MAIA_MANIFEST_ATTRIBUTE, Core::Object, MaiaCoreObject)

            public:
                typedef sigc::slot<void, Glib::RefPtr<Attribute>, Glib::ValueBase& > SlotTransformFunc;

                _IGNORE(maia_manifest_attribute_transform)

                template<typename T>
                inline operator T() const
                {
                    Glib::Value<T> cppValue;
                    cppValue.init (Glib::Value<T>::value_type ());
                    GValue* cValue = maia_manifest_attribute_transform (Glib::Value<T>::value_type ());
                    g_value_copy (cValue, cppValue.gobj ());
                    g_value_unset (cValue);
                    return cppValue.get ();
                }

                _WRAP_METHOD(Glib::RefPtr<Glib::Object> get_owner () const, maia_manifest_attribute_get_owner)

                _WRAP_METHOD(Glib::ustring get () const, maia_manifest_attribute_get)

                _WRAP_PROPERTY("owner", Glib::RefPtr<Glib::Object>)

                _IGNORE(maia_manifest_attribute_register_transform_func)
                static void register_transform_func (GType inType, SlotTransformFunc);

        };
    }
}
