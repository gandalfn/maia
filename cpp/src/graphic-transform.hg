/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * graphic-transform.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/core-notification.h>
#include <maiamm/graphic-matrix.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)
_PINCLUDE(maiamm/private/core-notification_p.h)

namespace Maia
{
    namespace Graphic
    {
        _GMMPROC_EXTRA_NAMESPACE(Graphic)

        class Transform;

        typedef Glib::RefPtr<class Transform> TransformRefPtr;
        typedef Glib::RefPtr<class TransformChangedNotification> TransformChangedNotificationRefPtr;

        class TransformChangedNotification : public Core::Notification
        {
            _CLASS_GOBJECT(TransformChangedNotification, MaiaGraphicTransformChangedNotification, MAIA_GRAPHIC_TRANSFORM_CHANGED_NOTIFICATION, Core::Notification, MaiaCoreNotification)

            protected:
                _CTOR_DEFAULT()

            public:
                _WRAP_METHOD(TransformRefPtr get_transform () const, maia_graphic_transform_changed_notification_get_transform, refreturn)
                _WRAP_METHOD(void set_transform (const TransformRefPtr& inTransform) const, maia_graphic_transform_changed_notification_set_transform)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                _WRAP_PROPERTY("transform", TransformRefPtr)
#endif
        };

        class Transform : public Core::Object
        {
            _CLASS_GOBJECT(Transform, MaiaGraphicTransform, MAIA_GRAPHIC_TRANSFORM, Core::Object, MaiaCoreObject)

            protected:
                _CTOR_DEFAULT()

            public:
                _IGNORE(maia_graphic_transform_init)
                static TransformRefPtr create ()
                {
                    MaiaGraphicTransform* pTransform = maia_graphic_transform_new_identity ();
                    return TransformRefPtr (new Transform (pTransform));
                }

                static TransformRefPtr create (const Matrix& inMatrix)
                {
                    MaiaGraphicTransform* pTransform = maia_graphic_transform_new_from_matrix (const_cast<MaiaGraphicMatrix*> (inMatrix.gobj ()));
                    return TransformRefPtr (new Transform (pTransform));
                }

                static TransformRefPtr create (double inXX, double inYX, double inXY, double inYY, double inX0, double inY0)
                {
                    MaiaGraphicTransform* pTransform = maia_graphic_transform_new (inXX, inYX, inXY, inYY, inX0, inY0);
                    return TransformRefPtr (new Transform (pTransform));
                }

                _IGNORE(maia_graphic_transform_new_invert)
                static TransformRefPtr create_invert (const TransformRefPtr& inTransform)
                {
                    GError* gerror = 0;

                    MaiaGraphicTransform* pTransform = maia_graphic_transform_new_invert (const_cast<MaiaGraphicTransform*> (inTransform->gobj ()), &(gerror));
                    if(gerror) ::Glib::Error::throw_exception(gerror);
                    return TransformRefPtr (new Transform (pTransform));
                }

                _IGNORE(maia_graphic_transform_get_matrix)
                Matrix get_matrix () const
                {
                    MaiaGraphicMatrix matrix;
                    maia_graphic_transform_get_matrix (MAIA_GRAPHIC_TRANSFORM (gobject_), &matrix);

                    return Matrix (&matrix);
                }

                _IGNORE(maia_graphic_transform_get_matrix_invert)
                Matrix get_matrix_invert () const
                {
                    MaiaGraphicMatrix matrix;
                    maia_graphic_transform_get_matrix_invert (MAIA_GRAPHIC_TRANSFORM (gobject_), &matrix);

                    return Matrix (&matrix);
                }

                _WRAP_METHOD(TransformRefPtr copy () const, maia_graphic_transform_copy)
                _WRAP_METHOD(TransformRefPtr link () const, maia_graphic_transform_link)

                _WRAP_METHOD(TransformChangedNotificationRefPtr changed (), maia_graphic_transform_get_changed)

                _WRAP_METHOD(bool have_rotate () const, maia_graphic_transform_get_have_rotate)

                _WRAP_METHOD(bool is_rotate () const, maia_graphic_transform_get_is_rotate)
                _WRAP_METHOD(void set_is_rotate (bool inIsRotate = true) const, maia_graphic_transform_set_is_rotate)

                _WRAP_METHOD(void append (const TransformRefPtr& inTransform), maia_graphic_transform_append)
                _WRAP_METHOD(void prepend (const TransformRefPtr& inTransform), maia_graphic_transform_prepend)

                _WRAP_METHOD(void translate (double inX, double inY), maia_graphic_transform_translate)
                _WRAP_METHOD(void scale (double inSx, double inSy), maia_graphic_transform_scale)
                _WRAP_METHOD(void rotate (double inRadians), maia_graphic_transform_rotate)
                _WRAP_METHOD(void skew_x (double inRadians), maia_graphic_transform_skew_x)
                _WRAP_METHOD(void skew_y (double inRadians), maia_graphic_transform_skew_y)
                _WRAP_METHOD(void apply (const Matrix& inMatrix), maia_graphic_transform_apply)
                _WRAP_METHOD(void apply_center_rotate (double inCx, double inCy), maia_graphic_transform_apply_center_rotate)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
                _WRAP_PROPERTY("is-rotate", bool)
                _WRAP_PROPERTY("have-rotate", bool)
                _WRAP_PROPERTY("changed", TransformChangedNotificationRefPtr)
#endif
        };
    }
}
