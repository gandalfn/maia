/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * core-object.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>

#include "maiamm/core-any.h"

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-any_p.h)

namespace Maia
{
    namespace Core
    {
        _GMMPROC_EXTRA_NAMESPACE(Core)

        class ObjectIterator;
        class Object;

        class ObjectProxy
        {
            public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                inline ObjectProxy(const Glib::RefPtr<Object>& inpObject) :
                    m_pObject (inpObject)
                {
                }
#endif
                template <typename T>
                inline ObjectProxy& operator=(const Glib::RefPtr<T>& inpObject);

                template <typename T>
                inline operator Glib::RefPtr<T>() const;

            private:
                Glib::RefPtr<Object> m_pObject;

                // no copy assignment
                ObjectProxy& operator=(const ObjectProxy&) { return *this; }
        };

        class ObjectDerivedProxy
        {
            public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
                inline ObjectDerivedProxy(MaiaCoreObject* inpObject) :
                    m_pObject (inpObject)
                {
                }
#endif
                template <typename T>
                inline ObjectDerivedProxy& operator=(const Glib::RefPtr<T>& inpObject);

                template <typename T>
                inline operator Glib::RefPtr<T>() const;

            private:
                MaiaCoreObject* m_pObject;

                // no copy assignment
                ObjectDerivedProxy& operator=(const ObjectDerivedProxy&) { return *this; }
        };

        class Object : public Any
        {
            _CLASS_GOBJECT(Object, MaiaCoreObject, MAIA_CORE_OBJECT, Any, MaiaCoreAny)

            protected:
#m4 _CONVERSION(`MaiaCoreObject*', `const Glib::RefPtr<Object>&', `Glib::wrap($3, true)')
                _WRAP_VFUNC(Glib::RefPtr<Object> get_parent (), get_parent, refreturn_ctype)
                _WRAP_VFUNC(void set_parent (const Glib::RefPtr<Object>& inObject), set_parent)
                _WRAP_VFUNC(void insert_child (const Glib::RefPtr<Object>& inObject), insert_child)
                _WRAP_VFUNC(void remove_child (const Glib::RefPtr<Object>& inObject), remove_child)
                _WRAP_VFUNC(bool can_append_child (const Glib::RefPtr<Object>& inObject), can_append_child)
                _WRAP_VFUNC(int compare (const Glib::RefPtr<Object>& inObject), compare)
                _WRAP_VFUNC(Glib::ustring to_string (), to_string)
#m4 _CONVERSION(`MaiaCoreObject*', `const Glib::RefPtr<Object>&', `Glib::wrap($3)')

                _IGNORE(maia_core_object_remove_child)
                _IGNORE(maia_core_object_insert_child)

            public:
                typedef ObjectIterator iterator;

                _WRAP_METHOD(Glib::QueryQuark get_id () const, maia_core_object_get_id)
                _WRAP_METHOD(void set_id (Glib::QueryQuark inId), maia_core_object_set_id)

                _WRAP_METHOD(Glib::RefPtr<Object> get_parent () const, maia_core_object_get_parent, refreturn)
                _WRAP_METHOD(void set_parent (const Glib::RefPtr<Object>& inParent), maia_core_object_set_parent)

                _WRAP_METHOD(bool can_append_child (const Glib::RefPtr<Object>& inObject), maia_core_object_can_append_child)
                _WRAP_METHOD(void add (const Glib::RefPtr<Object>& inObject), maia_core_object_add)
                _WRAP_METHOD(bool contains (const Glib::RefPtr<Object>& inObject), maia_core_object_contains)

                _IGNORE(maia_core_object_find)
                inline ObjectProxy find (const Glib::ustring& inName, bool inRecurse = true)
                {
                    Glib::RefPtr<Object> pObject;
                    find (inName, pObject, inRecurse);
                    return ObjectProxy (pObject);
                }

                inline ObjectDerivedProxy find_derived (const Glib::ustring& inName, bool inRecurse = true)
                {
                    MaiaCoreObject* pObject = maia_core_object_find(gobj (), g_quark_from_string (inName.c_str ()), (gboolean)inRecurse);
                    return ObjectDerivedProxy (pObject);
                }

                _IGNORE(maia_core_object_find_by_type)
                template <typename T>
                inline void find (const Glib::ustring& inName, Glib::RefPtr<T>& outChild, bool inRecurse = true);

                template <typename T>
                inline void find (std::vector<Glib::RefPtr<T> >& inChilds);

                _WRAP_METHOD (Object::iterator begin (), maia_core_object_iterator)
                _WRAP_METHOD (Object::iterator end (), maia_core_object_iterator_end)

                _WRAP_METHOD(Glib::RefPtr<Object> next (), maia_core_object_next, refreturn)
                _WRAP_METHOD(Glib::RefPtr<Object> prev (), maia_core_object_prev, refreturn)
                _WRAP_METHOD(Glib::RefPtr<Object> first (), maia_core_object_first, refreturn)
                _WRAP_METHOD(Glib::RefPtr<Object> last (), maia_core_object_last, refreturn)

                _WRAP_METHOD(void reorder (), maia_core_object_reorder)
                _WRAP_METHOD(Glib::ustring to_string () const, maia_core_object_to_string)

                _IGNORE(maia_core_object_compare)
                _WRAP_COMPARE(maia_core_object_compare, unconst)

                _WRAP_PROPERTY("id", Glib::QueryQuark)
                _WRAP_PROPERTY("parent", Glib::RefPtr<Object>)

            private:
                template <class T>
                inline void find (const Glib::RefPtr<Object>& inpObject, std::vector<Glib::RefPtr<T> >& inoutList);
        };

        class ObjectIterator
        {
            _CLASS_BOXEDTYPE(ObjectIterator, MaiaCoreObjectIterator, NONE, (MaiaCoreObjectIterator*)maia_core_object_iterator_ref, maia_core_object_iterator_unref)

            public:
                inline ObjectIterator& operator++()
                {
                    next_value ();
                    return *this;
                }

                inline const ObjectIterator operator++(int inCount)
                {
                    for (int cpt = 0; cpt < inCount && next_value (); ++cpt);
                    return *this;
                }

                inline Glib::RefPtr<Object> operator*()
                {
                    return get ();
                }

                inline bool operator== (const ObjectIterator& rhs)
                {
                    return get () == rhs.get ();
                }

                inline bool operator!= (const ObjectIterator& rhs)
                {
                    return get () != rhs.get ();
                }

                _WRAP_METHOD(Glib::RefPtr<Object> next_value (), maia_core_object_iterator_next_value, refreturn)
                _WRAP_METHOD(bool is_end (), maia_core_object_iterator_is_end)
                _WRAP_METHOD(Glib::RefPtr<Object> get () const, maia_core_object_iterator_get, refreturn)
        };

        template <typename T>
        inline void
        Object::find (const Glib::ustring& inName, Glib::RefPtr<T>& outChild, bool inRecurse)
        {
            MaiaCoreObject* pChild = maia_core_object_find(gobj (), g_quark_from_string (inName.c_str ()), (gboolean)inRecurse);
            if (pChild)
                outChild = Glib::RefPtr<T>::cast_dynamic (Glib::wrap (G_OBJECT (pChild), true));
            else
                outChild = Glib::RefPtr<T> (0);
        }

        template <typename T>
        inline void
        Object::find (std::vector<Glib::RefPtr<T> >& inChilds)
        {
            for (iterator iter = begin (); iter != end (); ++iter)
            {
                Glib::RefPtr<Object> pObject = *iter;
                Glib::RefPtr<T> pChild = Glib::RefPtr<T>::cast_dynamic (pObject);

                if (pChild)
                {
                    inChilds.push_back (pChild);
                }
                find (pObject, inChilds);
            }
        }

        template <typename T>
        inline void
        Object::find (const Glib::RefPtr<Object>& inpObject, std::vector<Glib::RefPtr<T> >& inoutList)
        {
            for (iterator iter = inpObject->begin (); iter != inpObject->end (); ++iter)
            {
                Glib::RefPtr<Object> pObject = *iter;
                Glib::RefPtr<T> pChild = Glib::RefPtr<T>::cast_dynamic (pObject);

                if (pChild)
                {
                    inoutList.push_back (pChild);
                }
                find (pObject, inoutList);
            }
        }

        template <typename T>
        inline ObjectProxy& ObjectProxy::operator=(const Glib::RefPtr<T>& inpObject)
        {
            m_pObject = Glib::RefPtr<Object>::cast_dynamic (inpObject);
            return *this;
        }

        template <typename T>
        inline ObjectProxy::operator Glib::RefPtr<T>() const
        {
            return Glib::RefPtr<T>::cast_dynamic (m_pObject);
        }

        template <typename T>
        inline ObjectDerivedProxy& ObjectDerivedProxy::operator=(const Glib::RefPtr<T>& inpObject)
        {
            m_pObject = inpObject->gobj ();
            return *this;
        }

        template <typename T>
        inline ObjectDerivedProxy::operator Glib::RefPtr<T>() const
        {
            Glib::RefPtr<T> pObject = Glib::RefPtr<T> (new T(m_pObject));
            if (pObject)
                pObject->reference ();
            return pObject;
        }
    }
}
