/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * chart-point.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-object.h>
#include <maiamm/graphic-line-type.h>
#include <maiamm/graphic-point.h>
#include <maiamm/graphic-size.h>
#include <maiamm/graphic-pattern.h>
#include <maiamm/manifest-element.h>
#include <maiamm/manifest-theme.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-object_p.h)

namespace Maia
{
    class ChartPoint : public Core::Object, public Manifest::Element
    {
        _CLASS_GOBJECT(ChartPoint, MaiaChartPoint, MAIA_CHART_POINT, Core::Object, MaiaCoreObject)
        _IMPLEMENTS_INTERFACE(Manifest::Element)

        protected:
            _CTOR_DEFAULT()

            explicit ChartPoint(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<ChartPoint>;

            static ChartPoint::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inChart, const Graphic::Point& inPosition)
            {
                MaiaChartPoint* pChartPoint = maia_chart_point_new (inId.c_str(), inChart.c_str (), const_cast<MaiaGraphicPoint*> (inPosition.gobj ()));
                return ChartPoint::RefPtr (new ChartPoint (pChartPoint));
            }

            _WRAP_METHOD(Glib::ustring get_chart () const, maia_chart_point_get_chart)
            _WRAP_METHOD(void set_chart (const Glib::ustring& inChart), maia_chart_point_set_chart)

            _WRAP_METHOD(Glib::ustring get_title () const, maia_chart_point_get_title)
            _WRAP_METHOD(void set_title (const Glib::ustring& inTitle), maia_chart_point_set_title)

            _WRAP_METHOD(Glib::ustring get_path () const, maia_chart_point_get_path)
            _WRAP_METHOD(void set_path (const Glib::ustring& inPath), maia_chart_point_set_path)

            _WRAP_METHOD(void get_position (Graphic::Point& outPosition) const, maia_chart_point_get_position)
            _WRAP_METHOD(void set_position (const Graphic::Point& inPosition), maia_chart_point_set_position)

            _WRAP_METHOD(void get_size (Graphic::Size& outSize) const, maia_chart_point_get_size)
            _WRAP_METHOD(void set_size (const Graphic::Size& inSize), maia_chart_point_set_size)

            _WRAP_METHOD(Graphic::LineType get_line_type () const, maia_chart_point_get_line_type)
            _WRAP_METHOD(void set_line_type (Graphic::LineType inLineType), maia_chart_point_set_line_type)

            _WRAP_METHOD(double get_stroke_width () const, maia_chart_point_get_stroke_width)
            _WRAP_METHOD(void set_stroke_width (double inWidth), maia_chart_point_set_stroke_width)

            _WRAP_METHOD(Graphic::Pattern::RefPtr get_stroke_pattern () const, maia_chart_point_get_stroke_pattern, refreturn)
            _WRAP_METHOD(void set_stroke_pattern (const Graphic::Pattern::RefPtr& inPattern), maia_chart_point_set_stroke_pattern)

            _WRAP_METHOD(Graphic::Pattern::RefPtr get_fill_pattern () const, maia_chart_point_get_fill_pattern, refreturn)
            _WRAP_METHOD(void set_fill_pattern (const Graphic::Pattern::RefPtr& inPattern), maia_chart_point_set_fill_pattern)

            _IGNORE_PROPERTY("tag")
            _IGNORE_PROPERTY("style")
            _IGNORE_PROPERTY("characters")
            _IGNORE_PROPERTY("manifest-path")
            _IGNORE_PROPERTY("manifest-theme")

            _WRAP_PROPERTY("chart", Glib::ustring)
            _WRAP_PROPERTY("title", Glib::ustring)
            _WRAP_PROPERTY("path", Glib::ustring)
            _WRAP_PROPERTY("position", Graphic::Point)
            _WRAP_PROPERTY("size", Graphic::Size)
            _WRAP_PROPERTY("line-type", Graphic::LineType)
            _WRAP_PROPERTY("stroke-width", double)
            _WRAP_PROPERTY("stroke-pattern", Graphic::Pattern::RefPtr)
            _WRAP_PROPERTY("fill-pattern", Graphic::Pattern::RefPtr)
    };
}
