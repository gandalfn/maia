/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * entry.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/graphic-color.h>
#include <maiamm/graphic-pattern.h>
#include <maiamm/graphic-glyph.h>
#include <maiamm/item-packable.h>
#include <maiamm/item-movable.h>
#include <maiamm/item-focusable.h>
#include <maiamm/item.h>
#include <maiamm/label.h>
#include <maiamm/core-event.h>
#include <maiamm/core-eventargs.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/item_p.h)
_PINCLUDE(maiamm/private/core-eventargs_p.h)

namespace Maia
{
    _WRAP_ENUM(EntryChangedMask, MaiaEntryChangedMask, NO_GTYPE)

    /**
     * \includedoc MaiaEntryChangedEventArgs.doc
     */
    class EntryChangedEventArgs : public Core::EventArgs
    {
        _CLASS_GOBJECT(EntryChangedEventArgs, MaiaEntryChangedEventArgs, MAIA_ENTRY_CHANGED_EVENT_ARGS, Core::EventArgs, MaiaCoreEventArgs)

        public:
            using RefPtr = Glib::RefPtr<EntryChangedEventArgs>;

            _WRAP_METHOD(Glib::ustring get_text () const, maia_entry_changed_event_args_get_text)

            _WRAP_PROPERTY("text", Glib::ustring)
    };

    /**
     * \includedoc MaiaEntry.doc
     */
    class Entry : public Item, public ItemPackable, public ItemMovable, public ItemFocusable
    {
        _CLASS_GOBJECT(Entry, MaiaEntry, MAIA_ENTRY, Item, MaiaItem)
        _IMPLEMENTS_INTERFACE(ItemPackable)
        _IMPLEMENTS_INTERFACE(ItemMovable)
        _IMPLEMENTS_INTERFACE(ItemFocusable)

        protected:
            _CTOR_DEFAULT()

            explicit Entry(const Glib::ustring& inId);

        public:
            using RefPtr = Glib::RefPtr<Entry>;

            static Entry::RefPtr create (const Glib::ustring& inId)
            {
                MaiaEntry* pEntry = maia_entry_new (inId.c_str (), 0);

                return Entry::RefPtr (new Entry (pEntry));
            }

            static Entry::RefPtr create (const Glib::ustring& inId, const Glib::ustring& inText)
            {
                MaiaEntry* pEntry = maia_entry_new (inId.c_str (), inText.c_str ());

                return Entry::RefPtr (new Entry (pEntry));
            }

            _WRAP_METHOD(Glib::ustring get_font_description () const, maia_entry_get_font_description)
            _WRAP_METHOD(void set_font_description (const Glib::ustring& inFontDesc), maia_entry_set_font_description)

            _WRAP_METHOD(Glib::ustring get_text () const, maia_entry_get_text)
            _WRAP_METHOD(void set_text (const Glib::ustring& inLabel), maia_entry_set_text)

            _WRAP_METHOD(Graphic::Glyph::Alignment get_alignment () const, maia_entry_get_alignment)
            _WRAP_METHOD(void set_alignment (Graphic::Glyph::Alignment inAlignment), maia_entry_set_alignment)

            _WRAP_METHOD(unsigned int get_lines () const, maia_entry_get_lines)
            _WRAP_METHOD(void set_lines (unsigned int inLines), maia_entry_set_lines)

            _WRAP_METHOD(unsigned int get_width_in_chars () const, maia_entry_get_width_in_chars)
            _WRAP_METHOD(void set_width_in_chars (unsigned int inChars), maia_entry_set_width_in_chars)

            _WRAP_METHOD(double get_underline_width () const, maia_entry_get_underline_width)
            _WRAP_METHOD(void set_underline_width (double inWidth), maia_entry_set_underline_width)

            _WRAP_METHOD(bool get_only_numeric () const, maia_entry_get_only_numeric)
            _WRAP_METHOD(void set_only_numeric (bool inOnlyNumeric = true), maia_entry_set_only_numeric)

            _WRAP_METHOD(EntryChangedMask get_changed_mask () const, maia_entry_get_changed_mask)
            _WRAP_METHOD(void set_changed_mask (EntryChangedMask inMask), maia_entry_set_changed_mask)

            _WRAP_METHOD(bool get_hide_if_empty () const, maia_entry_get_hide_if_empty)
            _WRAP_METHOD(void set_hide_if_empty (bool inHideIfEmpty = true), maia_entry_set_hide_if_empty)

            _WRAP_METHOD(bool touchscreen_mode () const, maia_entry_get_touchscreen_mode)
            _WRAP_METHOD(void set_touchscreen_mode (bool inTouchscrenMode = true), maia_entry_set_touchscreen_mode)

            _WRAP_METHOD(bool always_active () const, maia_entry_get_always_active)
            _WRAP_METHOD(void set_always_active (bool inAlwaysActive = true), maia_entry_set_always_active)

            _WRAP_METHOD(Label::RefPtr labelled_by () const, maia_entry_get_labelled_by, refreturn)
            _WRAP_METHOD(void set_labelled_by (const Label::RefPtr& inLabel), maia_entry_set_labelled_by)

            _WRAP_METHOD(int get_cursor () const, maia_entry_get_cursor)
            _WRAP_METHOD(void set_cursor (int inCursor), maia_entry_set_cursor)

            _WRAP_METHOD(Core::Event::RefPtr changed () const, maia_entry_get_changed, refreturn)

            _WRAP_PROPERTY("font-description", Glib::ustring)
            _WRAP_PROPERTY("text", Glib::ustring)
            _WRAP_PROPERTY("alignment", Graphic::Glyph::Alignment)
            _WRAP_PROPERTY("lines", unsigned int)
            _WRAP_PROPERTY("width-in-chars", unsigned int)
            _WRAP_PROPERTY("underline-width", Glib::ustring)
            _WRAP_PROPERTY("only-numeric", bool)
            _WRAP_PROPERTY("changed-mask", EntryChangedMask)
            _WRAP_PROPERTY("hide-if-empty", bool)
            _WRAP_PROPERTY("touchscreen-mode", bool)
            _WRAP_PROPERTY("always-active", bool)
            _WRAP_PROPERTY("labelled-by", Label::RefPtr)
            _WRAP_PROPERTY("cursor", int)

            _IGNORE_PROPERTY("changed")

            _IGNORE_PROPERTY("can-focus")
            _IGNORE_PROPERTY("have-focus")
            _IGNORE_PROPERTY("focus-order")
            _IGNORE_PROPERTY("focus-group")

            _IGNORE_PROPERTY("row")
            _IGNORE_PROPERTY("rows")

            _IGNORE_PROPERTY("column")
            _IGNORE_PROPERTY("columns")

            _IGNORE_PROPERTY("xexpand")
            _IGNORE_PROPERTY("xfill")
            _IGNORE_PROPERTY("xshrink")
            _IGNORE_PROPERTY("xlimp")
            _IGNORE_PROPERTY("xalign")

            _IGNORE_PROPERTY("yexpand")
            _IGNORE_PROPERTY("yfill")
            _IGNORE_PROPERTY("yshrink")
            _IGNORE_PROPERTY("ylimp")
            _IGNORE_PROPERTY("yalign")

            _IGNORE_PROPERTY("top-padding")
            _IGNORE_PROPERTY("bottom-padding")
            _IGNORE_PROPERTY("left-padding")
            _IGNORE_PROPERTY("right-padding")

            _IGNORE_PROPERTY("backcell-pattern")
    };
}
