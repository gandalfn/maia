/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * item.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/window.h>

namespace Maia
{
    static void
    root_changed_callback (GObject*, GParamSpec*, void* inpData)
    {
        if (inpData)
        {
            Item::SlotRootChanged* pSlot = (Item::SlotRootChanged*)inpData;

            (*pSlot) ();
        }
    }

    static void
    root_changed_destroy_notify_handler (void* inpData, GClosure*)
    {
        Item::SlotRootChanged* pSlot = (Item::SlotRootChanged*)inpData;
        delete pSlot;
    }

    Item::Item(const Glib::ustring& inId) :
        _CONSTRUCT("id", g_quark_from_string (inId.c_str ()))
    {
    }

    sigc::connection
    Item::connect_root_changed (SlotRootChanged inSlot)
    {
        SlotRootChanged* pSlot = new SlotRootChanged (inSlot);
        const Glib::ustring notify_signal_name = "notify::root";

        g_signal_connect_data (gobj(), notify_signal_name.c_str(), (GCallback)(&root_changed_callback),
                               pSlot,  &root_changed_destroy_notify_handler, G_CONNECT_AFTER);

        return sigc::connection(*pSlot);
    }

    void
    Item::scroll_to (const Glib::RefPtr<Item>& inItem)
    {
        g_signal_emit_by_name (gobj (), "scroll-to", const_cast<MaiaItem*> (inItem->gobj ()));
    }

    const gchar*
    Item_Class::get_tag_vfunc_callback (MaiaItem* self)
    {
        static Glib::ustring tag ("");

        Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(Glib::ObjectBase::_get_current_wrapper((GObject*)self));

        if(obj_base && obj_base->is_derived_())
        {
            CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
            if(obj)
            {
#ifdef GLIBMM_EXCEPTIONS_ENABLED
                try
                {
#endif
                    obj->m_Tag = obj->get_tag_vfunc();
                    return obj->m_Tag.c_str ();
#ifdef GLIBMM_EXCEPTIONS_ENABLED
                }
                catch(...)
                {
                    Glib::exception_handlers_invoke();
                }
#endif
            }
        }

        BaseClassType *const base = static_cast<BaseClassType*>(g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)));

        if(base && base->get_tag)
        {
            const gchar* result = (*base->get_tag)(self);
            return result;
        }


        typedef const gchar* RType;
        return RType();
    }
}
