/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * canvas.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/manifest-attribute-bind.h>
#include <maiamm/item.h>
#include <maiamm/window.h>
#include <maiamm/core-notification.h>
#include <maiamm/canvas.h>

_DEFS(maiamm,maia)
_PINCLUDE(glibmm/private/object_p.h)

namespace Maia
{
    class Canvas : public Glib::Interface
    {
        _CLASS_INTERFACE(Canvas, MaiaCanvas, MAIA_CANVAS, MaiaCanvasIface)

        protected:
#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3, true)')
            _WRAP_VFUNC(Item::RefPtr get_root (), get_root, refreturn_ctype)
            _WRAP_VFUNC(void set_root (const Item::RefPtr& inRoot), set_root)
            _WRAP_VFUNC(Window::RefPtr get_window (), get_window, refreturn_ctype)
#m4 _CONVERSION(`MaiaItem*', `const Item::RefPtr&', `Glib::wrap($3)')

        public:
            static Canvas* create ()
            {
                return new Canvas (maia_canvas_create ());
            }

            _WRAP_METHOD(Item::RefPtr get_root () const, maia_canvas_get_root, refreturn)
            _WRAP_METHOD(void set_root (const Item::RefPtr& inRoot), maia_canvas_set_root)
            _WRAP_METHOD(Window::RefPtr get_window () const, maia_canvas_get_window, refreturn)

            _WRAP_METHOD(void clear (), maia_canvas_clear)

            _IGNORE(maia_canvas_load)
            void load (const Glib::ustring& inManifest);
            void load (const Glib::ustring& inManifest, const Glib::ustring& inRoot);

            _IGNORE(maia_canvas_load_from_file)
            void load_from_file (const Glib::ustring& inFilename);
            void load_from_file (const Glib::ustring& inFilename, const Glib::ustring& inRoot);

            _WRAP_METHOD(Core::Notifications::RefPtr notifications (), maia_canvas_get_notifications, refreturn)

            _WRAP_PROPERTY("root", Item::RefPtr)
            _WRAP_PROPERTY("window", Window::RefPtr)

            _IGNORE_PROPERTY("notifications")
    };
}
