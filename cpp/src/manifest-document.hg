/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * manifest-document.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/core-set.h>
#include <maiamm/core-parser.h>
#include <maiamm/core-notification.h>
#include <maiamm/manifest-attribute-scanner.h>
#include <maiamm/manifest-attribute-bind.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/core-notification_p.h)
_PINCLUDE(maiamm/private/core-parser_p.h)

namespace Maia
{
    namespace Manifest
    {
        class Theme;
        class Element;
        class Style;

        _GMMPROC_EXTRA_NAMESPACE(Manifest)

        _WRAP_GERROR(Error, MaiaManifestError, MAIA_MANIFEST_ERROR, NO_GTYPE)

        class DocumentAttributeBindAddedNotification : public Core::Notification
        {
            _CLASS_GOBJECT(DocumentAttributeBindAddedNotification, MaiaManifestDocumentAttributeBindAddedNotification, MAIA_MANIFEST_DOCUMENT_ATTRIBUTE_BIND_ADDED_NOTIFICATION, Core::Notification, MaiaCoreNotification)

            protected:
                _CTOR_DEFAULT()

            public:
                _WRAP_METHOD(Glib::RefPtr<AttributeBind> get_attribute () const, maia_manifest_document_attribute_bind_added_notification_get_attribute, refreturn)
                _WRAP_METHOD(void set_attribute (const Glib::RefPtr<AttributeBind>& inpAttribute), maia_manifest_document_attribute_bind_added_notification_set_attribute)

                _WRAP_METHOD(Glib::ustring get_property () const, maia_manifest_document_attribute_bind_added_notification_get_property)
                _WRAP_METHOD(void set_property (const Glib::ustring& inProperty), maia_manifest_document_attribute_bind_added_notification_set_property)

                _WRAP_PROPERTY("attribute", Glib::RefPtr<AttributeBind>)
                _WRAP_PROPERTY("property", Glib::ustring)
        };

        class Document : public Core::Parser
        {
            _CLASS_GOBJECT(Document, MaiaManifestDocument, MAIA_MANIFEST_DOCUMENT, Core::Parser, MaiaCoreParser)

            protected:
                _CTOR_DEFAULT()

            public:
                static Glib::RefPtr<Document> create (const Glib::ustring& inFilename)
                {
                    GError* gerror = 0;
                    MaiaManifestDocument* pDocument = maia_manifest_document_new (inFilename.c_str(), &gerror);
                    if (gerror) ::Glib::Error::throw_exception(gerror);
                    return Glib::RefPtr<Document> (new Document (pDocument));
                }

                static Glib::RefPtr<Document> create_from_buffer (const Glib::ustring& inBuffer)
                {
                    GError* gerror = 0;
                    MaiaManifestDocument* pDocument = maia_manifest_document_new_from_buffer (inBuffer.c_str(), inBuffer.size (), &gerror);
                    if (gerror) ::Glib::Error::throw_exception(gerror);
                    return Glib::RefPtr<Document> (new Document (pDocument));
                }

                _WRAP_METHOD(Glib::RefPtr<Glib::Object> get_owner () const, maia_manifest_document_get_owner, refreturn)
                _WRAP_METHOD(void set_owner (const Glib::RefPtr<Glib::Object>& inOwner), maia_manifest_document_set_owner)

                _WRAP_METHOD(Glib::ustring get_path () const, maia_manifest_document_get_path)
                _WRAP_METHOD(void set_path (const Glib::ustring& inPath) const, maia_manifest_document_set_path)

                _WRAP_METHOD(Glib::RefPtr<Theme> get_theme () const, maia_manifest_document_get_theme)
                _WRAP_METHOD(void set_theme (const Glib::RefPtr<Theme>& inTheme), maia_manifest_document_set_theme)

                _WRAP_METHOD(Glib::RefPtr<AttributeScanner> get_scanner () const, maia_manifest_document_get_scanner, refreturn)
                _WRAP_METHOD(Glib::ustring get_element_tag () const, maia_manifest_document_get_element_tag)
                _WRAP_METHOD(Glib::ustring get_element_id () const, maia_manifest_document_get_element_id)

                _WRAP_METHOD(Glib::RefPtr<Element> get (const Glib::ustring& inId) const, maia_manifest_document_get, refreturn, errthrow)
                Glib::RefPtr<Element> get () const;

                _WRAP_PROPERTY("owner", Glib::RefPtr<Glib::Object>)
                _WRAP_PROPERTY("scanner", Glib::RefPtr<AttributeScanner>)
                _WRAP_PROPERTY("element-tag", Glib::ustring)
                _WRAP_PROPERTY("element-id", Glib::ustring)
                _WRAP_PROPERTY("path", Glib::ustring)
                _WRAP_PROPERTY("theme", Glib::RefPtr<Manifest::Theme>)
        };
    }
}
