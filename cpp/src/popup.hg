/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * popup.hg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <maia.h>
#include <maiamm/group.h>
#include <maiamm/graphic-color.h>

_DEFS(maiamm,maia)
_PINCLUDE(maiamm/private/group_p.h)

namespace Maia
{
    _WRAP_ENUM(WindowBorder, MaiaWindowBorder, NO_GTYPE)
    _WRAP_ENUM(PopupPlacement, MaiaPopupPlacement, NO_GTYPE)

    class Popup : public Group
    {
        _CLASS_GOBJECT(Popup, MaiaPopup, MAIA_POPUP, Group, MaiaGroup)

        public:
            _IGNORE(maia_popup_get_window_transform)

            _WRAP_METHOD(double get_border () const, maia_popup_get_border)
            _WRAP_METHOD(void set_border (double inBorder), maia_popup_set_border)

            _WRAP_METHOD(double get_shadow_width () const, maia_popup_get_shadow_width)
            _WRAP_METHOD(void set_shadow_width (double inWidth), maia_popup_set_shadow_width)

            _WRAP_METHOD(WindowBorder get_shadow_border () const, maia_popup_get_shadow_border)
            _WRAP_METHOD(void set_shadow_border (WindowBorder inBorder), maia_popup_set_shadow_border)

            _WRAP_METHOD(Glib::RefPtr<Graphic::Color> get_shadow_color () const, maia_popup_get_shadow_color, refreturn)
            _WRAP_METHOD(void set_shadow_color (const Glib::RefPtr<Graphic::Color>& inColor), maia_popup_set_shadow_color)

            _WRAP_METHOD(double get_round_corner () const, maia_popup_get_round_corner)
            _WRAP_METHOD(void set_round_corner (double inWidth), maia_popup_set_round_corner)

            _WRAP_METHOD(bool get_close_button () const, maia_popup_get_close_button)
            _WRAP_METHOD(void set_close_button (bool inClose = true), maia_popup_set_close_button)

            _WRAP_METHOD(PopupPlacement get_placement () const, maia_popup_get_placement)
            _WRAP_METHOD(void set_placement (PopupPlacement inPlacement), maia_popup_set_placement)

            _WRAP_METHOD(Glib::RefPtr<Item> get_content () const, maia_popup_get_content, refreturn)
            _WRAP_METHOD(void set_content (const Glib::RefPtr<Item>& inItem), maia_popup_set_content)

            _WRAP_METHOD(bool get_animation () const, maia_popup_get_animation)
            _WRAP_METHOD(void set_animation (bool inAnimation = true), maia_popup_set_animation)

            _WRAP_PROPERTY("border", double)
            _WRAP_PROPERTY("shadow-width", double)
            _WRAP_PROPERTY("shadow-border", WindowBorder)
            _WRAP_PROPERTY("shadow-color", Glib::RefPtr<Graphic::Color>)
            _WRAP_PROPERTY("round-corner", double)
            _WRAP_PROPERTY("close-button", bool)
            _WRAP_PROPERTY("placement", PopupPlacement)
            _WRAP_PROPERTY("content", Glib::RefPtr<Item>)
            _WRAP_PROPERTY("animation", bool)

        private:
            _WRAP_PROPERTY("x", double)
            _WRAP_PROPERTY("y", double)
    };
}
