/* -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * cairo-utils.ccg
 * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>
 *
 * maia is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * maia is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <cairomm/cairomm.h>
#include <maia-cairo-graphic.h>

_DEFS(maia-cairo-graphicmm,maia-cairo-graphic)

namespace Maia
{
    namespace Cairo
    {
        static void on_save_document_finished (GObject* inpObject, GAsyncResult* inpResult, gpointer inpData)
        {
            SlotSaveDocumentFinished* pSlot = (SlotSaveDocumentFinished*)inpData;
            if (!pSlot)
            {
                GError* gerror = 0;
                maia_cairo_save_document_finish (inpResult, &gerror);
                if (gerror) ::Glib::Error::throw_exception(gerror);
            }
            else
            {
                Glib::RefPtr<Gio::AsyncResult> pResult = Glib::wrap (inpResult);
                (*pSlot) (pResult);
            }

            delete pSlot; pSlot = 0;
        }

        static void on_generate_report_finished (GObject* inpObject, GAsyncResult* inpResult, gpointer inpData)
        {
            SlotSaveDocumentFinished* pSlot = (SlotSaveDocumentFinished*)inpData;
            if (!pSlot)
            {
                GError* gerror = 0;
                maia_cairo_generate_report_finish (inpResult, &gerror);
                if (gerror) ::Glib::Error::throw_exception(gerror);
            }
            else
            {
                Glib::RefPtr<Gio::AsyncResult> pResult = Glib::wrap (inpResult);
                (*pSlot) (pResult);
            }

            delete pSlot; pSlot = 0;
        }

        void save_document (const Glib::ustring& inPDFFilename, double inDpi, const Glib::RefPtr<Maia::Document>& inDocument)
        {
            maia_cairo_save_document (inPDFFilename.c_str (), inDpi, const_cast<MaiaDocument*> (inDocument->gobj ()), 0, on_save_document_finished, 0);
        }

        void save_document (const Glib::ustring& inPDFFilename, double inDpi, const Glib::RefPtr<Maia::Document>& inDocument, SlotSaveDocumentFinished inFunc)
        {
            SlotSaveDocumentFinished* pSlot = new SlotSaveDocumentFinished (inFunc);

            maia_cairo_save_document (inPDFFilename.c_str (), inDpi, const_cast<MaiaDocument*> (inDocument->gobj ()), 0, on_save_document_finished, pSlot);
        }

        void save_document (const Glib::ustring& inPDFFilename, double inDpi, const Glib::RefPtr<Maia::Document>& inDocument, const Glib::RefPtr<Gio::Cancellable>& inCancellable, SlotSaveDocumentFinished inFunc)
        {
            SlotSaveDocumentFinished* pSlot = new SlotSaveDocumentFinished (inFunc);

            maia_cairo_save_document (inPDFFilename.c_str (), inDpi, const_cast<MaiaDocument*> (inDocument->gobj ()), const_cast<GCancellable*> (inCancellable->gobj ()), on_save_document_finished, pSlot);
        }

        void save_document_finish (const Glib::RefPtr<Gio::AsyncResult>& inResult)
        {
            GError* gerror = 0;
            maia_cairo_save_document_finish (const_cast<GAsyncResult*> (inResult->gobj ()), &gerror);
            if (gerror) ::Glib::Error::throw_exception(gerror);
        }

        void generate_report (const Glib::ustring& inPDFFilename, double inDpi, const std::vector<Glib::RefPtr<Maia::Document> >& inDocuments)
        {
            MaiaDocument** documents = new MaiaDocument*[inDocuments.size ()];
            int cpt = 0;
            for (std::vector<Glib::RefPtr<Maia::Document> >::const_iterator iter = inDocuments.begin (); iter != inDocuments.end (); ++iter, ++cpt)
            {
                documents[cpt] = (*iter)->gobj ();
            }
            maia_cairo_generate_report (inPDFFilename.c_str (), inDpi, documents, inDocuments.size (), 0, on_generate_report_finished, 0);
            delete[] documents;
        }

        void generate_report (const Glib::ustring& inPDFFilename, double inDpi, const std::vector<Glib::RefPtr<Maia::Document> >& inDocuments, SlotGenerateReportFinished inFunc)
        {
            SlotGenerateReportFinished* pSlot = new SlotGenerateReportFinished (inFunc);
            MaiaDocument** documents = new MaiaDocument*[inDocuments.size ()];
            int cpt = 0;
            for (std::vector<Glib::RefPtr<Maia::Document> >::const_iterator iter = inDocuments.begin (); iter != inDocuments.end (); ++iter, ++cpt)
            {
                documents[cpt] = (*iter)->gobj ();
            }
            maia_cairo_generate_report (inPDFFilename.c_str (), inDpi, documents, inDocuments.size (), 0, on_generate_report_finished, pSlot);
            delete[] documents;
        }

        void generate_report (const Glib::ustring& inPDFFilename, double inDpi, const std::vector<Glib::RefPtr<Maia::Document> >& inDocuments, const Glib::RefPtr<Gio::Cancellable>& inCancellable, SlotGenerateReportFinished inFunc)
        {
            SlotGenerateReportFinished* pSlot = new SlotGenerateReportFinished (inFunc);
            MaiaDocument** documents = new MaiaDocument*[inDocuments.size ()];
            int cpt = 0;
            for (std::vector<Glib::RefPtr<Maia::Document> >::const_iterator iter = inDocuments.begin (); iter != inDocuments.end (); ++iter, ++cpt)
            {
                documents[cpt] = (*iter)->gobj ();
            }
            maia_cairo_generate_report (inPDFFilename.c_str (), inDpi, documents, inDocuments.size (), const_cast<GCancellable*> (inCancellable->gobj ()), on_generate_report_finished, pSlot);
            delete[] documents;
        }

        void generate_report_finish (const Glib::RefPtr<Gio::AsyncResult>& inResult)
        {
            GError* gerror = 0;
            maia_cairo_generate_report_finish (const_cast<GAsyncResult*> (inResult->gobj ()), &gerror);
            if (gerror) ::Glib::Error::throw_exception(gerror);
        }

        void document_page_to_png (const Glib::ustring& inPngFilename, const Glib::RefPtr<Maia::Document>& inDocument, unsigned int inNumPage)
        {
            GError* gerror = 0;
            maia_cairo_document_page_to_png (inPngFilename.c_str (), const_cast<MaiaDocument*> (inDocument->gobj ()), inNumPage, &gerror);
            if (gerror) ::Glib::Error::throw_exception(gerror);
        }
    }
}
