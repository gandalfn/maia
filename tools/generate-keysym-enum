#!/bin/sh

XKEYSYM_FILE=/usr/include/X11/keysymdef.h

cat $XKEYSYM_FILE | awk '
BEGIN {
    first=1;
    print "/* -*- Mode: Vala; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */"
    print "/*"
    print " * keysym.vala"
    print " * Copyright (C) Nicolas Bruguier 2010-2013 <gandalfn@club-internet.fr>"
    print " *"
    print " * maia is free software: you can redistribute it and/or modify it"
    print " * under the terms of the GNU Lesser General Public License as published"
    print " * by the Free Software Foundation, either version 3 of the License, or"
    print " * (at your option) any later version."
    print " *"
    print " * maia is distributed in the hope that it will be useful, but"
    print " * WITHOUT ANY WARRANTY; without even the implied warranty of"
    print " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
    print " * See the GNU Lesser General Public License for more details."
    print " *"
    print " * You should have received a copy of the GNU Lesser General Public License"
    print " * along with this program.  If not, see <http://www.gnu.org/licenses/>."
    print " */"
    print ""
    printf "public enum Maia.Modifier\n{\n"
    printf "    NONE,\n"
    printf "    SHIFT,\n"
    printf "    CONTROL,\n"
    printf "    ALT,\n"
    printf "    SUPER;\n\n"
    printf "    public string\n"
    printf "    to_string ()\n"
    printf "    {\n"
    printf "        switch (this)\n"
    printf "        {\n"
    printf "            case SHIFT:\n"
    printf "                return \"<Shift>\";\n\n"
    printf "            case CONTROL:\n"
    printf "                return \"<Control>\";\n\n"
    printf "            case ALT:\n"
    printf "                return \"<Alt>\";\n\n"
    printf "            case SUPER:\n"
    printf "                return \"<Super>\";\n"
    printf "        }\n\n"
    printf "        return \"\";\n"
    printf "    }\n"
    printf "    public static Modifier\n"
    printf "    from_string (string inValue)\n"
    printf "    {\n"
    printf "        switch (inValue)\n"
    printf "        {\n"
    printf "            case \"<Shift>\":\n"
    printf "                return SHIFT;\n\n"
    printf "            case \"<Control>\":\n"
    printf "                return CONTROL;\n\n"
    printf "            case \"<Alt>\":\n"
    printf "                return ALT;\n\n"
    printf "            case \"<Super>\":\n"
    printf "                return SUPER;\n"
    printf "        }\n\n"
    printf "        return NONE;\n"
    printf "    }\n"
    printf "}\n\n"
    printf "public enum Maia.Key\n{"
    ignore=0
    tostring=""
    fromstring=""
    last=""
}
{
    if (match ($0, "#ifdef.*XK_3270.*") || match ($0, "#ifdef.*XK_TECHNICAL.*") || match ($0, "#ifdef.*XK_APL.*") ||
        match ($0, "#ifdef.*XK_SPECIAL.*"))
        ignore=1
    if (match ($0, "#endif.*"))
        ignore=0

    val=$2
    if (val == "XF86XK_Clear")
    {
        val="XF86XK_WindowClear";
    }
    if (val == "XF86XK_Select")
    {
        val="XF86XK_SelectButton";
    }
    if (match ($0, "^#define XK_.*") && ignore == 0 &&
        val != "XF86XK_Q" && val != "XF86XK_Calculater" && match (val, "XK_Sinh*") == 0 &&
        val != "XK_dead_greek" && val != "XK_ch" && val != "XK_Ch" && val != "XK_CH" &&
        val != "XK_c_h" && val != "XK_C_h" && val != "XK_C_H" && val != "XK_permille" &&
        val != "XK_EZH" && val != "XK_ezh" && val != "XK_dead_lowline" && val != "XK_dead_aboveverticalline" &&
        val != "XK_dead_belowverticalline" && val != "XK_dead_longsolidusoverlay")
    {
        if (first == 1)
            printf ("\n");
        else
            printf (",\n");
        first=0;
        gsub("XK_", "", val);
        if (val == "0")
        {
            val="@0";
        }
        if (val == "1")
        {
            val="@1";
        }
        if (val == "2")
        {
            val="@2";
        }
        if (val == "3")
        {
            val="@3";
        }
        if (val == "4")
        {
            val="@4";
        }
        if (val == "5")
        {
            val="@5";
        }
        if (val == "6")
        {
            val="@6";
        }
        if (val == "7")
        {
            val="@7";
        }
        if (val == "8")
        {
            val="@8";
        }
        if (val == "9")
        {
            val="@9";
        }
        printf("    %s", val);
        last = val

        tostring = sprintf("%s            case %s:\n", tostring, val);
        tostring = sprintf("%s                return \"%s\";\n", tostring, val);
        fromstring = sprintf("%s            case \"%s\":\n", fromstring, val);
        fromstring = sprintf("%s                return %s;\n", fromstring, val);
    }
}
END {
    printf ";\n\n"

    printf "    public string\n"
    printf "    to_string ()\n"
    printf "    {\n"
    printf "        switch (this)\n"
    printf "        {\n"
    printf("%s", tostring);
    printf "        }\n\n"
    printf "        return \"\";\n"
    printf "    }\n\n"
    printf "    public static Key\n"
    printf "    from_string (string inValue)\n"
    printf "    {\n"
    printf "        switch (inValue)\n"
    printf "        {\n"
    printf("%s", fromstring);
    printf "        }\n\n"
    printf "        return (Key)0;\n"
    printf "    }\n"
    printf "}\n\n"
    printf "namespace Maia.Keysym\n"
    printf "{\n"
    printf "    public static void\n"
    printf "    get_modifiers_keys_from_string (string inVal, out Modifier[] outModifiers, out Key[] outKeys)\n"
    printf "    {\n"
    printf "        Modifier[] modifiers = {};\n"
    printf "        Key[] keys = {};\n\n"
    printf "        char* pBegin = (char*)inVal;\n"
    printf "        char* pEnd = pBegin + inVal.length;\n"
    printf "        char* pCurrent = pBegin;\n\n"
    printf "        while (pCurrent != pEnd)\n"
    printf "        {\n"
    printf "            if (pCurrent[0] == '\''<'\'')\n"
    printf "            {\n"
    printf "                pCurrent++;\n"
    printf "                string ret = null;\n"
    printf "                char* pStart = pCurrent;\n"
    printf "                while (pCurrent != pEnd)\n"
    printf "                {\n"
    printf "                    if (pCurrent[0] == '\''>'\'')\n"
    printf "                    {\n"
    printf "                        ret = ((string)pStart).substring (0, (long)(pCurrent - pStart));\n"
    printf "                        pCurrent++;\n"
    printf "                        break;\n"
    printf "                    }\n"
    printf "                    pCurrent++;\n"
    printf "                }\n"
    printf "                if (ret != null)\n"
    printf "                {\n"
    printf "                    modifiers += Modifier.from_string (@\"<$(ret)>\");\n"
    printf "                }\n\n"
    printf "                if (pCurrent == pEnd) break;\n"
    printf "            }\n"
    printf "            else\n"
    printf "            {\n"
    printf "                bool found = false;\n"
    printf "                unowned string val = (string)pCurrent;\n"
    printf("                for (int cpt = 0; !found && cpt <= (int)Key.%s; ++cpt)\n", last)
    printf "                {\n"
    printf "                    Key key = (Key)cpt;\n"
    printf "                    string key_str = key.to_string ();\n"
    printf "                    if (val.has_prefix (key_str))\n"
    printf "                    {\n"
    printf "                        keys += key;\n"
    printf "                        pCurrent += key_str.length;\n"
    printf "                        found = true;\n"
    printf "                    }\n"
    printf "                }\n\n"
    printf "                if (!found) pCurrent++;\n"
    printf "            }\n"
    printf "        }\n\n"
    printf "        outModifiers = modifiers;\n"
    printf "        outKeys = keys;\n"
    printf "    }\n\n"
    printf "    public static string\n"
    printf "    modifiers_keys_to_string (Modifier[] inModifiers, Key[] inKeys)\n"
    printf "    {\n"
    printf "        string ret = \"\";\n\n"
    printf "        foreach (Modifier modifier in inModifiers)\n"
    printf "        {\n"
    printf "            ret += @\"$(modifier)\";\n"
    printf "        }\n\n"
    printf "        foreach (Key key in inKeys)\n"
    printf "        {\n"
    printf "            ret += @\"$(key)\";\n"
    printf "        }\n\n"
    printf "        return ret;\n"
    printf "    }\n"
    printf "}\n"
}'
